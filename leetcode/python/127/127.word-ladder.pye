#
# @lc app=leetcode id=127 lang=python3
#
# [127] Word Ladder
#
# https://leetcode.com/problems/word-ladder/description/
#
# algorithms
# Medium (22.51%)
# Total Accepted:    223.2K
# Total Submissions: 991.4K
# Testcase Example:  '"hit"\n"cog"\n["hot","dot","dog","lot","log","cog"]'
#
# Given two words (beginWord and endWord), and a dictionary's word list, find
# the length of shortest transformation sequence from beginWord to endWord,
# such that:
#
#
# Only one letter can be changed at a time.
# Each transformed word must exist in the word list. Note that beginWord is not
# a transformed word.
#
#
# Note:
#
#
# Return 0 if there is no such transformation sequence.
# All words have the same length.
# All words contain only lowercase alphabetic characters.
# You may assume no duplicates in the word list.
# You may assume beginWord and endWord are non-empty and are not the same.
#
#
# Example 1:
#
#
# Input:
# beginWord = "hit",
# endWord = "cog",
# wordList = ["hot","dot","dog","lot","log","cog"]
#
# Output: 5
#
# Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" ->
# "dog" -> "cog",
# return its length 5.
#
#
# Example 2:
#
#
# Input:
# beginWord = "hit"
# endWord = "cog"
# wordList = ["hot","dot","dog","lot","log"]
#
# Output: 0
#
# Explanation: The endWord "cog" is not in wordList, therefore no possible
# transformation.
#
#
#
#
#
#
from collections import defaultdict, deque

def create_dict(wordlist):
    d = defaultdict(list)
    for w in wordlist:
        for i in range(0, len(w)):
            key = w[0:i] + "_" + w[i+1:]
            d[key].append(w)
    return d

class Solution:
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        if endWord not in wordList:
            return 0
        if beginWord == endWord:
            return 1

        d = create_dict(wordList + [beginWord])

        q = []
        qnew = []
        v = {}
        q.append(beginWord)

        depth = 0
        while q:
            depth += 1
            qnew = []
            while q:
                el = q.pop()
                v[el] = True
                # print("Visiting", el, depth)
                for i in range(0, len(el)):
                    for x in d[el[0:i] + "_" + el[i+1:]]:
                        if x not in v:
                            # print("In", el, "visiting", x)
                            if x == endWord:
                                return depth + 1
                            qnew.append(x)
            q = qnew
        return 0


test = True
if test:
    s = Solution()
    beginWord = "hit"
    endWord = "cog"
    wordList = ["hot", "dot", "dog", "lot", "log", "cog"]
    print(s.ladderLength(beginWord, endWord, wordList))

    beginWord = "a"
    endWord = "c"
    wordList = ["a", "b", "c"]
    print(s.ladderLength(beginWord, endWord, wordList))
