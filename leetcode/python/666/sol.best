
Java solution, Represent tree using HashMap

https://leetcode.com/problems/path-sum-iv/discuss/106892

* Lang:    cpp
* Author:  shawngao
* Votes:   44

How do we solve problem like this if we were given a normal tree? Yes, traverse it, keep a root to leaf running sum. If we see a leaf node (node.left == null && node.right == null), we add the running sum to the final result.

Now each tree node is represented by a number. 1st digits is the ```level```, 2nd is the ```position``` in that ```level``` (note that it starts from ```1``` instead of ```0```). 3rd digit is the value. We need to find a way to traverse this ```tree``` and get the sum.

The idea is, we can form a ```tree``` using a HashMap. The ```key``` is first two digits which marks the position of a node in the tree. The ```value``` is value of that node. Thus, we can easily find a node's left and right children using math. 
Formula: For node ```xy?``` its left child is ```(x+1)(y*2-1)?``` and right child is ```(x+1)(y*2)?```

Given above HashMap and formula, we can traverse the ```tree```. Problem is solved!
```
class Solution {
    int sum = 0;
    Map<Integer, Integer> tree = new HashMap<>();
    
    public int pathSum(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        
        for (int num : nums) {
            int key = num / 10;
            int value = num % 10;
            tree.put(key, value);
        }
        
        traverse(nums[0] / 10, 0);
        
        return sum;
    }
    
    private void traverse(int root, int preSum) {
        int level = root / 10;
        int pos = root % 10;
        int left = (level + 1) * 10 + pos * 2 - 1;
        int right = (level + 1) * 10 + pos * 2;
        
        int curSum = preSum + tree.get(root);
        
        if (!tree.containsKey(left) && !tree.containsKey(right)) {
            sum += curSum;
            return;
        }
        
        if (tree.containsKey(left)) traverse(left, curSum);
        if (tree.containsKey(right)) traverse(right, curSum);
    }
}
```
