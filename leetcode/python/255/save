#
# @lc app=leetcode id=255 lang=python3
#
# [255] Verify Preorder Sequence in Binary Search Tree
#
# https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/description/
#
# algorithms
# Medium (43.00%)
# Total Accepted:    33.6K
# Total Submissions: 78.1K
# Testcase Example:  '[5,2,6,1,3]'
#
# Given an array of numbers, verify whether it is the correct preorder
# traversal sequence of a binary search tree.
#
# You may assume each number in the sequence is unique.
#
# Consider the following binary search tree: 
#
#
# ⁠    5
# ⁠   / \
# ⁠  2   6
# ⁠ / \
# ⁠1   3
#
# Example 1:
#
#
# Input: [5,2,6,1,3]
# Output: false
#
# Example 2:
#
#
# Input: [5,2,1,3,6]
# Output: true
#
# Follow up:
# Could you do it using only constant space complexity?
#
#
"""
312 valid
  3
 /
1
 \
  2

321 valid
    3
   /
  2
 /
1

123 valid
1
 \
  2
   \
    3
132 valid
213 valid

231 not valid!
"""

class Solution:
    def verifyPreorder(self, alist):
        """

        1. push the (root, parent) to stack
        2. if next element is less that top of stack
           push to the stack (element, parent if parent < element)
        3. else
           keep popping until there is no element smaller than element
           the last item is the parent of the current element
           push element to stack (element, parent)
        4. if next element is smaller than root and smaller than root's parent
           then error, else push (element, root's parent)

        Example:
           testcase = [3, 2, 1, 5, 4, 6]

        stack: 3
        stack: 3 2
        stack: 3 2 1
        stack: (5,3)
        stack: (5,3) (4,3)
        stack: 6

        """
        if len(alist)<=2:
            return True

        st = []
        st.append((alist[0], None))
        for i in range(1, len(alist)):
            el = alist[i]
            # print(el, st)
            if el < st[-1][0]:
                if st[-1][1]:
                    if el < st[-1][1]:
                        return False
                st.append((el, st[-1][1]))
            else:
                # keep popping until top stack is bigger
                parent = (None, None)
                while st and el > st[-1][0]:
                    parent = st.pop()
                st.append((el, parent[0]))
        return True


test = True
if test:
    s = Solution()
    case = [0, 0, 0, 1]
    if case[0]:
        # True
        print(s.verifyPreorder([5, 2, 1, 3, 6]))
    if case[1]:
        # True
        testcase = [1, 2, 3]
        print(s.verifyPreorder(testcase))
    if case[2]:
        # False
        testcase = [4, 2, 3, 1]
        print(s.verifyPreorder(testcase))
    if case[3]:
        testcase = [3, 2, 1, 5, 4, 6]
        print(s.verifyPreorder(testcase))
