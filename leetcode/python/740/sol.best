
[Java/C++] Clean Code with Explanation

https://leetcode.com/problems/delete-and-earn/discuss/109895

* Lang:    cpp
* Author:  alexander
* Votes:   68

1. If we sort all the numbers into `buckets` indexed by these numbers, this is essentially asking you to repetitively take an bucket while giving up the 2 buckets next to it. (the range of these numbers is [1, 10000])

2. The optimal final result can be derived by keep updating 2 variables `skip_i`, `take_i`, which stands for:
`skip_i` : the best result for sub-problem of first `(i+1)` buckets from `0` to `i`, while you **skip** the `i`th bucket.
`take_i` : the best result for sub-problem of first `(i+1)` buckets from `0` to `i`, while you **take** the `i`th bucket.
3. DP formula:
`take[i] = skip[i-1] + values[i];`
`skip[i] = Math.max(skip[i-1], take[i-1]); `
`take[i]` can only be derived from: if you skipped the `[i-1]`th bucket, and you take bucket[i].
`skip[i]` through, can be derived from either `take[i-1]` or `skip[i-1]`, whatever the bigger;

```
/**
 * for numbers from [1 - 10000], each has a total sum sums[i]; if you earn sums[i], you cannot earn sums[i-1] and sums[i+1]
 * kind of like house robbing. you cannot rob 2 connected houses.
 * 
 */
```
**Java**
```
class Solution {
    public int deleteAndEarn(int[] nums) {
        int n = 10001;
        int[] values = new int[n];
        for (int num : nums)
            values[num] += num;

        int take = 0, skip = 0;
        for (int i = 0; i < n; i++) {
            int takei = skip + values[i];
            int skipi = Math.max(skip, take);
            take = takei;
            skip = skipi;
        }
        return Math.max(take, skip);
    }
}
```
**C++**
```
class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        int n = 10001;
        vector<int> values(n, 0);
        for (int num : nums)
            values[num] += num;

        int take = 0, skip = 0;
        for (int i = 0; i < n; i++) {
            int takei = skip + values[i];
            int skipi = max(skip, take);
            take = takei;
            skip = skipi;
        }
        return max(take, skip);
    }
};
```
