#
# @lc app=leetcode id=207 lang=python3
#
# [207] Course Schedule
#
# https://leetcode.com/problems/course-schedule/description/
#
# algorithms
# Medium (36.27%)
# Total Accepted:    180.4K
# Total Submissions: 497.4K
# Testcase Example:  '2\n[[1,0]]'
#
# There are a total of n courses you have to take, labeled from 0 to n-1.
#
# Some courses may have prerequisites, for example to take course 0 you have to
# first take course 1, which is expressed as a pair: [0,1]
#
# Given the total number of courses and a list of prerequisite pairs, is it
# possible for you to finish all courses?
#
# Example 1:
#
#
# Input: 2, [[1,0]]
# Output: true
# Explanation: There are a total of 2 courses to take.
# To take course 1 you should have finished course 0. So it is possible.
#
# Example 2:
#
#
# Input: 2, [[1,0],[0,1]]
# Output: false
# Explanation: There are a total of 2 courses to take.
# To take course 1 you should have finished course 0, and to take course 0 you
# should
# also have finished course 1. So it is impossible.
#
#
# Note:
#
#
# The input prerequisites is a graph represented by a list of edges, not
# adjacency matrices. Read more about how a graph is represented.
# You may assume that there are no duplicate edges in the input prerequisites.
#
#
#
from collections import defaultdict
class Solution:
    def canFinish(self, nc, pr):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        self.v = {}   # visited
        self.d = {}   # start time
        self.f = {}   # finish time
        self.t = 1
        self.g = defaultdict(list)
        self.cycle = False

        for p in pr:
            self.g[p[0]].append(p[1])

        for n in range(nc):
            if n in self.v:
                continue
            self.visit(n)
            if self.cycle:
                return False

        # print(self.v)
        # print(self.d)
        # print(self.f)
        return True

    def is_backedge(self, a, b):
        # a is a back edge to b
        # if b is an ancestor
        # b is an ancestor if
        # d[a] is > d[b] and f[b] not done yet
        if b in self.d:
            if self.d[a] > self.d[b] and b not in self.f:
                return True
        return False

    def visit(self, n):
        self.v[n] = True
        self.d[n] = self.t
        self.t += 1
        for e in self.g[n]:
            if self.is_backedge(n, e):
                self.cycle = True
                return
            if e not in self.v:
                self.visit(e)
        self.f[n] = self.t
        self.t += 1


test = True
if test:
    s = Solution()
    g0 = [
        ['a', 'c'],
        ['c', 'd'],
        ['b', 'd'],
        ['a', 'd'],
        ['c', 'e'],
        ['f', 'e'],
        ['f', 'g'],
        ['g', 'h'],
        ['e', 'h']]
    h = {}
    for i in range(0, 8):
        h[chr(i+ord('a'))] = i
    g1 = []
    for e in g0:
        g1.append([h[x] for x in e])
    # print(g1)

    print(s.canFinish(8, g1))
