
[C++/Java/Python] Straight Forward

https://leetcode.com/problems/car-fleet/discuss/139850

* Lang:    cpp
* Author:  lee215
* Votes:   89

Calculate time needed to arrive the target, sort by the start position.
Loop on each car from the end to the beginning. `cur` recorde the current biggest time (the slowest).
If another car needs less or equal time than `cur`, it can catch up this car.
Otherwise it will become the new slowest car, that is new lead of a car fleet.


**Time Complexity**:
O(NlogN)

**C++:**
```
    int carFleet(int target, vector<int>& pos, vector<int>& speed) {
        map<int, double> m;
        for (int i = 0; i < pos.size(); i++) m[-pos[i]] = (double)(target - pos[i]) / speed[i];
        int res = 0; double cur = 0;
        for (auto it : m) if (it.second > cur) cur = it.second, res++;
        return res;
    }
```

**Java:**
```
    public int carFleet(int target, int[] pos, int[] speed) {
        TreeMap<Integer, Double> m = new TreeMap<>();
        for (int i = 0; i < pos.length; ++i) m.put(-pos[i], (double)(target - pos[i]) / speed[i]);
        int res = 0; double cur = 0;
        for (double time : m.values()) {
            if (time > cur) {
                cur = time;
                res++;
            }
        }
        return res;
    }
```
**Python:**
```
    def carFleet(self, target, pos, speed):
        time = [float(target - p) / s for p, s in sorted(zip(pos, speed))]
        res = cur = 0
        for t in time[::-1]:
            if t > cur:
                res += 1
                cur = t
        return res
```
