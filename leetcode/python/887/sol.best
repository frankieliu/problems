
[C++/Java/Python] 2D and 1D DP, O(KlogN)

https://leetcode.com/problems/super-egg-drop/discuss/158974

* Lang:    cpp
* Author:  lee215
* Votes:   109

Drop eggs is a very classical problem.
Some people may come up with idea `O(KN^2)`
where `dp[K][N] = 1 + max(dp[K - 1][i - 1],dp[K][N - i])` for i in 1...N.
However this idea is very brute force, for the reason that you check all possiblity.

So I consider this problem in a different way:
`dp[M][K]`means that, given `K` eggs and `M` moves,
what is the maximum number of floor that we can check.

The dp equation is:
`dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1`,
which means we take 1 move to a floor,
if egg breaks, then we can check `dp[m - 1][k - 1]` floors.
if egg doesn\'t breaks, then we can check `dp[m - 1][k - 1]` floors.

`dp[m][k]` is similar to the number of combinations and it increase exponentially to `N`


**Time Complexity**:
`O(KlogN)` Time,  `O(NK)` Space


**C++:**
```
    int superEggDrop(int K, int N) {
        vector<vector<int>> dp(N + 1, vector<int>(K + 1, 0));
        int m = 0;
        while (dp[m][K] < N) {
            m++;
            for (int k = 1; k <= K; ++k)
                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1;
        }
        return m;
    }
```

**Java:**
```
    public int superEggDrop(int K, int N) {
        int[][] dp = new int[N + 1][K + 1];
        int m = 0;
        while (dp[m][K] < N) {
            ++m;
            for (int k = 1; k <= K; ++k)
                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1;
        }
        return m;
    }
```
**Python:**
```
    def superEggDrop(self, K, N):
        dp = [[0] * (K + 1) for i in range(N + 1)]
        for m in range(1, N + 1):
            for k in range(1, K + 1):
                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1
            if dp[m][K] >= N: return m
```


Optimized to 1D DP

**Time Complexity**:
C++/Java `O(KlogN)` Time,  `O(K)` Space
Python `O(min(K, logN)^2)` Time,  `O(min(K, logN))` Space

**C++:**
```
    int superEggDrop(int K, int N) {
        vector<int> dp(K + 1, 0);
        int m;
        for (m = 0; dp[K] < N; m++)
            for (int k = K; k > 0; --k)
                dp[k] += dp[k - 1] + 1;
        return m;
    }
```

**Java:**
```
    public int superEggDrop(int K, int N) {
        int dp[] = new int[K + 1], m = 0;
        for (m = 0; dp[K] < N; ++m)
            for (int k = K; k > 0; --k)
                dp[k] += dp[k - 1] + 1;
        return m;
    }
```
**Python:**
```
    def superEggDrop(self, K, N):
        dp = [0, 0]
        m = 0
        while dp[-1] < N:
            for i in range(len(dp) - 1, 0, - 1):
                dp[i] += dp[i - 1] + 1
            if len(dp) < K + 1:
                dp.append(dp[-1])
            m += 1
        return m
```

