
[C++/Java/Python] Solution with Explanation and Prove

https://leetcode.com/problems/largest-triangle-area/discuss/122711

* Lang:    cpp
* Author:  lee215
* Votes:   64

**Explanaiton**
Burete force loop on all combinations of three points and calculate the area of these three points.
If you google "three pointes triangle area formula", you can find the answer with the first result in second.

**Time complexity**
```O(N^3)``` solution, but ```N <= 50```, so it\'s fast enough.
You may find convex hull first as @weidairpi replies. It help improve to O(M^3 + NlogN) in the best case where M is the number of points on the hull. 
But it make this easy problem complex and it stays same complexity in the worst case.

**Prove 1**
Well, someone complains the situation without any formula.
In fact the formula is not that difficult to find out.

For this case:
![image](https://s3-lc-upload.s3.amazonaws.com/users/lee215/image_1523209147.png)

We can calculate the area as follow:
![image](https://s3-lc-upload.s3.amazonaws.com/users/lee215/image_1523379988.png)


In the result A,B,C are symmetrical, so it won\'t matter what order we name it.
In this case, we calculate the total area by addition three triangle.
In the other cases, you may need to use substraction and it\'s quite the same process.

**Prove 2**
If you are familar with vector product. The result is quite obvious.
![image](https://s3-lc-upload.s3.amazonaws.com/users/lee215/image_1523380000.png)


**C++:**
```
    double largestTriangleArea(vector<vector<int>>& p) {
        double res = 0;
        for (auto &i : p)
            for (auto &j : p)
                for (auto &k : p)
            res = max(res, 0.5 * abs(i[0] * j[1] + j[0] * k[1] + k[0] * i[1]- j[0] * i[1] - k[0] * j[1] - i[0] * k[1]));
        return res;
    }
```
**Java:**
```
    public double largestTriangleArea(int[][] p) {
        double res = 0;
        for (int[] i: p)
            for (int[] j: p)
                for (int[] k: p)
            res = Math.max(res, 0.5 * Math.abs(i[0] * j[1] + j[0] * k[1] + k[0] * i[1]- j[0] * i[1] - k[0] * j[1] - i[0] * k[1]));
        return res;
    }
```

**1-line Python**
```
def largestTriangleArea(self, p):
        return max(0.5 * abs(i[0] * j[1] + j[0] * k[1] + k[0] * i[1]- j[0] * i[1] - k[0] * j[1] - i[0] * k[1])
            for i, j, k in itertools.combinations(p, 3))
```
