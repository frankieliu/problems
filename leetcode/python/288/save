#
# @lc app=leetcode id=288 lang=python3
#
# [288] Unique Word Abbreviation
#
# https://leetcode.com/problems/unique-word-abbreviation/description/
#
# algorithms
# Medium (19.68%)
# Total Accepted:    40.2K
# Total Submissions: 204.5K
# Testcase Example:  '["ValidWordAbbr","isUnique","isUnique","isUnique","isUnique"]\n[[["deer","door","cake","card"]],["dear"],["cart"],["cane"],["make"]]'
#
# An abbreviation of a word follows the form <first letter><number><last
# letter>. Below are some examples of word abbreviations:
#
#
# a) it                      --> it    (no abbreviation)
#
# ⁠    1
# ⁠    ↓
# b) d|o|g                   --> d1g
#
# ⁠             1    1  1
# ⁠    1---5----0----5--8
# ⁠    ↓   ↓    ↓    ↓  ↓
# c) i|nternationalizatio|n  --> i18n
#
# ⁠             1
# ⁠    1---5----0
# ↓   ↓    ↓
# d) l|ocalizatio|n          --> l10n
#
#
# Assume you have a dictionary and given a word, find whether its abbreviation
# is unique in the dictionary. A word's abbreviation is unique if no other word
# from the dictionary has the same abbreviation.
#
# Example:
#
#
# Given dictionary = [ "deer", "door", "cake", "card" ]
#
# isUnique("dear") -> false
# isUnique("cart") -> true
# isUnique("cane") -> false
# isUnique("make") -> true
#
#
#
from collections import defaultdict
class ValidWordAbbr:

    def __init__(self, dictionary):
        self.d = {}
        self.uniq = {}
        for word in dictionary:
            el = "^" + word + "$"
            ab = el[1] + el[-2]
            if ab not in self.d:
                self.d[ab] = {}
            if len(word) not in self.d[ab]:
                self.d[ab][len(word)] = 1
                self.uniq[word] = True
            else:
                if word not in self.uniq:
                    self.d[ab][len(word)] += 1

        # print(self.d)

    def isUnique(self, word):
        el = "^" + word + "$"
        ab = el[1] + el[-2]
        if False:
            print(ab, ab in self.d)
            if ab in self.d:
                print(len(word), len(word) in self.d[ab])
        if ab not in self.d:
            return True
        if len(word) not in self.d[ab]:
            return True
        # if there is only one element and it matches the word
        # then it is unique
        # print(self.d[ab], word in self.uniq)
        if self.d[ab][len(word)] == 1 and word in self.uniq:
            return True
        return False


# Your ValidWordAbbr object will be instantiated and called as such:
# obj = ValidWordAbbr(dictionary)
# param_1 = obj.isUnique(word)


test = True
if test:
    # s = Solution()
    case = [False, True, False]
    if case[0]:
        # testcase: '["ValidWordAbbr",
        #             "isUnique","isUnique","isUnique","isUnique"]'
        adict = ["deer","door","cake","card"]
        words = ["dear","cart","cane","make"]
        # answer: [null,false,false,false,false]
        # expected_answer: [null,false,true,false,true]
        s = ValidWordAbbr(adict)
        for w in words:
            print(s.isUnique(w))
    if case[1]:
        adict = ["hello"]
        words = ["hello"]
        s = ValidWordAbbr(adict)
        for w in words:
            print(s.isUnique(w))
