
C++ 2 lines O(4) | O (1)

https://leetcode.com/problems/n-repeated-element-in-size-2n-array/discuss/208317

* Lang:    cpp
* Author:  votrubac
* Votes:   43

The intuition here is that the repeated numbers have to appear either next to each other (```A[i] == A[i + 1]```), or alternated (```A[i] == A[i + 2]```).

The only exception is sequences like ```[2, 1, 3, 2]```. In this case, the result is the last number, so we just return it in the end. This solution has O(n) runtime.
```
int repeatedNTimes(vector<int>& A) {
  for (auto i = 0; i < A.size() - 2; ++i)
    if (A[i] == A[i + 1] || A[i] == A[i + 2]) return A[i];
  return A[A.size() - 1]; 
}
```
Another interesting approach is to use randomization (courtesy of [@lee215 ](https://leetcode.com/lee215)). If you pick two numbers randomly, there is a 25% chance you bump into the repeated number. So, in average, we will find the answer in 4 attempts, thus O(4) runtime.
```
int repeatedNTimes(vector<int>& A, int i = 0, int j = 0) {
  while (A[i = rand() % A.size()] != A[j = rand() % A.size()] || i == j);
  return A[i];
}
```
