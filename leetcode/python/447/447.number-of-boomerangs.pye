#
# @lc app=leetcode id=447 lang=python3
#
# [447] Number of Boomerangs
#
# https://leetcode.com/problems/number-of-boomerangs/description/
#
# algorithms
# Easy (48.83%)
# Total Accepted:    49.5K
# Total Submissions: 101.4K
# Testcase Example:  '[[0,0],[1,0],[2,0]]'
#
# Given n points in the plane that are all pairwise distinct, a "boomerang" is
# a tuple of points (i, j, k) such that the distance between i and j equals the
# distance between i and k (the order of the tuple matters).
#
# Find the number of boomerangs. You may assume that n will be at most 500 and
# coordinates of points are all in the range [-10000, 10000] (inclusive).
#
# Example:
#
# Input:
# [[0,0],[1,0],[2,0]]
#
# Output:
# 2
#
# Explanation:
# The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]
#
#
#

from collections import defaultdict

class Solution:
    def numberOfBoomerangs(self, p):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        # need to find all isoceles
        # we can do pairwise distance between any two points
        """
        {p1:
          {d1: p2,
           d2: p3}}

        so you try to find the same distance
        d1: (p1,p2) (p2, p3)
        """
        def distance(p0, p1):
            a = p0[0]-p1[0]
            b = p0[1]-p1[1]
            return a*a + b*b

        d = defaultdict(dict)

        for i in range(0, len(p)-1):
            for j in range(i+1, len(p)):
                dist = distance(p[i], p[j])
                if dist not in d[i]:
                    d[i][dist] = 1
                else:
                    d[i][dist] += 1
                if dist not in d[j]:
                    d[j][dist] = 1
                else:
                    d[j][dist] += 1

        out = 0
        for i in d:
            for dist in d[i]:
                count = d[i][dist]
                out += count*(count-1)

        return out


test = True
if test:
    s = Solution()
    example = [[0,0],[1,0],[2,0]]
    print(s.numberOfBoomerangs(example))
