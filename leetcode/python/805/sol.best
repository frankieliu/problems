
C++ Solution with explanation, early termination (Updated for new test case)

https://leetcode.com/problems/split-array-with-same-average/discuss/120667

* Lang:    cpp
* Author:  zestypanda
* Votes:   53

First, this problem is NP, and the worst case runtime is exponential. But the expected runtime for random input could be very fast.

If the array of size n can be splitted into group A and B with same mean, assuming A is the smaller group, then
```
  totalSum/n = Asum/k = Bsum/(n-k), where k = A.size() and 1 <= k <= n/2;
  Asum = totalSum*k/n, which is an integer. So we have totalSum*k%n == 0;
```
In general, not many k are valid. 

**Solution 2: early pruning + knapsack DP, O(n^3 * M) 33 ms**
If there are still some k valid after early pruning by checking ```totalSum*k%n == 0```,
we can generate all possible combination sum of k numbers from the array using DP, like knapsack problem. (Note: 1 <= k <= n/2)
Next, for each valid k, simply check whether the group sum, i.e. totalSum * k / n, exists in the kth combination sum hashset.
```
vector<vector<unordered_set<int>>> sums(n, vector<unordered_set<int>>(n/2+1));
sums[i][j] is all possible combination sum of j numbers from the subarray A[0, i];
```
**Goal:** sums[n-1][k], for all k in range [1, n/2]
**Initial condition:** sums[i][0] = {0}, 0 <= i <= n-1; sums[0][1] = {all numbers in the array}; 
**Deduction:** sums[i+1][j] = sums[i][j]  "join"  (sums[i][j-1] + A[i+1])
The following code uses less space but the same DP formula.
**Runtime analysis:**
All numbers in the array are in range [0, 10000]. Let M = 10000.
So the size of kth combination sum hashset, i.e. sums[...][k], is <= k * M;
For each number in the array, the code need loop through all combination sum hashsets, so 
the total runtime is n * (1 * M + 2 * M + ... + (n/2) * M) = **O(n^3 * M)**
```
class Solution {
public:
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size(), m = n/2, totalSum = accumulate(A.begin(), A.end(), 0);
        // early pruning
        bool isPossible = false;
        for (int i = 1; i <= m && !isPossible; ++i) 
            if (totalSum*i%n == 0) isPossible = true;
        if (!isPossible) return false;
        // DP like knapsack
        vector<unordered_set<int>> sums(m+1);
        sums[0].insert(0);
        for (int num: A) {
            for (int i = m; i >= 1; --i) 
                for (const int t: sums[i-1]) 
                    sums[i].insert(t + num);
        }
        for (int i = 1; i <= m; ++i) 
            if (totalSum*i%n == 0 && sums[i].find(totalSum*i/n) != sums[i].end()) return true;
        return false;
    }
};
```

**Solution 1: early termination + combination sum. 5 ms Now TLE (Update)**
For such k, the problem transforms to "Find k sum = Asum, i.e. totalSum * k/n, from an array of size n". This subproblem is similar to LC39 combination sum, which can be solved by backtracking.
```
class Solution {
public:
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size(), m = n/2, totalSum = accumulate(A.begin(), A.end(), 0);
        sort(A.rbegin(), A.rend()); // Optimization
        for (int i = 1; i <= m; ++i) 
            if (totalSum*i%n == 0 && combinationSum(A, 0, i, totalSum*i/n)) return true;
        return false;
    }
    bool combinationSum(vector<int>& nums, int idx, int k, int tar) {
        if (tar > k * nums[idx]) return false; // Optimization, A is sorted from large to small
        if (k == 0) return tar == 0;
        for (int i = idx; i <= nums.size()-k; ++i) 
            if (nums[i] <= tar && combinationSum(nums, i+1, k-1, tar-nums[i])) return true;
        return false;
    }
};
```
