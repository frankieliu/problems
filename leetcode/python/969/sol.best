
[Java/C++/Python] Straight Forward

https://leetcode.com/problems/pancake-sorting/discuss/214213

* Lang:    cpp
* Author:  lee215
* Votes:   35

**Explanation**
Find the index `i` of the next maximum number `x`.
Reverse `i + 1` numbers, so that the `x` will be at `A[0]`
Reverse `x` numbers, so that `x` will be at `A[x - 1]`.
Repeat this process `N` times.

**Update:**
Actually, I didn\'t use the condition permutation of `[1,2,..., A.length]`.
I searched in the descending order of `A`.

**Time Complexity**:
O(N^2)

<br>

**Java:**
```
    public List<Integer> pancakeSort(int[] A) {
        List<Integer> res = new ArrayList<>();
        for (int x = A.length, i; x > 0; --x) {
            for (i = 0; A[i] != x; ++i);
            reverse(A, i + 1);
            res.add(i + 1);
            reverse(A, x);
            res.add(x);
        }
        return res;
    }

    public void reverse(int[] A, int k) {
        for (int i = 0, j = k - 1; i < j; i++, j--) {
            int tmp = A[i];
            A[i] = A[j];
            A[j] = tmp;
        }
    }
```

**C++:**
```
    vector<int> pancakeSort(vector<int> A) {
        vector<int> res;
        int x,i;
        for (x = A.size(); x > 0; --x) {
            for (i = 0; A[i] != x; ++i);
            reverse(A.begin(), A.begin() + i + 1);
            res.push_back(i + 1);
            reverse(A.begin(), A.begin() + x);
            res.push_back(x);
        }
        return res;
    }
```

**Python:**
```
    def pancakeSort(self, A):
        res = []
        for x in range(len(A), 1, -1):
            i = A.index(x)
            res.extend([i + 1, x])
            A = A[:i:-1] + A[:i]
        return res
```

