#
# @lc app=leetcode id=162 lang=python3
#
# [162] Find Peak Element
#
# https://leetcode.com/problems/find-peak-element/description/
#
# algorithms
# Medium (40.55%)
# Total Accepted:    210.8K
# Total Submissions: 520K
# Testcase Example:  '[1,2,3,1]'
#
# A peak element is an element that is greater than its neighbors.
#
# Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and
# return its index.
#
# The array may contain multiple peaks, in that case return the index to any
# one of the peaks is fine.
#
# You may imagine that nums[-1] = nums[n] = -∞.
#
# Example 1:
#
#
# Input: nums = [1,2,3,1]
# Output: 2
# Explanation: 3 is a peak element and your function should return the index
# number 2.
#
# Example 2:
#
#
# Input: nums = [1,2,1,3,5,6,4]
# Output: 1 or 5
# Explanation: Your function can return either index number 1 where the peak
# element is 2,
# or index number 5 where the peak element is 6.
#
#
# Note:
#
# Your solution should be in logarithmic complexity.
#
#
class Solution:
    def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return self.help(nums, 0, len(nums))

    def help(self, nums, i, j):  # j not inclusive
        print("help", (i,j))

        if j-i == 1:
            return i

        mid = (j+i-1)//2

        # i=0 j=2, i.e. two items mid = 0
        if mid-1 < 0:
            if nums[mid] > nums[mid+1]:
                return mid
            else:
                return mid+1

        # happy case
        if nums[mid-1] < nums[mid] > nums[mid+1]:
            return mid
        else:
            if nums[mid-1] > nums[mid]:
                return self.help(nums, 0, mid)
            else:
                return self.help(nums, mid+1, j)


test = True
if test:
    s = Solution()
    # print(s.findPeakElement(list(reversed([1,2,3,4,5]))))
    a = [1,2,3,2,1,-1,-2]
    print(a[s.findPeakElement(a)])
