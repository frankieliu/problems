#
# @lc app=leetcode id=200 lang=python3
#
# [200] Number of Islands
#
# https://leetcode.com/problems/number-of-islands/description/
#
# algorithms
# Medium (39.81%)
# Total Accepted:    287K
# Total Submissions: 720.8K
# Testcase Example:  '[["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]'
#
# Given a 2d grid map of '1's (land) and '0's (water), count the number of
# islands. An island is surrounded by water and is formed by connecting
# adjacent lands horizontally or vertically. You may assume all four edges of
# the grid are all surrounded by water.
#
# Example 1:
#
#
# Input:
# 11110
# 11010
# 11000
# 00000
#
# Output:Â 1
#
#
# Example 2:
#
#
# Input:
# 11000
# 11000
# 00100
# 00011
#
# Output: 3
#
#
class Solution:
    """

    For a single row it is pretty easy to count the number of islands
    - just iterate through the array and check if previous element was an
      island or not, if not then it is a new island

    Main idea here is to merge the rows together if islands intersect
    from other rows:
    - if there are two or more islands from above they get merged if
      there is a slab below which connects them together

    Use a hash to keep the number of active islands.

    New islands get new labels via a count.  Even if islands are later
    merged we still keep increment count, and just delete the element in
    the hash to indicate that the island has merged

    To disambiguate which label to keep during merge, we always choose the
    smallest label.

    """
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """

        if len(grid) == 0:
            return 0
        if len(grid) == 1 and len(grid[0]) == 1:
            if grid[0][0] == '1':
                return 1
            else:
                return 0

        # we use 1 to start off because
        # would like to label with count+1 = 2
        # since the grid already uses '1'
        count = 1
        h = {}   # hash of labels

        # top row:
        i = 0
        for j in range(len(grid[i])):
            if j == 0:
                if grid[i][j] == '1':
                    count += 1
                    grid[i][j] = count
                    h[count] = True
            else:
                if grid[i][j] == '1':
                    if grid[i][j-1] != '0':
                        grid[i][j] = grid[i][j-1]
                    else:
                        count += 1
                        grid[i][j] = count
                        h[count] = True

        # print(grid[i])

        # second row onward

        for i in range(1, len(grid)):
            # print("working on", i)
            j = 0
            # copy from above
            if grid[i][j] == '1':
                if grid[i-1][j] != '0':
                    grid[i][j] = grid[i-1][j]
                else:
                    count += 1
                    grid[i][j] = count
                    h[count] = True

            # merge right
            for j in range(1, len(grid[0])):
                if grid[i][j] == '1':
                    # left neighbor island
                    if grid[i][j-1] != '0':
                        grid[i][j] = grid[i][j-1]
                        if grid[i-1][j] != '0' and grid[i-1][j] != grid[i][j]:
                            # merge islands
                            # choose the smaller of the labels
                            if grid[i-1][j] < grid[i][j]:
                                del h[grid[i][j]]
                                # relabel
                                for k in range(j, -1, -1):
                                    if grid[i][k] == '0':
                                        break
                                    grid[i][k] = grid[i-1][j]
                            else:
                                if grid[i-1][j] in h:
                                    del h[grid[i-1][j]]
                    # loner
                    else:
                        # merge with above
                        if grid[i-1][j] != '0':
                            grid[i][j] = grid[i-1][j]
                        else:
                            count += 1
                            grid[i][j] = count
                            h[count] = True

            # print(grid[i], count)
        return len(h)


test = True
if test:
    s = Solution()
    a = ["11110",
         "11010",
         "11000",
         "00000"]

    a = ["11000",
         "11000",
         "00100",
         "00011"]


    # print(s.numIslands([list(x) for x in a]))

    a = [["1","0","1","1","0","1","1"]]

    a = [["1","1","1","1","1","1","1"],
         ["0","0","0","0","0","0","1"],
         ["1","1","1","1","1","0","1"],
         ["1","0","0","0","1","0","1"],
         ["1","0","1","0","1","0","1"],
         ["1","0","1","1","1","0","1"],
         ["1","1","1","1","1","1","1"]]
    print(s.numIslands(a))
