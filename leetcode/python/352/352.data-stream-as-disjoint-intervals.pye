#
# @lc app=leetcode id=352 lang=python3
#
# [352] Data Stream as Disjoint Intervals
#
# https://leetcode.com/problems/data-stream-as-disjoint-intervals/description/
#
# algorithms
# Hard (42.77%)
# Total Accepted:    21.8K
# Total Submissions: 50.9K
# Testcase Example:  '["SummaryRanges","addNum","getIntervals","addNum","getIntervals","addNum","getIntervals","addNum","getIntervals","addNum","getIntervals"]\n[[],[1],[],[3],[],[7],[],[2],[],[6],[]]'
#
# Given a data stream input of non-negative integers a1, a2, ..., an, ...,
# summarize the numbers seen so far as a list of disjoint intervals.
#
# For example, suppose the integers from the data stream are 1, 3, 7, 2, 6,
# ..., then the summary will be:
#
#
# [1, 1]
# [1, 1], [3, 3]
# [1, 1], [3, 3], [7, 7]
# [1, 3], [7, 7]
# [1, 3], [6, 7]
#
#
# Follow up:
# What if there are lots of merges and the number of disjoint intervals are
# small compared to the data stream's size?
#
#
# Definition for an interval.
import heapq

class Interval:
    def __init__(self, s=0, e=0):
        self.start = s
        self.end = e

class SummaryRanges1:

    def __init__(self):
        """
        Initialize your data structure here.
        Append interval to heap when adding a number
        Merge intervals during getIntervals
        """
        self.intervals = []

    def addNum(self, val):
        """
        :type val: int
        :rtype: void
        """
        # sort by the start of the interval
        heapq.heappush(self.intervals, (val, Interval(val,val)))

    def getIntervals(self):
        """
        :rtype: List[Interval]
        """
        stack = []
        while self.intervals:
            idx, cur = heapq.heappop(self.intervals)
            if not stack:
                stack.append((idx, cur))
            else:
                _, prev = stack[-1]
                if prev.end + 1 >= cur.start:
                    prev.end = max(prev.end, cur.end)
                else:
                    stack.append((idx,cur))
        self.intervals = stack
        return list(map(lambda x: x[1], stack))

class SummaryRanges:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.intervals = [Interval(-10, -10), Interval(1 << 32, 1 << 32)]
        self.N = 2

    def addNum(self, val):
        """
        :type val: int
        :rtype: void
        """
        # might be better with binary search
        for i in range(1, self.N):
            prev = self.intervals[i-1]
            cur = self.intervals[i]
            if prev.end < val < cur.start:  # in between
                if prev.end + 1 == val == cur.start - 1:   # abuts both
                    prev.end = cur.end
                    self.intervals[i:] = self.intervals[i+1:]
                    self.N -= 1
                elif prev.end + 1 == val:   # abuts left one
                    prev.end = val
                elif val == cur.start - 1:  # abuts right one
                    cur.start = val
                else:
                    curInt = Interval(val, val)
                    self.intervals[i+1:] = self.intervals[i:]
                    self.intervals[i] =  curInt
                    self.N += 1
                return

    def getIntervals(self):
        """
        :rtype: List[Interval]
        """
        return self.intervals[1:-1]

# Your SummaryRanges object will be instantiated and called as such:
# obj = SummaryRanges()
# obj.addNum(val)
# param_2 = obj.getIntervals()
test = True
if test:
    obj = SummaryRanges()
    obj.addNum(1)
    print(obj.getIntervals())
    obj.addNum(3)
    print(obj.getIntervals())
    obj.addNum(7)
    print(obj.getIntervals())
    obj.addNum(2)
    print(obj.getIntervals())
    obj.addNum(6)
    print(obj.getIntervals())
