#
# @lc app=leetcode id=208 lang=python3
#
# [208] Implement Trie (Prefix Tree)
#
# https://leetcode.com/problems/implement-trie-prefix-tree/description/
#
# algorithms
# Medium (36.18%)
# Total Accepted:    157.1K
# Total Submissions: 434.3K
# Testcase Example:  '["Trie","insert","search","search","startsWith","insert","search"]\n[[],["apple"],["apple"],["app"],["app"],["app"],["app"]]'
#
# Implement a trie with insert, search, and startsWith methods.
#
# Example:
#
#
# Trie trie = new Trie();
#
# trie.insert("apple");
# trie.search("apple");   // returns true
# trie.search("app");     // returns false
# trie.startsWith("app"); // returns true
# trie.insert("app");
# trie.search("app");     // returns true
#
#
# Note:
#
#
# You may assume that all inputs are consist of lowercase letters a-z.
# All inputs are guaranteed to be non-empty strings.
#
#
#
class TrieNode:
    def __init__(self, c=None):
        self.char = c
        self.children = {}
        self.isLeaf = False

class Trie:

    """
    https://www.programcreek.com/2014/05/leetcode-implement-trie-prefix-tree-java/
    simple java implementation
    """

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        ch = self.root.children
        for e in word:
            if e in ch:
                t = ch[e]
            else:
                t = TrieNode(e)
                ch[e] = t
            ch = t.children
        t.isLeaf = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        t = self.searchNode(word)
        if t is None or t.isLeaf is False:
            return False
        return True

    def searchNode(self, word):
        ch = self.root.children
        for e in word:
            if e in ch:
                t = ch[e]
                ch = t.children
            else:
                return None
        return t

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        t = self.searchNode(prefix)
        if t is not None:
            return True
        else:
            return False


test = True
if test:
    obj = Trie()
    obj.insert("hello")
    print(obj.search("hell"))
    print(obj.startsWith("hel"))
