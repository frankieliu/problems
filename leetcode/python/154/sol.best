
My pretty simple code to solve it

https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/discuss/48808

* Lang:    cpp
* Author:  sheehan
* Votes:   305

    class Solution {
    public:
        int findMin(vector<int> &num) {
            int lo = 0;
            int hi = num.size() - 1;
            int mid = 0;
            
            while(lo < hi) {
                mid = lo + (hi - lo) / 2;
                
                if (num[mid] > num[hi]) {
                    lo = mid + 1;
                }
                else if (num[mid] < num[hi]) {
                    hi = mid;
                }
                else { // when num[mid] and num[hi] are same
                    hi--;
                }
            }
            return num[lo];
        }
    };

When num[mid] == num[hi], we couldn't sure the position of minimum in mid's left or right, so just let upper bound reduce one.
