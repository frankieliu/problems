
[Java/C++] Very simple greedy solution with explanation

https://leetcode.com/problems/dota2-senate/discuss/105858

* Lang:    cpp
* Author:  caihao0727mail
* Votes:   61

This is obliviously a greedy algorithm problem. Each senate ```R``` must ban its next **closest** senate ```D``` who is from another party, or else ```D``` will ban its next  senate from  ```R's``` party. 

The idea is to use two queues to save the index of each senate from ```R's``` and ```D's``` parties, respectively. During each round, we delete the banned senate's index; and plus the remainning senate's index with ```n```(the length of the input string ```senate```), then move it to the back of its respective queue.

Java version:
```
    public String predictPartyVictory(String senate) {
        Queue<Integer> q1 = new LinkedList<Integer>(), q2 = new LinkedList<Integer>();
        int n = senate.length();
        for(int i = 0; i<n; i++){
            if(senate.charAt(i) == 'R')q1.add(i);
            else q2.add(i);
        }
        while(!q1.isEmpty() && !q2.isEmpty()){
            int r_index = q1.poll(), d_index = q2.poll();
            if(r_index < d_index)q1.add(r_index + n);
            else q2.add(d_index + n);
        }
        return (q1.size() > q2.size())? "Radiant" : "Dire";
    }
```

C++ version:
```
string predictPartyVictory(string senate) {
        queue<int> q1, q2;
        int n = senate.length();
        for(int i = 0; i<n; i++)
            (senate[i] == 'R')?q1.push(i):q2.push(i);
        while(!q1.empty() && !q2.empty()){
            int r_index = q1.front(), d_index = q2.front();
            q1.pop(), q2.pop();
            (r_index < d_index)?q1.push(r_index + n):q2.push(d_index + n);
        }
        return (q1.size() > q2.size())? "Radiant" : "Dire";
    }
```
