
[Java/C++/Python] DFS Solution

https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/discuss/214216

* Lang:    cpp
* Author:  lee215
* Votes:   40

**Explanation:**
Global integer `i` indicates next index in voyage `v`.
If current `node == null`, it\'s fine, we return `true`
If current `node.val != v[i]`, doesn\'t match wanted value, return `false`
If left child exist but don\'t have wanted value, flip it with right child.


**Java:**
```
    List<Integer> res = new ArrayList<>();
    int i = 0;
    public List<Integer> flipMatchVoyage(TreeNode root, int[] v) {
        return dfs(root, v) ? res : Arrays.asList(-1);
    }

    public Boolean dfs(TreeNode node, int[] v) {
        if (node == null) return true;
        if (node.val != v[i++]) return false;
        if (node.left != null && node.left.val != v[i]) {
            res.add(node.val);
            return dfs(node.right, v) && dfs(node.left, v);
        }
        return dfs(node.left, v) && dfs(node.right, v);
    }
```

**C++:**
```
    vector<int> res;
    int i = 0;
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& v) {
        return dfs(root, v) ? res : vector<int>{-1};
    }

    bool dfs(TreeNode* node, vector<int>& v) {
        if (!node) return true;
        if (node->val != v[i++]) return false;
        if (node->left && node->left->val != v[i]) {
            res.push_back(node->val);
            return dfs(node->right, v) && dfs(node->left, v);
        }
        return dfs(node->left, v) && dfs(node->right, v);
    }
```

**Python:**
```
    def flipMatchVoyage(self, root, voyage):
        res = []
        self.i = 0
        def dfs(root):
            if not root: return True
            if root.val != voyage[self.i]: return False
            self.i += 1
            if root.left and root.left.val != voyage[self.i]:
                res.append(root.val)
                root.left,root.right = root.right, root.left
            return dfs(root.left) and dfs(root.right)
        return res if dfs(root) else [-1]
```

