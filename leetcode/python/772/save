#
# @lc app=leetcode id=772 lang=python3
#
# [772] Basic Calculator III
#
# https://leetcode.com/problems/basic-calculator-iii/description/
#
# algorithms
# Hard (43.76%)
# Total Accepted:    13.1K
# Total Submissions: 30K
# Testcase Example:  '"1 + 1"'
#
# Implement a basic calculator to evaluate a simple expression string.
#
# The expression string may contain open ( and closing parentheses ), the plus
# + or minus sign -, non-negative integers and empty spaces  .
#
# The expression string contains only non-negative integers, +, -, *, /
# operators , open ( and closing parentheses ) and empty spaces  . The integer
# division should truncate toward zero.
#
# You may assume that the given expression is always valid. All intermediate
# results will be in the range of [-2147483648, 2147483647].
#
# Some examples:
#
#
# "1 + 1" = 2
# " 6-4 / 2 " = 4
# "2*(5+5*2)/3+(6/2+8)" = 21
# "(2+6* 3+5- (3*14/7+2)*5)+3"=-12
#
#
#
#
# Note: Do not use the eval built-in library function.
#
#
from typing import *

class Solution:
    # fun4leetcode
    def calculate(self, s: str) -> int:
        number = '0123456789'
        st = []
        # partial result and operator
        # o2 * / -
        l1,o1,l2,o2 = 0,1,1,1
        i = 0
        while i < len(s):
            nc = s[i]
            # print(nc)
            if nc in number:
                num = 0
                while i < len(s) and s[i] in number:
                    num = num*10 + ord(s[i])-ord('0')
                    i += 1
                i -= 1
                l2 = l2 * num if o2 == 1 else l2 // num
                # print("num: {}, o2: {}, l2: {}".format(num, o2, l2))
            elif nc in '*/':
                o2 = 1 if nc == '*' else -1
            elif nc in '+-':
                if i==0 or s[i-1] == '(':
                    o1 = 1 if nc == '+' else -1
                else:
                    l1 += o1 * l2
                    # print("o1: {} l1: {}".format(o1, l1))
                    o1 = 1 if nc == '+' else -1
                    l2, o2 = 1, 1
            elif nc in '()':
                if nc == '(':
                    st.append((l1,o1,l2,o2))
                    l1,o1,l2,o2 = 0,1,1,1
                else:
                    num = l1 + o1 * l2
                    l1,o1,l2,o2 = st.pop()
                    l2 = l2 * num if o2 == 1 else l2 // num
            i += 1
        return l1 + o1 * l2



test = True
if test:
    s = Solution()
    case = [False]*5 + [True] + [False]*10
    if case[0]:
        example = "1 + 1"
        # = 2
        print(s.calculate(example))
    if case[1]:
        example = " 6-4 / 2 "
        # = 4
        print(s.calculate(example))
    if case[2]:
        example = "2*(5+5*2)/3+(6/2+8)"
        # = 21
        print(s.calculate(example))
    if case[3]:
        example = "111111"
        # =-12
        print(s.calculate(example))
    if case[4]:
        example = "(2+6* 3+5- (3*14/7+2)*5)+3"
        # =-12
        print(s.calculate(example))
    if case[5]:
        example = "-1+4*3/3/3"
        # = 0
        print(s.calculate(example))
