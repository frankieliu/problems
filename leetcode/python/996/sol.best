
[C++/Python] Backtracking

https://leetcode.com/problems/number-of-squareful-arrays/discuss/238562

* Lang:    cpp
* Author:  lee215
* Votes:   30

**Explanation**:
1. Count numbers ocuurrence.
2. For each number `i`, find all possible next number `j` that `i + j` is square.
3. Backtracking using dfs.

**Time Complexity**
It\'s `O(N^N)` if we have N different numbers and any pair sum is square.
We can easily make case for N = 3 like [51,70,30]. 

Seems that no hard cases for this problem and int this way it reduces to O(N^2).

**C++:**
```
    unordered_map<int, int> count;
    unordered_map<int, unordered_set<int>> cand;
    int res = 0;
    int numSquarefulPerms(vector<int>& A) {
        for (int &a : A) count[a]++;
        for (auto &i : count) {
            for (auto &j : count) {
                int x = i.first, y = j.first, s = sqrt(x + y);
                if (s * s == x + y)
                    cand[x].insert(y);
            }
        }
        for (auto e : count)
            dfs(e.first, A.size() - 1);
        return res;
    }

    void dfs(int x, int left) {
        count[x]--;
        if (!left) res++;
        for (int y : cand[x])
            if (count[y] > 0)
                dfs(y, left - 1);
        count[x]++;
    }
```

**Python:**
```
    def numSquarefulPerms(self, A):
        c = collections.Counter(A)
        cand = {i: {j for j in c if int((i + j)**0.5) ** 2 == i + j} for i in c}
        self.res = 0
        def dfs(x, left=len(A) - 1):
            c[x] -= 1
            if left == 0: self.res += 1
            for y in cand[x]:
                if c[y]: dfs(y, left - 1)
            c[x] += 1
        for x in c: dfs(x)
        return self.res
```

