#
# @lc app=leetcode id=220 lang=python3
#
# [220] Contains Duplicate III
#
# https://leetcode.com/problems/contains-duplicate-iii/description/
#
# algorithms
# Medium (19.29%)
# Total Accepted:    84K
# Total Submissions: 435.5K
# Testcase Example:  '[1,2,3,1]\n3\n0'
#
# Given an array of integers, find out whether there are two distinct indices i
# and j in the array such that the absolute difference between nums[i] and
# nums[j] is at most t and the absolute difference between i and j is at most
# k.
#
#
# Example 1:
#
#
# Input: nums = [1,2,3,1], k = 3, t = 0
# Output: true
#
#
#
# Example 2:
#
#
# Input: nums = [1,0,1,1], k = 1, t = 2
# Output: true
#
#
#
# Example 3:
#
#
# Input: nums = [1,5,9,1,5,9], k = 2, t = 3
# Output: false
#
#
#
#
#
#
import sys

class Solution:
    def containsNearbyAlmostDuplicate(self, nums, k, t):
        """
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """

        if len(nums) == 0:
            return False
        if k == 0:
            return False
        if t < 0 or k < 0:
            return False

        # make all positive numbers
        minint = -sys.maxsize - 1

        # hash to keep result
        h = {}
        for i in range(len(nums)):
            # print("Consider", nums[i], h)

            # normalize
            elp = nums[i] - minint

            # bucketize
            b = elp // (t+1)

            # there are three cases to consider
            if (b in h):         # in bucket
                return True

            # close to left neighbor
            b1 = b - 1
            if b1 in h and (nums[i] - nums[h[b1]]) <= t:
                return True

            # close to right neighbor
            b1 = b + 1
            if b1 in h and (nums[h[b1]] - nums[i]) <= t:
                return True

            # Add to the bucket
            h[b] = i

            # Remove previous
            if i-k >= 0:
                del h[(nums[i-k] - minint)//(t+1)]

        return False


test = True
if test:
    s = Solution()
    # a = [1, 5, 9, 1, 5, 9]
    # print(s.containsNearbyAlmostDuplicate(a, 2, 3))
    # a = [1, 2]
    # print(s.containsNearbyAlmostDuplicate(a, 0, 1))
    a = [1, 2, 3, 1]
    print(s.containsNearbyAlmostDuplicate(a, 3, 0))
