#
# @lc app=leetcode id=187 lang=python3
#
# [187] Repeated DNA Sequences
#
# https://leetcode.com/problems/repeated-dna-sequences/description/
#
# algorithms
# Medium (35.11%)
# Total Accepted:    115.7K
# Total Submissions: 329.6K
# Testcase Example:  '"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"'
#
# All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T,
# for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to
# identify repeated sequences within the DNA.
#
# Write a function to find all the 10-letter-long sequences (substrings) that
# occur more than once in a DNA molecule.
#
# Example:
#
#
# Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
#
# Output: ["AAAAACCCCC", "CCCCCAAAAA"]
#
#
#
class Solution:
    def findRepeatedDnaSequences(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        slen = 10
        if len(s) < slen:
            return []

        c = {'A': 0, 'C': 1, 'G': 2, 'T': 3}
        base = len(c)

        seen = set()
        rep = {}

        lpow = base**(slen-1)

        j = 0
        for i in range(0, slen):
            j = base*j + c[s[i]]
        seen.add(j)

        for i in range(slen, len(s)):
            # remove at left char
            j -= c[s[i-slen]]*lpow
            # add at right char
            j = base*j + c[s[i]]

            if (j in seen):
                rep[j] = i
            else:
                seen.add(j)

        return [s[x-slen+1:x+1] for k, x in rep.items()]


test = True
if test:
    s = Solution()
    print(s.findRepeatedDnaSequences("AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"))
