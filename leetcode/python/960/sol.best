
[C++/Java/Python] Maximum Increasing Subsequence

https://leetcode.com/problems/delete-columns-to-make-sorted-iii/discuss/205679

* Lang:    cpp
* Author:  lee215
* Votes:   44

**Intuition**

Take `n` cols as `n` elements, so we have an array of `n` elements.
=> The final array has every row in lexicographic order.
=> The elements in final state is in increasing order.
=> The final elements is a sub sequence of initial array.
=> Transform the problem to find the maximum increasing sub sequence.

<br>

**Explanation**
Now let\'s talking about how to find maximum increasing subsequence.
Here we apply a O(N^2) dp solution.


`dp[i]` means the longest subsequence ends with `i`-th element.
For all `j < i`, if `A[][j] < A[][i]`, then `dp[j] = max(dp[j], dp[i] + 1)`

<br>

**Time Complexity**:
O(N^2) to find increasing subsequence
O(M) for comparing elements.
So Overall O(MN^2).

<br>

**C++:**
```
    int minDeletionSize(vector<string>& A) {
        int m = A.size(), n = A[0].length(), res = n - 1, k;
        vector<int>dp(n,1);
        for (int j = 0; j < n; ++j) {
            for (int i = 0; i < j; ++i) {
                for (k = 0; k < m; ++k) {
                    if (A[k][i] > A[k][j]) break;
                }
                if (k == m && dp[i] + 1 > dp[j])
                    dp[j] = dp[i] + 1;
            }
            res = min(res, n - dp[j]);
        }
        return res;
    }
```

**Java:**
```
    public int minDeletionSize(String[] A) {
        int m = A.length, n = A[0].length(), res = n - 1, k;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        for (int j = 0; j < n; ++j) {
            for (int i = 0; i < j; ++i) {
                for (k = 0; k < m; ++k) {
                    if (A[k].charAt(i) > A[k].charAt(j)) break;
                }
                if (k == m && dp[i] + 1 > dp[j])
                    dp[j] = dp[i] + 1;
            }
            res = Math.min(res, n - dp[j]);
        }
        return res;
    }
```
**Python:**
```
    def minDeletionSize(self, A):
        m, n = len(A), len(A[0])
        dp = [1] * n
        for j in range(1, n):
            for i in range(j):
                if all(A[k][i] <= A[k][j] for k in xrange(m)):
                    dp[j] = max(dp[j], dp[i] + 1)
        return n - max(dp)
```

