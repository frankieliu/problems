#
# @lc app=leetcode id=81 lang=python3
#
# [81] Search in Rotated Sorted Array II
#
# https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/
#
# algorithms
# Medium (32.48%)
# Total Accepted:    153.8K
# Total Submissions: 473.5K
# Testcase Example:  '[2,5,6,0,0,1,2]\n0'
#
# Suppose an array sorted in ascending order is rotated at some pivot unknown
# to you beforehand.
#
# (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
#
# You are given a target value to search. If found in the array return true,
# otherwise return false.
#
# Example 1:
#
#
# Input: nums = [2,5,6,0,0,1,2], target = 0
# Output: true
#
#
# Example 2:
#
#
# Input: nums = [2,5,6,0,0,1,2], target = 3
# Output: false
#
# Follow up:
#
#
# This is a follow up problem toÂ Search in Rotated Sorted Array, where nums may
# contain duplicates.
# Would this affect the run-time complexity? How and why?
#
#
#


class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        ll, r = [0, len(nums) - 1]
        while ll <= r:
            mid = (ll + r) // 2
            el, em, er = nums[ll], nums[mid], nums[r]
            if em == target:
                return True

            if el == em:
                while ll < mid and nums[ll] == em:
                    ll += 1
                el = nums[ll]

            if er == em:
                while r > mid and nums[r] == em:
                    r -= 1
                er = nums[r]

            if el <= em:   # left ordered
                if el <= target < em:
                    r = mid - 1
                else:
                    ll = mid + 1
            else:          # right ordered
                if em < target <= er:
                    ll = mid + 1
                else:
                    r = mid - 1

        return False


test = True
if test:
    s = Solution()
    Example = [2, 5, 6, 0, 0, 1, 2]
    print(s.search(Example, 0))
