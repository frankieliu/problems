#
# @lc app=leetcode id=679 lang=python3
#
# [679] 24 Game
#
# https://leetcode.com/problems/24-game/description/
#
# algorithms
# Hard (41.10%)
# Total Accepted:    16.1K
# Total Submissions: 39.3K
# Testcase Example:  '[4,1,8,7]'
#
#
# You have 4 cards each containing a number from 1 to 9.  You need to judge
# whether they could operated through *, /, +, -, (, ) to get the value of
# 24.
#
#
# Example 1:
#
# Input: [4, 1, 8, 7]
# Output: True
# Explanation: (8-4) * (7-1) = 24
#
#
#
# Example 2:
#
# Input: [1, 2, 1, 2]
# Output: False
#
#
#
# Note:
#
# The division operator / represents real division, not integer division.  For
# example, 4 / (1 - 2/3) = 12.
# Every operation done is between two numbers.  In particular, we cannot use -
# as a unary operator.  For example, with [1, 1, 1, 1] as input, the expression
# -1 - 1 - 1 - 1 is not allowed.
# You cannot concatenate numbers together.  For example, if the input is [1, 2,
# 1, 2], we cannot write this as 12 + 12.
#
#
#
#
from collections import Counter


class Solution:
    def judgePoint24(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        # since every operation is between two numbers
        # then we can do backtracking on the possible
        # choice of the first number, etc.
        # X_1 is the first choice
        # X_2 is the second choice
        # X_3 is to choose an operation
        def bs(n):
            if len(n) == 1:
                return abs(n[0] - 24) < 0.001

            for x1 in range(len(n)):
                for x2 in range(x1+1, len(n)):
                    nn = [n[x] for x in range(len(n)) if x != x1 and x != x2]
                    y1, y2 = n[x1], n[x2]
                    if bs(nn + [y1+y2]):
                        return True
                    if bs(nn + [y1-y2]):
                        return True
                    if bs(nn + [y2-y1]):
                        return True
                    if bs(nn + [y1*y2]):
                        return True
                    if y2 != 0 and bs(nn + [y1/y2]):
                        return True
                    if y1 != 0 and bs(nn + [y2/y1]):
                        return True
            return False

        return bs(nums)

        # Choose two numbers and one operation

test = True
if test:
    sol = Solution()
    case = [False]*0 + [True] + [False]*2
    if case[0]:
        # Example 1:
        Input = [4, 1, 8, 7]
        # Output: True
        print(sol.judgePoint24(Input))
    if case[1]:
        # Example 2:
        Input = [1, 2, 1, 2]
        # Output: False
        print(sol.judgePoint24(Input))
