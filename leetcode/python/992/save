#
# @lc app=leetcode id=992 lang=python3
#
# [992] Subarrays with K Different Integers
#
# https://leetcode.com/problems/subarrays-with-k-different-integers/description/
#
# algorithms
# Hard (46.14%)
# Total Accepted:    3.5K
# Total Submissions: 7.7K
# Testcase Example:  '[1,2,1,2,3]\n2'
#
# Given an array A of positive integers, call a (contiguous, not necessarily
# distinct) subarray of A good if the number of different integers in that
# subarray is exactly K.
#
# (For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)
#
# Return the number of good subarrays of A.
#
#
#
# Example 1:
#
#
# Input: A = [1,2,1,2,3], K = 2
# Output: 7
# Explanation: Subarrays formed with exactly 2 different integers: [1,2],
# [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
#
#
# Example 2:
#
#
# Input: A = [1,2,1,3,4], K = 3
# Output: 3
# Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3],
# [2,1,3], [1,3,4].
#
#
#
#
# Note:
#
#
# 1 <= A.length <= 20000
# 1 <= A[i] <= A.length
# 1 <= K <= A.length
#
#
from typing import List
import collections

class Window():
    def __init__(self):
        self.c = collections.Counter()
        self.unique = 0

    def add(self, el):
        if self.c[el] == 0:
            self.unique += 1
        self.c[el] += 1

    def sub(self, el):
        if self.c[el] == 1:
            self.unique -= 1
        self.c[el] -= 1

class Solution(object):
    def subarraysWithKDistinct(self, a, k):
        # find the first subarray that matches the requirement
        wk = Window()   # k
        wkm1 = Window()  # k - 1
        res = 0
        l1 = l2 = 0
        for el in a:
            wk.add(el)
            wkm1.add(el)
            while wk.unique > k:
                wk.sub(a[l1])
                l1 += 1
            while wkm1.unique > k-1:
                wkm1.sub(a[l2])
                l2 += 1
            res += l2-l1
        return res


test = True
if test:
    sol = Solution()
    case = [False]*1 + [True] + [False]*2
    if case[0]:
        # Example 1:
        A = [1,2,1,2,3]
        K = 2
        # Output: 7
        print(sol.subarraysWithKDistinct(A, K))
    if case[1]:
        # Example 2:
        A = [1,2,1,3,4]
        K = 3
        # Output: 3
        print(sol.subarraysWithKDistinct(A, K))
