
O(logN)

https://leetcode.com/problems/knight-dialer/discuss/189252

* Lang:    cpp
* Author:  lee215
* Votes:   47

<img src="https://assets.leetcode.com/users/lee215/image_1541301837.png" style="width:200px;"/>

**Naive recursion:**
`O(N)` time and `O(1)` space, good enough.

```
    def knightDialer(self, N):
        x1 = x2 = x3 = x4 = x5 = x6 = x7 = x8 = x9 = x0 = 1
        for i in range(N - 1):
            x1, x2, x3, x4, x5, x6, x7, x8, x9, x0 = \\
                x6 + x8, x7 + x9, x4 + x8, \\
                x3 + x9 + x0, 0, x1 + x7 + x0, \\
                x2 + x6, x1 + x3, x2 + x4, \\
                x4 + x6
        return (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x0) % (10**9 + 7)
```


In fact, we recursively did pow operation.
This can be optimised to `O(log)` time.

Construct a 10 * 10 transformation matrix M.
`M[i][j] = 1` if i and j is connnected.

if N = 1, return 10.
if N > 1, return sum of `[1,1,1,1,1,1,1,1,1,1] * M ^ (N - 1)`

The power of matrix reveals the number of walks in an undirected graph.
Find more details on this link provide by @shankark:
https://math.stackexchange.com/questions/1890620/finding-path-lengths-by-the-power-of-adjacency-matrix-of-an-undirected-graph


```
    def knightDialer(self, N):
        mod = 10**9 + 7
        if N == 1: return 10
        M = np.matrix([[0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
                       [0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
                       [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                       [0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                       [1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                       [0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                       [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
                       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0]])
        res, N = 1, N - 1
        while N:
            if N % 2: res = res * M % mod
            M = M * M % mod
            N /= 2
        return int(np.sum(res)) % mod
