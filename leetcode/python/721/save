#
# @lc app=leetcode id=721 lang=python3
#
# [721] Accounts Merge
#
# https://leetcode.com/problems/accounts-merge/description/
#
# algorithms
# Medium (38.39%)
# Total Accepted:    26.2K
# Total Submissions: 68.1K
# Testcase Example:  '[["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]'
#
# Given a list accounts, each element accounts[i] is a list of strings, where
# the first element accounts[i][0] is a name, and the rest of the elements are
# emails representing emails of the account.
#
# Now, we would like to merge these accounts.  Two accounts definitely belong
# to the same person if there is some email that is common to both accounts.
# Note that even if two accounts have the same name, they may belong to
# different people as people could have the same name.  A person can have any
# number of accounts initially, but all of their accounts definitely have the
# same name.
#
# After merging the accounts, return the accounts in the following format: the
# first element of each account is the name, and the rest of the elements are
# emails in sorted order.  The accounts themselves can be returned in any
# order.
#
# Example 1:
#
# Input:
# accounts = [["John", "johnsmith@mail.com", "john00@mail.com"], ["John",
# "johnnybravo@mail.com"], ["John", "johnsmith@mail.com",
# "john_newyork@mail.com"], ["Mary", "mary@mail.com"]]
# Output: [["John", 'john00@mail.com', 'john_newyork@mail.com',
# 'johnsmith@mail.com'],  ["John", "johnnybravo@mail.com"], ["Mary",
# "mary@mail.com"]]
# Explanation:
# The first and third John's are the same person as they have the common email
# "johnsmith@mail.com".
# The second John and Mary are different people as none of their email
# addresses are used by other accounts.
# We could return these lists in any order, for example the answer [['Mary',
# 'mary@mail.com'], ['John', 'johnnybravo@mail.com'],
# ['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']]
# would still be accepted.
#
#
#
# Note:
# The length of accounts will be in the range [1, 1000].
# The length of accounts[i] will be in the range [1, 10].
# The length of accounts[i][j] will be in the range [1, 30].
#
#
from typing import List


class Solution:
    def accountsMerge(self, accounts :List[List[str]]):
        # put all the accounts with the same name
        # then merge the accounts that share email
        b = []
        for a in accounts:
            b.append((a[0],set(a[1:])))

        ss = [[i] for i in range(0,len(b))]
        p = list(range(0,len(b)))
        s = [1]*len(b)
        def find(i):
            if i != p[i]:
                p[i] = find(p[i])
            return p[i]

        def union(i,j):
            a, b = find(i), find(j)
            if a == b:
                return
            if s[a] > s[b]:
                a,b = b,a
            p[a] = p[b]
            s[b] += s[a]
            ss[b].extend(ss[a])

        for i in range(len(b)):
            for j in range(i+1, len(b)):
                if find(i) != find(j):
                    if b[i][0] == b[j][0] and b[i][1] & b[j][1]:
                        union(i,j)

        for i in range(len(b)):
            find(i)
        # print(ss)
        res = []
        for ap in set(p):  # for all parents
            tmp = set()
            for k in ss[ap]:
                tmp = tmp | b[k][1]
            res.append([b[k][0]] + sorted(tmp))
        return res


test = True
if test:
    sol = Solution()
    case = [False]*2 + [True] + [False]*1
    if case[0]:
        # Example 1:
        accounts = [["John", "johnsmith@mail.com", "john00@mail.com"], ["John","johnnybravo@mail.com"], ["John", "johnsmith@mail.com","john_newyork@mail.com"], ["Mary", "mary@mail.com"]]
        # Output: [["John", 'john00@mail.com', 'john_newyork@mail.com',
        print(sol.accountsMerge(accounts))
    if case[1]:
        accounts = [["David","David0@m.co","David4@m.co","David3@m.co"],["David","David5@m.co","David5@m.co","David0@m.co"],["David","David1@m.co","David4@m.co","David0@m.co"],["David","David0@m.co","David1@m.co","David3@m.co"],["David","David4@m.co","David1@m.co","David3@m.co"]]
        print(sol.accountsMerge(accounts))
    if case[2]:
        accounts = [["David","David0@m.co","David1@m.co"],["David","David3@m.co","David4@m.co"],["David","David4@m.co","David5@m.co"],["David","David2@m.co","David3@m.co"],["David","David1@m.co","David2@m.co"]]
        print(sol.accountsMerge(accounts))
