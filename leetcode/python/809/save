#
# @lc app=leetcode id=809 lang=python3
#
# [809] Expressive Words
#
# https://leetcode.com/problems/expressive-words/description/
#
# algorithms
# Medium (41.55%)
# Total Accepted:    9.4K
# Total Submissions: 22.6K
# Testcase Example:  '"heeellooo"\n["hello", "hi", "helo"]'
#
# Sometimes people repeat letters to represent extra feeling, such as "hello"
# -> "heeellooo", "hi" -> "hiiii".  Here, we have groups, of adjacent letters
# that are all the same character, and adjacent characters to the group are
# different.  A group is extended if that group is length 3 or more, so "e" and
# "o" would be extended in the first example, and "i" would be extended in the
# second example.  As another example, the groups of "abbcccaaaa" would be "a",
# "bb", "ccc", and "aaaa"; and "ccc" and "aaaa" are the extended groups of that
# string.
#
# For some given string S, a query word is stretchy if it can be made to be
# equal to S by extending some groups.  Formally, we are allowed to repeatedly
# choose a group (as defined above) of characters c, and add some number of the
# same character c to it so that the length of the group is 3 or more.  Note
# that we cannot extend a group of size one like "h" to a group of size two
# like "hh" - all extensions must leave the group extended - ie., at least 3
# characters long.
#
# Given a list of query words, return the number of words that are stretchy.
#
#
# Example:
# Input:
# S = "heeellooo"
# words = ["hello", "hi", "helo"]
# Output: 1
# Explanation:
# We can extend "e" and "o" in the word "hello" to get "heeellooo".
# We can't extend "helo" to get "heeellooo" because the group "ll" is not
# extended.
#
#
# Notes:
#
#
# d <= len(S) <= 100.
# 0 <= len(words) <= 100.
# 0 <= len(words[i]) <= 100.
# S and all words in words consist only of lowercase letters
#
#
#
#
#
class Solution:
    def expressiveWords(self, S, words):
        """
        one idea: keep the count of letters, if it is three or more then
        the corresponding word could have any number of characters of
        that group, however if it is less than three, then it must
        match the number of characters precisely
        """

        def count(s):
            "returns a list of tuples"
            prev = ""
            res = []
            count = 1
            for i,x in enumerate(s):
                if x == prev:
                    count += 1
                else:
                    if i != 0:
                        res.append((x, count))
                    count = 1
                prev = x
            res.append((x,count))
            return res
        def comp(x,y):
            if len(x) != len(y):
                return False
            for i in range(len(x)):
                if x[i][0] != y[i][0]:
                    return False
                if x[i][1] < 3 and x[i][1] != y[i][1]:
                    return False
                if x[i][1] >= 3 and y[i][1] > x[i][1]:
                    return False
            return True
        scount = count(S)
        res = 0
        for w in words:
            wcount = count(w)
            if comp(scount,wcount):
                res += 1
        return res

test = True
if test:
    sol = Solution()
    case = [False]*1 + [True] + [False]*1
    if case[0]:
        # Example:
        S = "heeellooo"
        words = ["hello", "hi", "helo"]
        # Output: 1
        print(sol.expressiveWords(S, words))
    if case[1]:
        S = "aaa"
        words = ["aaaa"]
        print(sol.expressiveWords(S, words))

