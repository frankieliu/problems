
【Top】Java Solution with detailed explaination, check this one ! 

https://leetcode.com/problems/rectangle-area-ii/discuss/139835

* Lang:    cpp
* Author:  SoulOfCinder2
* Votes:   47

\u82B1\u4E86\u4E00\u70B9\u65F6\u95F4\u624D\u7406\u89E3\u8FD9\u4E2A\u9053\u9898\u7684\u89E3\u6CD5\uFF0C\u5199\u82F1\u6587\u592A\u7D2F\uFF0C\u5C31\u7D22\u6027\u7ED9\u4E2A\u4E2D\u6587\u89E3\u91CA\u597D\u4E86\u3002\u9996\u5148\u6211\u4EEC\u6765\u56DE\u60F3\u4EE5\u4E0Bskyline\u90A3\u9053\u9898\uFF0C\u7528\u5230\u7684\u662F\u626B\u63CF\u7EBF\u7684\u65B9\u6CD5\u3002\u6211\u4EEC\u5BF9\u4E8E\u8FDB\u5165\u7684building \u8FB9\u754C\u7528\u6B63\u6570\uFF0C\u5F53building\u51FA\u53BB\u7684\u65F6\u5019\u7528\u8D1F\u6570\u3002\u8FD9\u91CC\u7684\u6B63\u8D1F\u6570\uFF0C\u4E5F\u5C31\u662FPoint \u91CC\u7684val \u8FD9\u4E2A\u503C\uFF0C\u5176\u5B9E\u5C31\u662F\u66F4\u597D\u7684\u8868\u793A\u4E00\u4E2Abuilding\u8FDB\u5165\u548C\u51FA\u53BB\u3002
\u540C\u7406\uFF0C\u8FD9\u91CC\u4E5F\u662F\u5982\u6B64\uFF0C\u6211\u4EEC\u75281 \u548C -1 \u6765\u8868\u793A\u77E9\u5F62\u9700\u8981\u5904\u7406\u9762\u79EF\u4E0E\u5426\u3002
\u5BF9\u4E8E\u540C\u4E00\u4E2Ax\uFF0C\u6211\u4EEC\u60F3\u4E0By\u8F74\u600E\u4E48\u5904\u7406\u7684\u3002\u4E3E\u4F8B\u5B50\u6700\u597D\uFF0C\u5BF9\u4E8E\u4F8B\u5B50 rec1 [0, 0, 2, 2] , rec2 [0, 3, 2, 4]
\u6309\u8FD9\u4E2A\u65B9\u6CD5
            data.add(new Point(r[0], r[1], 1));
            data.add(new Point(r[0], r[3], -1));
            data.add(new Point(r[2], r[1], -1));
            data.add(new Point(r[2], r[3], 1));
\u90A3\u4E48\u6211\u4EEC\u4F1A\u6709point [0, 0, 1], [0, 2, -1], [0, 3, 1], [0, 4, -1] ...
\u6211\u4EEC\u73B0\u5728\u5C31\u5173\u6CE8x = 0 \u7684\u60C5\u51B5\uFF0C\u8FD9\u91CC\u4E3A\u4EC0\u4E48\u8981\u7528 1 \u548C -1\uFF0C \u5C31\u662F\u7528\u6765\u6807\u8BC6 \u77E9\u5F62\u5F00\u59CB\u8FB9\u754C\u548C\u77E9\u5F62\u7ED3\u675F\u8FB9\u754C\u7684
\u53BB\u770B\u4E0BcalcY\u51FD\u6570\uFF0C\u7528\u6765\u8BA1\u7B97preY\uFF0C\u8FD9\u91CC\u7684preY\u5BF9\u4E8Ex = 0 \u5C31\u662F3\u30023\u600E\u4E48\u6765\u7684 \uFF1F \u6362\u4E2A\u95EE\u6CD5\u4F60\u5C31\u61C2\u4E86\uFF0C\u95EE\uFF1A\u5BF9\u4E8Ex = 0\uFF0C\u6C42\u8FD9\u4E0A\u9762\u8986\u76D6\u7684y\u7684\u533A\u95F4\u548C\u662F\u591A\u5C11 \uFF1F \u6CE8\u610F\u8FD9\u51E0\u4E2A\u70B9 point [0, **0**, 1], [0, **2**, -1], [0, **3**, 1], [0, **4**, -1]\u3002 \u770B\u6BCF\u4E2A\u70B9\u4E2D\u95F4\u7684column \u4E5F\u5C31\u662Fy\u7684\u503C\u3002y \u4ECE0 \u5F00\u59CB\u88AB\u8986\u76D6\uFF0C\u5230 2 \u7684\u65F6\u5019\u56E0\u4E3Aval \u662F -1\uFF0C\u6CE8\u610FcalY\u51FD\u6570\u91CC\u7684count \u7B97\u4E0A\u8FD9\u4E2A\u70B9\u4E4B\u524D\u662F > 0 \u7684\uFF0C\u6240\u4EE5 0 - 2 \u88AB\u8986\u76D6\u4E86\uFF0C\u63A5\u4E0B\u6765\u662F 3 - 4 \u88AB\u8986\u76D6\u4E86\u3002\u603B\u5171\u88AB\u8986\u76D6\u7684\u533A\u57DF\u662F\u591A\u5C11\uFF1F
\uFF082 - 0\uFF09 + \uFF084 - 3\uFF09 = 3. \u6240\u4EE5preY = 3\u3002\u6211\u4EEC\u6B64\u65F6x = 0\u8FD9\u4E2A\u5730\u65B9\u90FD\u5904\u7406\u5B8C\u4E86\uFF0C\u90A3\u4E48\u9047\u5230\u7B2C\u4E00\u4E2Ax = 1\u7684\u70B9\u7684\u65F6\u5019\uFF0C\u6211\u4EEC\u9700\u8981\u7528\u4E0B\u9762\u8FD9\u4E2A\u516C\u5F0F\u8BA1\u7B97\u5F53\u524D\u9700\u8981\u52A0\u5165\u6700\u540E\u7ED3\u679C\u7684\u9762\u79EF\uFF0C\u4E5F\u5C31\u662F preY * \uFF08cur.x - pre.x\uFF09\uFF0C\u8FD9\u91CCpreY = 3, cur.x = 2, pre.x = 0. \u90A3\u4E48\u6211\u4EEC x = 0\u7684\u5730\u65B9\u5C31\u5904\u7406\u5B8C\u4E86\uFF0C\u540C\u7406\u5BF9\u4E8E \u5176\u4ED6\u5E73\u884C\u4E8E y \u8F74\u7684 \u201Cx = \uFF1F\u201D \u7684\u7EBF\u3002\u4F46\u662F\u5BF9\u4E8E\u6700\u9760\u53F3\u7684\u77E9\u5F62\u7684\u53F3\u8FB9\u754C\uFF0C\u4F60\u4E0D\u8981\u5FD8\u8BB0\u5904\u7406\uFF0C\u4E5F\u5C31\u662F\u4E3A\u4EC0\u4E48\u6211\u4EEC\u6709** if (i == data.size() - 1 || data.get(i + 1).x > p.x)** \u8FD9\u4E2A\u5224\u5B9A\u6761\u4EF6\u3002\u5982\u679C\u6709\u4EBA\u95EE\u4E3A\u4EC0\u4E48\u8FD9\u91CC\u5B9A\u4E49treemap\u3002\u56E0\u4E3Atreemap\u91CC\u9762\u7684key\u662F\u6392\u5E8F\u7684\uFF0C\u90A3\u4E48\u4E3A\u4EC0\u4E48\u4E0D\u6BCF\u4E2A\u5E73\u884C\u4E8Ex\u8F74\u7684\u5730\u65B9\u90FD\u5EFA\u4E00\u4E2Atreemap\u5462 \uFF1F \u56E0\u4E3A\u4E00\u4E2A\u77E9\u5F62\u5982\u679C\u626B\u63CF\u5230\u4E86\u5B83\u7684\u53F3\u8FB9\u754C\uFF0C\u81EA\u7136\u800C\u7136\u6211\u4EEC\u5C31\u4F1A\u5C06\u5B83\u7684\u70B9\u4ECE\u6211\u4EECtreemap\u4E2D\u62B9\u53BB\u3002
\u63A5\u4E0B\u6765\u5C31\u662F\u4E3A\u4EC0\u4E48\u8981\u8FD9\u4E48\u601D\u8003\u4E86\u3002\u62FF\u5230\u9898\u76EE\u7684\u65F6\u5019\uFF0C\u5982\u679C\u4F60\u89C9\u5F97\u8981\u4ECEoverlap\u77E9\u5F62\u89D2\u5EA6\u601D\u8003\u7684\u8BDD\uFF0C\u4F60\u4F1A\u53D1\u73B0\u8FD9\u79CD\u60C5\u51B5corner case \u592A\u591A\u4E86\uFF0C\u6765\u56DE\u5904\u7406\u91CD\u5408\u533A\u57DF\u7684\u77E9\u5F62\u8868\u793A\u4F1A\u5BB9\u6613\u51FAbug\u3002\u90A3\u4E48\u5BF9\u4E8E\u77E9\u5F62\u7684\u95EE\u9898\uFF0C\u6709\u4EC0\u4E48\u5176\u4ED6\u5904\u7406\u65B9\u6CD5\u5417\uFF1F\u9898\u76EE\u7ED9\u7684\u77E9\u5F62\u65E0\u975E\u662F\u4E24\u4E2A\u70B9\uFF08\u5DE6\u4E0B\u548C\u53F3\u4E0A\uFF09\u8868\u793A\uFF0C\u90A3\u4E48\u5982\u679C\u6309\u67D0\u4E2A\u8F74\u6392\u5E8F\u7684\u8BDD\uFF0C\u4F60\u7528\u4E00\u6761\u626B\u63CF\u7EBF\uFF0C\u81EA\u884C\u8111\u8865\uFF0C\u5C31\u4F1A\u53D1\u73B0\u8FD9\u91CC\u7684\u9762\u79EF\u53EF\u4EE5\u964D\u6210\u4E00\u7EF4\u6765\u505A\u3002\u4E00\u7EF4\u626B\u63CF\u7EBF\u95EE\u9898\uFF0C\u60F3\u60F3\u4E4B\u524D\u505A\u8FC7\u4EC0\u4E48\u7C7B\u4F3C\u7684\uFF0C\u6BD4\u5982meeting rooms\uFF0C\u4F46meeting rooms \u91CD\u5408\u7684\u5730\u65B9\u4E0D\u8981\u53BB\u91CD\uFF0C\u6BD4\u5982\u4E00\u4E2Ameeting \u5728 [1, 2], \u53E6\u4E00\u4E2A\u4E5F\u5728 [1, 2]\uFF0C\u8FD9\u91CC\u7B97\u4E24\u4E2Aroom\uFF0C\u6211\u4EEC\u8FD9\u91CC\u56E0\u4E3A\u8981\u6D88\u53BB\u91CD\u5408\u7684\u5730\u65B9\uFF0C\u6240\u4EE5\u53EF\u4EE5\u7B80\u5316\u4E3A\u8FD9\u4E2A\u95EE\u9898\u3002\u67D0\u5929\u6709n\u4E2Ameetings\uFF0C\u90FD\u4F1A\u5728\u697CL\u91CC\u7684meeting room/s\u91CC\u4E3E\u884C\uFF0C\u95EE\u4F60\u697CL\u603B\u5171\u6709\u591A\u5C11\u65F6\u95F4\u88AB\u5360\u7528\uFF1F
Special thanks to wangzi6147 \u7684\u89E3\u6CD5 \uFF01
```
class Solution {
    class Point { // define a class to called Point to better solve such problem
        int x, y, val;
        Point(int x, int y, int val) {
            this.x = x;
            this.y = y;
            this.val = val;
        }
    }
    public int rectangleArea(int[][] rectangles) {
        int M = 1000000007;
        List<Point> data = new ArrayList<>();
        for (int[] r : rectangles) {
            data.add(new Point(r[0], r[1], 1));
            data.add(new Point(r[0], r[3], -1));
            data.add(new Point(r[2], r[1], -1));
            data.add(new Point(r[2], r[3], 1));
        }
        Collections.sort(data, (a, b) -> {
            if (a.x == b.x) {
                return b.y - a.y;
            }
            return a.x - b.x;
        });
        TreeMap<Integer, Integer> map = new TreeMap<>();
        int preX = -1;
        int preY = -1;
        int result = 0;
        for (int i = 0; i < data.size(); i++) {
            Point p = data.get(i);
            map.put(p.y, map.getOrDefault(p.y, 0) + p.val);
            if (i == data.size() - 1 || data.get(i + 1).x > p.x) {
                if (preX > -1) {
                    result += ((long)preY * (p.x - preX)) % M;
                    result %= M;
                }
                preY = calcY(map);
                preX = p.x;
            }
        }
        return result;
    }
    private int calcY(TreeMap<Integer, Integer> map) {
        int result = 0, pre = -1, count = 0;
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            if (pre >= 0 && count > 0) {
                result += e.getKey() - pre;
            }
            count += e.getValue();
            pre = e.getKey();
        }
        return result;
    }
}
```
