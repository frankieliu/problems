
[C++/Java/Python] Easy Solution with Explanation

https://leetcode.com/problems/most-common-word/discuss/123854

* Lang:    cpp
* Author:  lee215
* Votes:   73

The description doesn\'t clearify the case like "word,word,word".
And it doesn\'t have this kind of corner cases at first.
The test cases and OJ may not be perfect on this problem.

Anyway I didn\'t bother thinking this issue.
In my opinion, the problem demands to extract words with only letters.
All I did is just extract words with only letters.

4 steps:
1. remove all punctuations
2. change to lowercase
3. words count for each word not in banned set
4. return the most common word

**C++:**
```
    string mostCommonWord(string p, vector<string>& banned) {
        unordered_set<string> ban(banned.begin(), banned.end());
        unordered_map<string, int> count;
        for (auto & c: p) c = isalpha(c) ? tolower(c) : \' \';
        istringstream iss(p);
        string w;
        pair<string, int> res ("", 0);
        while (iss >> w)
            if (ban.find(w) == ban.end() && ++count[w] > res.second)
                res = make_pair(w, count[w]);
        return res.first;
    }
```
**Java:**
```
    public String mostCommonWord(String p, String[] banned) {
        Set<String> ban = new HashSet<>(Arrays.asList(banned));
        Map<String, Integer> count = new HashMap<>();
        String[] words = p.replaceAll("\\\\W+" , " ").toLowerCase().split("\\\\s+");
        for (String w : words) if (!ban.contains(w)) count.put(w, count.getOrDefault(w, 0) + 1);
        return Collections.max(count.entrySet(), Map.Entry.comparingByValue()).getKey();
    }
```

**Python:**
Thanks to @sirxudi I change one line from
`words = re.sub(r\'[^a-zA-Z]\', \' \', p).lower().split()`
to 
`words = re.findall(r\'\\w+\', p.lower())
`
```
    def mostCommonWord(self, p, banned):
        ban = set(banned)
        words = re.findall(r\'\\w+\', p.lower())
        return collections.Counter(w for w in words if w not in ban).most_common(1)[0][0]
```
