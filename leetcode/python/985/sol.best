
[Java] 11 liner - odd / even analysis, time O(m + n)

https://leetcode.com/problems/sum-of-even-numbers-after-queries/discuss/231099

* Lang:    cpp
* Author:  rock
* Votes:   18

**Track sum of all even #s.**
There are 4 cases for odd / even property of A[k] and queries[i][0], where k = queries[i][1]:
1). **even** and odd, lose an even item in A; `sum` need to **deduct A[k]**;
2). **even** and even, get a **bigger even item in A**; `sum` need to add queries[i][0](same as **deduct A[k]** first then **add both**);
3). odd and odd, get a **bigger even item in A**; `sum` need to **add both**;
4). odd and even, no influence on even items in A;

Therefore, we can simplify the above as following procedure:

1. find `sum` of all even #s;
2. for each queries, check the item in A and after-added-up value, if
    a) the item in A is even, deduct it from `sum`; according to 1) & 2).
	b) after-added-up we have an even value, then add the new value to `sum`; according to 2) & 3).
	```
    public int[] sumEvenAfterQueries(int[] A, int[][] queries) {
        int sum = 0;
        for (int a : A) { if (a % 2 == 0) sum += a ; } // sum of even #s.
        int[] ans = new int[queries.length];
        for (int i = 0; i < ans.length; ++i) {
            int idx = queries[i][1];
            if (A[idx] % 2 == 0) { sum -= A[idx]; } // from 1) and 2)
            A[idx] += queries[i][0];
            if (A[idx] % 2 == 0) { sum += A[idx]; } // from 2) and 3)
            ans[i] = sum;
        }
        return ans;
    }
	```


**Analysis:**

**Time: O(m + n), space: O(n)**, where m = A.length, n = queries.length.
