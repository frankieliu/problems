#
# @lc app=leetcode id=777 lang=python3
#
# [777] Swap Adjacent in LR String
#
# https://leetcode.com/problems/swap-adjacent-in-lr-string/description/
#
# algorithms
# Medium (32.56%)
# Total Accepted:    11K
# Total Submissions: 33.8K
# Testcase Example:  '"X"\n"L"'
#
# In a string composed of 'L', 'R', and 'X' characters, like "RXXLRXRXL", a
# move consists of either replacing one occurrence of "XL" with "LX", or
# replacing one occurrence of "RX" with "XR". Given the starting string start
# and the ending string end, return True if and only if there exists a sequence
# of moves to transform one string to the other.
#
# Example:
#
#
# Input: start = "RXXLRXRXL", end = "XRLXXRRLX"
# Output: True
# Explanation:
# We can transform start to end following these steps:
# RXXLRXRXL ->
# XRXLRXRXL ->
# XRLXRXRXL ->
# XRLXXRRXL ->
# XRLXXRRLX
#
#
# Note:
#
#
# 1 <= len(start) = len(end) <= 10000.
# Both start and end will only consist of characters in {'L', 'R', 'X'}.
#
#
#
class Solution:
    def canTransform(self, start : str, end : str) -> bool:
        """
        x,x if you both see a x, then move

        rxx
        xxr
        r,x this is allowed -> but must eventually end result in a r,x
        x,r this is allowed only if there is a preceeding r,x

        xxl
        lxx
        x,l this is allowed -> but must eventually must see a l,x
        l,x this is allowed only if there is a preceeding x,l
        """

        if len(start)!=len(end):
            return False

        prec = None
        count = 0
        for i,c in enumerate(zip(start,end)):
            if c == ('X','X') or c == ('L','L') or c == ('R','R'):
                continue
            elif c == ('L','X'):
                if prec != ('X','L'):
                    return False
                count -= 1
                if count == 0:
                    prec = None
            elif c == ('X','L'):
                prec = c
                count += 1
            elif c == ('X','R'):
                if prec != ('R','X'):
                    return False
                count -= 1
                if count == 0:
                    prec = None
            elif c == ('R','X'):
                prec = c
                count += 1
            else:
                print("here 5", c)
                return False
        return prec == None


test = True
if test:
    sol = Solution()
    case = [False]*0 + [True] + [False]*1
    if case[0]:
        # Example:
        start = "RXXLRXRXL"
        end = "XRLXXRRLX"
        # Output: True
        print(sol.canTransform(start, end))

