
[C++/Java/Python] Concise DFS 

https://leetcode.com/problems/loud-and-rich/discuss/137918

* Lang:    cpp
* Author:  lee215
* Votes:   26

**Explanation**:
The description is not easy to understand.
In fact it\'s a basic dfs traversal problem.
For every people, call a sub function `dfs` to compare the `quiet` with others, who is richer than him.
Also we will note this answer to avoid repeated calculation.


**Time Complexity**:
O(richer.length),
Sub function `dfs` traverse every people only once, and every `richer` is traversed only one once.

**C++:**
```
    unordered_map<int, vector<int>> richer2;
    vector<int> res;
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        for (auto v : richer) richer2[v[1]].push_back(v[0]);
        res = vector<int> (quiet.size(), -1);
        for (int i = 0; i < quiet.size(); i++) dfs(i, quiet);
        return res;
    }

    int dfs(int i, vector<int>& quiet) {
        if (res[i] >= 0) return res[i];
        res[i] = i;
        for (int j : richer2[i]) if (quiet[res[i]] > quiet[dfs(j, quiet)]) res[i] = res[j];
        return res[i];
    }
```

**Java:**
```
    HashMap<Integer, List<Integer>> richer2 = new HashMap<>();
    int res[];
    public int[] loudAndRich(int[][] richer, int[] quiet) {
        int n = quiet.length;
        for (int i = 0; i < n; ++i) richer2.put(i, new ArrayList<Integer>());
        for (int[] v : richer) richer2.get(v[1]).add(v[0]);
        res = new int[n]; Arrays.fill(res, -1);
        for (int i = 0; i < n; i++) dfs(i, quiet);
        return res;
    }

    int dfs(int i, int[] quiet) {
        if (res[i] >= 0) return res[i];
        res[i] = i;
        for (int j : richer2.get(i)) if (quiet[res[i]] > quiet[dfs(j, quiet)]) res[i] = res[j];
        return res[i];
    }
```

**Python:**
```
class Solution(object):

    def loudAndRich(self, richer, quiet):
        m = collections.defaultdict(list)
        for i, j in richer: m[j].append(i)
        res = [-1] * len(quiet)

        def dfs(i):
            if res[i] >= 0: return res[i]
            res[i] = i
            for j in m[i]:
                if quiet[res[i]] > quiet[dfs(j)]: res[i] = res[j]
            return res[i]

        for i in range(len(quiet)): dfs(i)
        return res
```

