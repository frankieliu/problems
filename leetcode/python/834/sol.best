
[C++/Java/Python] Pre-order and Post-order DFS, O(N)

https://leetcode.com/problems/sum-of-distances-in-tree/discuss/130583

* Lang:    cpp
* Author:  lee215
* Votes:   105

Well, another long solution.
what I am always trying is to:
1. let you understand my solution (with my poor explanation)
2. prevent from reading my codes

**Intuition**:
What if given a tree, with a certain root `0`?
In `O(N)` we can find sum of distances in tree from root and all other nodes.
Now for all `N` nodes?
Of course, we can do it `N` times and solve it in `O(N^2)`.
C++ and Java may get accepted luckily, but it\'s not what we want.

When we move our root from one node to its connected node, 
one part of nodes get closer, one the other part get further.

If we know exactly how many nodes in both parts, we can solve this problem.

With one single traversal in tree, we should get enough information for it and 
don\'t need to do it again and again.

**Explanation**:
0. Let\'s solve it with node `0` as root.
1. Initial an array of hashset `tree`, `tree[i]` contains all connected nodes to `i`.
   Initial an array `count`, `count[i]` counts all nodes in the subtree `i`.
   Initial an array of `res`, `res[i]` counts sum of distance in subtree `i`.

2. Post order dfs traversal, update `count` and `res`:
`count[root] = sum(count[i]) + 1`
`res[root] = sum(res[i]) + sum(count[i])`

3. Pre order dfs traversal, update `res`:
When we move our root from parent to its child `i`, `count[i]` points get 1 closer to root, `n - count[i]` nodes get 1 futhur to root.
`res[i] = res[root] - count[i] + N - count[i]`

4. return res, done.

**Time Complexity**:
dfs: `O(N)`
dfs2: `O(N)`



**Java:**
```
    int[] res, count;
    ArrayList<HashSet<Integer>> tree;
    public int[] sumOfDistancesInTree(int N, int[][] edges) {
        tree = new ArrayList<HashSet<Integer>>();
        res = new int[N];
        count = new int[N];
        for (int i = 0; i < N ; ++i)
            tree.add(new HashSet<Integer>());
        for (int[] e : edges) {
            tree.get(e[0]).add(e[1]);
            tree.get(e[1]).add(e[0]);
        }
        dfs(0, -1);
        dfs2(0, -1);
        return res;
    }

    public void dfs(int root, int pre) {
        for (int i : tree.get(root)) {
            if (i == pre) continue;
            dfs(i, root);
            count[root] += count[i];
            res[root] += res[i] + count[i];
        }
        count[root]++;
    }


    public void dfs2(int root, int pre) {
        for (int i : tree.get(root)) {
            if (i == pre) continue;
            res[i] = res[root] - count[i] + count.length - count[i];
            dfs2(i, root);
        }
    }
```

**C++:**
```
    vector<unordered_set<int>> tree;
    vector<int> res, count;

    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {
        tree.resize(N);
        res.assign(N, 0);
        count.assign(N, 1);
        for (auto e : edges) {
            tree[e[0]].insert(e[1]);
            tree[e[1]].insert(e[0]);
        }
        dfs(0, -1);
        dfs2(0, -1);
        return res;

    }

    void dfs(int root, int pre) {
        for (auto i : tree[root]) {
            if (i == pre) continue;
            dfs(i, root);
            count[root] += count[i];
            res[root] += res[i] + count[i];
        }
    }

    void dfs2(int root, int pre) {
        for (auto i : tree[root]) {
            if (i == pre) continue;
            res[i] = res[root] - count[i] + count.size() - count[i];
            dfs2(i, root);
        }
    }
```


**Python:**
```
    def sumOfDistancesInTree(self, N, edges):
        tree = collections.defaultdict(set)
        res = [0] * N
        count = [1] * N
        for i, j in edges:
            tree[i].add(j)
            tree[j].add(i)

        def dfs(root, pre):
            for i in tree[root]:
                if i != pre:
                    dfs(i, root)
                    count[root] += count[i]
                    res[root] += res[i] + count[i]

        def dfs2(root, pre):
            for i in tree[root]:
                if i != pre:
                    res[i] = res[root] - count[i] + N - count[i]
                    dfs2(i, root)
        dfs(0, -1)
        dfs2(0, -1)
        return res
```
