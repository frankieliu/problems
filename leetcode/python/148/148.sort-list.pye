#
# @lc app=leetcode id=148 lang=python3
#
# [148] Sort List
#
# https://leetcode.com/problems/sort-list/description/
#
# algorithms
# Medium (33.48%)
# Total Accepted:    166K
# Total Submissions: 495.7K
# Testcase Example:  '[4,2,1,3]'
#
# Sort a linked list in O(n log n) time using constant space complexity.
#
# Example 1:
#
#
# Input: 4->2->1->3
# Output: 1->2->3->4
#
#
# Example 2:
#
#
# Input: -1->5->3->4->0
# Output: -1->0->3->4->5
#
#
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:

    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        ll = self.lenl(head)
        if ll <= 1:
            return head
        [a, b] = self.split(head, ll)
        if False:
            print("split", end=" ")
            self.print(a)
            print(",", end=" ")
            self.print(b)
            print()

        a = self.sortList(a)
        b = self.sortList(b)
        return self.merge(a, b)

    def print(self, head, end=" "):
        while head:
            print(head.val, end=end)
            head = head.next

    def lenl(self, head):
        count = 0
        while head:
            count += 1
            head = head.next
        return count

    def split(self, head, alen):
        count = 0
        out0 = head
        while head and count < alen//2:
            prev = head
            head = head.next
            count += 1
        prev.next = None
        return [out0, head]

    def merge(self, n1, n2):
        if n1.val <= n2.val:
            return self.merge2(n1, n1, n1.next, n2)
        else:
            return self.merge2(n2, n2, n1, n2.next)

    def merge2(self, n0, nc, n1, n2):

        if n1 is None:
            nc.next = n2
            return n0

        if n2 is None:
            nc.next = n1
            return n0

        if n1.val <= n2.val:
            nc.next = n1
            return self.merge2(n0, n1, n1.next, n2)
        else:
            nc.next = n2
            return self.merge2(n0, n2, n1, n2.next)



test = False
if test:
    from ListNode.ListNode import ListNode
    ll = ListNode.make([5,1,2,3,4])
    s = Solution()
    print(s.sortList(ll))
