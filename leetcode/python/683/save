#
# @lc app=leetcode id=683 lang=python3
#
# [683] K Empty Slots
#
# https://leetcode.com/problems/k-empty-slots/description/
#
# algorithms
# Hard (34.07%)
# Total Accepted:    35.9K
# Total Submissions: 105.3K
# Testcase Example:  '[1,3,2]\n1'
#
#
# There is a garden with N slots. In each slot, there is a flower. The N
# flowers will bloom one by one in N days. In each day, there will be exactly
# one flower blooming and it will be in the status of blooming since then.
#
#
#
# Given an array flowers consists of number from 1 to N. Each number in the
# array represents the place where the flower will open in that day.
#
#
#
# For example, flowers[i] = x means that the unique flower that blooms at day i
# will be at position x, where i and x will be in the range from 1 to N.
#
#
#
# Also given an integer k, you need to output in which day there exists two
# flowers in the status of blooming, and also the number of flowers between
# them is k and these flowers are not blooming.
#
#
#
# If there isn't such day, output -1.
#
#
# Example 1:
#
# Input:
# flowers: [1,3,2]
# k: 1
# Output: 2
# Explanation: In the second day, the first and the third flower have become
# blooming.
#
#
#
# Example 2:
#
# Input:
# flowers: [1,2,3]
# k: 1
# Output: -1
#
#
#
#
# Note:
#
# The given array will be in the range [1, 20000].
#
#
#

from collections import deque


class minQ:
    def __init__(self):
        self.q = deque()
        self.mq = deque()

    def append(self, el):
        self.q.append(el)
        while self.mq and self.mq[-1] > el:
            self.mq.pop()
        self.mq.append(el)

    def popleft(self):
        x = self.q.popleft()
        if self.mq[0] == x:
            self.mq.popleft()
        return x

    def min(self):
        return self.mq[0]


class Solution:
    def kEmptySlots(self, flowers, k):
        """
        posts" @ i and i+k+1
        require minimum from i+1 to i+k (k elements)
        use minQ to find minimum in that range
        """

        if k > len(flowers)-2:
            return -1

        # transform to reverse index
        loc = [None] * len(flowers)
        for day, pos in enumerate(flowers):
            loc[pos - 1] = day

        # initialize
        # insert k-1 elements (main loop inserts kth mid element)
        mq = minQ()
        for ki in range(0, k):
            mq.append(loc[ki])

        # main through all mid-k ranges
        maxdays = len(loc) + 1
        ans = maxdays
        for ki in range(k, len(loc) - 1):
            # posts
            mxlr = max(loc[ki - k], loc[ki + 1])

            mq.append(loc[ki])  # add kth element
            mq.popleft()        # pop left post
            qmin = mq.min() if k != 0 else maxdays

            if qmin > mxlr:
                ans = min(ans, mxlr)

        return ans + 1 if ans < maxdays else -1


test = True
if test:
    s = Solution()

    tests = [False, False, True]

    if tests[0]:
        # Input:
        flowers = [1, 3, 2]
        k = 1
        # Output: 2
        print(s.kEmptySlots(flowers, k))

    if tests[1]:
        # Input:
        flowers = [1, 2, 3]
        k = 1
        # Output: -1
        print(s.kEmptySlots(flowers, k))

    if tests[2]:
        flowers = [10, 2, 5, 3, 9, 8, 6, 1, 4, 7]
        k = 11
        print(s.kEmptySlots(flowers, k))
