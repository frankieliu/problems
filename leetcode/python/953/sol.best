
[Java/C++/Python] Mapping to Normal Order

https://leetcode.com/problems/verifying-an-alien-dictionary/discuss/203185

* Lang:    cpp
* Author:  lee215
* Votes:   41

**Explanation**
Build a transform mapping from `order`,
Find all alien words with letters in normal order.

For example, if we have `order = "xyz..."`
We can map the word `"xyz"` to `"abc"` or `"123"`

Then we check if all words are in sorted order.

**Time complexity**
`O(NS)`

**Java**
```
    int[] mapping = new int[26];
    public boolean isAlienSorted(String[] words, String order) {
        for (int i = 0; i < order.length(); i++)
            mapping[order.charAt(i) - \'a\'] = i;
        for (int i = 1; i < words.length; i++)
            if (compare(words[i - 1], words[i]) > 0)
                return false;
        return true;
    }

    int compare(String s1, String s2) {
        int n = s1.length(), m = s2.length(), cmp = 0;
        for (int i = 0, j = 0; i < n && j < m && cmp == 0; i++, j++) {
            cmp = mapping[s1.charAt(i) - \'a\'] - mapping[s2.charAt(j) - \'a\'];
        }
        return cmp == 0 ? n - m : cmp;
    }
```

**C++**:
```
    bool isAlienSorted(vector<string> words, string order) {
        int mapping[26];
        for (int i = 0; i < 26; i++)
            mapping[order[i] - \'a\'] = i;
        for (string &w : words)
            for (char &c : w)
                c = mapping[c - \'a\'];
        return is_sorted(words.begin(), words.end());
    }
```

**Python**
```
    def isAlienSorted(self, words, order):
        m = {c: i for i, c in enumerate(order)}
        words = [[m[c] for c in w] for w in words]
        return all(w1 <= w2 for w1, w2 in zip(words, words[1:]))
```

**Python 1-line**
Slow, Just for fun
```
    def isAlienSorted(self, words, order):
        return words == sorted(words, key=lambda w: map(order.index, w))
```
