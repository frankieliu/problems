#
# @lc app=leetcode id=213 lang=python3
#
# [213] House Robber II
#
# https://leetcode.com/problems/house-robber-ii/description/
#
# algorithms
# Medium (34.99%)
# Total Accepted:    103.4K
# Total Submissions: 295.6K
# Testcase Example:  '[2,3,2]'
#
# You are a professional robber planning to rob houses along a street. Each
# house has a certain amount of money stashed. All houses at this place are
# arranged in a circle. That means the first house is the neighbor of the last
# one. Meanwhile, adjacent houses have security system connected andÂ it will
# automatically contact the police if two adjacent houses were broken into on
# the same night.
#
# Given a list of non-negative integers representing the amount of money of
# each house, determine the maximum amount of money you can rob tonight without
# alerting the police.
#
# Example 1:
#
#
# Input: [2,3,2]
# Output: 3
# Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money =
# 2),
# because they are adjacent houses.
#
#
# Example 2:
#
#
# Input: [1,2,3,1]
# Output: 4
# Explanation: Rob house 1 (money = 1) and then rob house 3 (money =
# 3).
# Total amount you can rob = 1 + 3 = 4.
#
#
class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        if len(nums) == 0:
            return 0
        if len(nums) == 1:
            return nums[0]
        if len(nums) == 2:
            return max(nums[0], nums[1])

        # consider two conditions, one including the first house
        # and another not including the first house
        dp = [0]*len(nums)

        dp[0] = nums[0]
        for i in range(1, len(nums)-1):
            dp[i] = max(dp[i-1], nums[i] + (dp[i-2] if i-2 >= 0 else 0))
            # print("i, dp: ", i, dp[i])
        with0 = dp[len(nums)-2]
        # print(with0)

        # not including first house
        dp = [0]*len(nums)
        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1], nums[i] + (dp[i-2] if i-2 >= 0 else 0))
            # print("i, dp: ", i, dp[i])
        without0 = dp[len(nums)-1]
        # print(without0)

        # print(with0, without0)
        return max(with0, without0)

test = True
if test:
    s = Solution()
    Input = [2,3,2]
    print(s.rob(Input))

    # Output: 3
    Input = [1,2,3,1]
    print(s.rob(Input))
    # Output: 4
