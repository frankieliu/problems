
Java O(n) DP Solution

https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/discuss/119835

* Lang:    cpp
* Author:  wangzi6147
* Votes:   108

```swapRecord``` means for the ith element in A and B, the minimum swaps if we swap ```A[i]``` and ```B[i]```
```fixRecord``` means for the ith element in A and B, the minimum swaps if we DONOT swap ```A[i]``` and ```B[i]```
```
class Solution {
    public int minSwap(int[] A, int[] B) {
        int swapRecord = 1, fixRecord = 0;
        for (int i = 1; i < A.length; i++) {
            if (A[i - 1] >= B[i] || B[i - 1] >= A[i]) {
		// In this case, the ith manipulation should be same as the i-1th manipulation
                // fixRecord = fixRecord;
                swapRecord++;
            } else if (A[i - 1] >= A[i] || B[i - 1] >= B[i]) {
		// In this case, the ith manipulation should be the opposite of the i-1th manipulation
                int temp = swapRecord;
                swapRecord = fixRecord + 1;
                fixRecord = temp;
            } else {
                // Either swap or fix is OK. Let\'s keep the minimum one
                int min = Math.min(swapRecord, fixRecord);
                swapRecord = min + 1;
                fixRecord = min;
            }
        }
        return Math.min(swapRecord, fixRecord);
    }
}
```

Let me firstly explain the O(n) space DP solution which uses swapRecord[n] and fixRecord[n]. It would be more explicit.

One thing should be kept in mind is, the array A and B would always be valid after you do the swap manipulation or not for each element. Take an example:

```
index               0    1    2    3    4
A                   1    3    5    4    9
B                   1    2    3    7    10   
swapRecord          1    1    2    1    2
fixRecord           0    0    0    2    1
```

```swapRecord[i]``` means for the ith element in A and B, the minimum swaps if we swap A[i] and B[i]
```fixRecord[i]``` means for the ith element in A and B, the minimum swaps if we DONOT swap A[i] and B[i]

Obviously, ```swapRecord[0] = 1``` and ```fixRecord[0] = 0```.

For ```i = 1```, either swap or fix is OK. So we take the minimum previous result, ```min = min(swapRecord[0], fixRecord[0]) = 0```. ```swapRecord[1] = min + 1 = 1```, ```fixRecord[1] = min = 0```
For ```i = 2```, notice that A[1] >= B[2], which means the manipulation of ```A[2] and B[2]``` should be same as ```A[1] and B[1]```, if A[1] and B[1] swap, A[2] and B[2] should swap, vice versa. Make sense, right? So ```swapRecord[2] = swapRecord[1] + 1``` and ```fixRecord[2] = fixRecord[1]```
For ```i = 3```, notice that A[2] >= A[3], which mean the manipulation of ```A[3] and B[3]``` and ```A[2] and B[2]``` should be opposite. In this case, ```swapRecord[3] = fixRecord[2] + 1``` and ```fixRecord[3] = swapRecord[2]```
For the last elements, it\'s similiar as the elements when i = 1. Either swap or fix is OK. You can try to figure this out. :D

Finally, we get the minimum of last swapRecord and fixRecord. It should be the result.

Notice that every ith swapRecord and fixRecord is only relevant with the previous one. So the algorithm should be optimized to an O(1) space version. Just like the code I write above.
