#
# @lc app=leetcode id=254 lang=python3
#
# [254] Factor Combinations
#
# https://leetcode.com/problems/factor-combinations/description/
#
# algorithms
# Medium (43.95%)
# Total Accepted:    50.4K
# Total Submissions: 114.5K
# Testcase Example:  '1'
#
# Numbers can be regarded as product of its factors. For example,
#
#
# 8 = 2 x 2 x 2;
# ⁠ = 2 x 4.
#
#
# Write a function that takes an integer n and return all possible combinations
# of its factors.
#
# Note:
#
#
# You may assume that n is always positive.
# Factors should be greater than 1 and less than n.
#
#
# Example 1:
#
#
# Input: 1
# Output: []
#
#
# Example 2:
#
#
# Input: 37
# Output:[]
#
# Example 3:
#
#
# Input: 12
# Output:
# [
# ⁠ [2, 6],
# ⁠ [2, 2, 3],
# ⁠ [3, 4]
# ]
#
# Example 4:
#
#
# Input: 32
# Output:
# [
# ⁠ [2, 16],
# ⁠ [2, 2, 8],
# ⁠ [2, 2, 2, 4],
# ⁠ [2, 2, 2, 2, 2],
# ⁠ [2, 4, 4],
# ⁠ [4, 8]
# ]
#
#
#
from itertools import combinations
import math

class Solution:
    def getFactors(self, n):
        """ algorithm H
        restricted growth strings in lexicographic order
        1. initialize a to [0, ..., 0]
           initialize b to [1, ..., 1]
        2. if 1 + [a_n = 1] -> 2 blocks if a_n = m, H4
        3. increase a_n++
        4. j = n-1, while a_j = b_j, j--
        5. increase a_j terminate if j = 1
        6. zero out a_j+1 .. a_n
           m = b_j + [aj = bj], j++, a_j = 0, b_j = m, j++
        """
        return self.find_factors(n, 2)

    def find_factors(self, n, k):
        print("Find factors {} {}".format(n, k))
        out = []
        two = self.find_two(n, k)
        print("Two {} {}: {}".format(n, k, two))
        out += two
        for a, b in two:
            tmp = self.find_factors(b, a)
            if tmp:
                out += [[a] + c for c in tmp]
        print("Factors for {} {}: {}".format(n, k, out))
        return out

    def find_two(self, n, k):
        """ find two factors n bigger than k """
        out = []
        for i in range(k, int(math.sqrt(n))+1):
            if n % i == 0:
                out.append([i, n//i])
        return out


test = True
if test:
    s = Solution()
    print(s.getFactors(32))
