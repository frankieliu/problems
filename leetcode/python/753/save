#
# @lc app=leetcode id=753 lang=python3
#
# [753] Cracking the Safe
#
# https://leetcode.com/problems/cracking-the-safe/description/
#
# algorithms
# Hard (44.22%)
# Total Accepted:    11.7K
# Total Submissions: 26.5K
# Testcase Example:  '1\n1'
#
#
# There is a box protected by a password.  The password is n digits, where each
# letter can be one of the first k digits 0, 1, ..., k-1.
#
# You can keep inputting the password, the password will automatically be
# matched against the last n digits entered.
#
# For example, assuming the password is "345", I can open it when I type
# "012345", but I enter a total of 6 digits.
#
# Please return any string of minimum length that is guaranteed to open the box
# after the entire string is inputted.
#
#
# Example 1:
#
# Input: n = 1, k = 2
# Output: "01"
# Note: "10" will be accepted too.
#
#
#
# Example 2:
#
# Input: n = 2, k = 2
# Output: "00110"
# Note: "01100", "10011", "11001" will be accepted too.
#
#
#
# Note:
#
# n will be in the range [1, 4].
# k will be in the range [1, 10].
# k^n will be at most 4096.
#
#
#
class Solution:
    def crackSafe(self, n, k):
        if k == 1:
            return '0'*n

        def dfs(u):
            for i in range(0, k):
                edge = (u*k+i) % v
                # print("u:{} i:{} edge:{} visited:{}".format(u,i,edge,visited))
                if edge not in visited:
                    visited.add(edge)
                    dfs(edge)
                    seq.append(i)

        # number of nodes
        v = k**n
        seq = []
        visited = set()
        dfs(0)
        print(seq, seq[0:n-1])
        return ("".join([str(x) for x in seq]) +
                "".join([str(x) for x in seq[0:n-1]]))



test = True
if test:
    sol = Solution()
    case = [False]*1 + [True] + [False]*2
    if case[0]:
        # Example 1:
        n = 1
        k = 2
        # Output: "01"
        print(sol.crackSafe(n, k))
    if case[1]:
        # Example 2:
        n = 2
        k = 2
        # Output: "00110"
        print(sol.crackSafe(n, k))
