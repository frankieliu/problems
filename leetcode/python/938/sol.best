
[Java] 3 recursive methods with comment.

https://leetcode.com/problems/range-sum-of-bst/discuss/192019

* Lang:    cpp
* Author:  rock
* Votes:   18

Three methods and choose one you like.

**Method 1:**
```
    public int rangeSumBST(TreeNode root, int L, int R) {
        if (root == null) return 0; // base case.
        if (root.val < L) return rangeSumBST(root.right, L, R); // left branch excluded.
        if (root.val > R) return rangeSumBST(root.left, L, R); // right branch excluded.
        return root.val + rangeSumBST(root.right, L, R) + rangeSumBST(root.left, L, R); // count in both children.
    }
```
The following are two more similar recursive codes.

**Method 2:**
```
    public int rangeSumBST(TreeNode root, int L, int R) {
        if (root == null) return 0; // base case.
        return (L <= root.val && root.val <= R ? root.val : 0) + rangeSumBST(root.right, L, R) + rangeSumBST(root.left, L, R);
    }
```
**Method 3:**
```
    public int rangeSumBST(TreeNode root, int L, int R) {
        if (root == null) { return 0; }
        int sum = 0;
        if (root.val > L) { sum += rangeSumBST(root.left, L, R); } // left child is a possible candidate.
        if (root.val < R) { sum += rangeSumBST(root.right, L, R); } // right child is a possible candidate.
        if (root.val >= L && root.val <= R) { sum += root.val; } // count root in.
        return sum;
    }
```
**Analysis:**

All 3 methods will DFS traverse all nodes in worst case, and if we count in the recursion trace space cost, the complexities are as follows:

**Time & space: O(n)**, where n is the number of total nodes.
