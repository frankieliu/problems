
[Java/C++/Python] Sliding Window

https://leetcode.com/problems/max-consecutive-ones-iii/discuss/247564

* Lang:    cpp
* Author:  lee215
* Votes:   56

## **Intuition**
Translation:
Find the longest subarray with at most `K` zeros.

## **Explanation**
For each `A[j]`, try to find the longest subarray.
If `A[i] ~ A[j]` has zeros <= `K`, we continue to increment `j`.
If `A[i] ~ A[j]` has zeros > `K`, we increment `i`.

**Java:**
```
    public int longestOnes(int[] A, int K) {
        int i = 0, j;
        for (j = 0; j < A.length; ++j) {
            if (A[j] == 0) K--;
            if (K < 0 && A[i++] == 0) K++;
        }
        return j - i;
    }
```

**C++:**
```
    int longestOnes(vector<int>& A, int K) {
        int i = 0, j;
        for (j = 0; j < A.size(); ++j) {
            if (A[j] == 0) K--;
            if (K < 0 && A[i++] == 0) K++;
        }
        return j - i;
    }
```

**Python:**
```
    def longestOnes(self, A, K):
        i = 0
        for j in xrange(len(A)):
            K -= 1 - A[j]
            if K < 0:
                K += 1 - A[i]
                i += 1
        return j - i + 1
```

## **Update**

Suggested by @migeater, we don\'t need to reduce the the size of sliding window.
as we want to find the maximum window.

