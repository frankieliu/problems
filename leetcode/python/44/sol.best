
Linear runtime and constant space solution

https://leetcode.com/problems/wildcard-matching/discuss/17810

* Lang:    cpp
* Author:  pandora111
* Votes:   322

I found this solution from http://yucoding.blogspot.com/2013/02/leetcode-question-123-wildcard-matching.html


----------


The basic idea is to have one pointer for the string and one pointer for the pattern.  This algorithm iterates at most length(string) + length(pattern) times, for each iteration, at least one pointer advance one step. 


----------

Here is Yu's elegant solution in C++

     bool isMatch(const char *s, const char *p) {
            const char* star=NULL;
            const char* ss=s;
            while (*s){
                //advancing both pointers when (both characters match) or ('?' found in pattern)
                //note that *p will not advance beyond its length 
                if ((*p=='?')||(*p==*s)){s++;p++;continue;} 

                // * found in pattern, track index of *, only advancing pattern pointer 
                if (*p=='*'){star=p++; ss=s;continue;} 

                //current characters didn't match, last pattern pointer was *, current pattern pointer is not *
                //only advancing pattern pointer
                if (star){ p = star+1; s=++ss;continue;} 

               //current pattern pointer is not star, last patter pointer was not *
               //characters do not match
                return false;
            }
 
           //check for remaining characters in pattern
            while (*p=='*'){p++;}

            return !*p;  
        }


----------


Here is my re-write in Java

    \ufeff\ufeff\ufeffboolean comparison(String str, String pattern) {
            int s = 0, p = 0, match = 0, starIdx = -1;            
            while (s < str.length()){
                // advancing both pointers
                if (p < pattern.length()  && (pattern.charAt(p) == '?' || str.charAt(s) == pattern.charAt(p))){
                    s++;
                    p++;
                }
                // * found, only advancing pattern pointer
                else if (p < pattern.length() && pattern.charAt(p) == '*'){
                    starIdx = p;
                    match = s;
                    p++;
                }
               // last pattern pointer was *, advancing string pointer
                else if (starIdx != -1){
                    p = starIdx + 1;
                    match++;
                    s = match;
                }
               //current pattern pointer is not star, last patter pointer was not *
              //characters do not match
                else return false;
            }
            
            //check for remaining characters in pattern
            while (p < pattern.length() && pattern.charAt(p) == '*')
                p++;
            
            return p == pattern.length();
    }
