#
# @lc app=leetcode id=68 lang=python3
#
# [68] Text Justification
#
# https://leetcode.com/problems/text-justification/description/
#
# algorithms
# Hard (22.17%)
# Total Accepted:    87.5K
# Total Submissions: 394.5K
# Testcase Example:  '["This", "is", "an", "example", "of", "text", "justification."]\n16'
#
# Given an array of words and a width maxWidth, format the text such that each
# line has exactly maxWidth characters and is fully (left and right)
# justified.
#
# You should pack your words in a greedy approach; that is, pack as many words
# as you can in each line. Pad extra spaces ' ' when necessary so that each
# line has exactly maxWidth characters.
#
# Extra spaces between words should be distributed as evenly as possible. If
# the number of spaces on a line do not divide evenly between words, the empty
# slots on the left will be assigned more spaces than the slots on the right.
#
# For the last line of text, it should be left justified and no extra space is
# inserted between words.
#
# Note:
#
#
# A word is defined as a character sequence consisting of non-space characters
# only.
# Each word's length is guaranteed to be greater than 0 and not exceed
# maxWidth.
# The input array words contains at least one word.
#
#
# Example 1:
#
#
# Input:
# words = ["This", "is", "an", "example", "of", "text", "justification."]
# maxWidth = 16
# Output:
# [
# "This    is    an",
# "example  of text",
# "justification.  "
# ]
#
#
# Example 2:
#
#
# Input:
# words = ["What","must","be","acknowledgment","shall","be"]
# maxWidth = 16
# Output:
# [
# "What   must   be",
# "acknowledgment  ",
# "shall be        "
# ]
# Explanation: Note that the last line is "shall be    " instead of "shall
# be",
# because the last line must be left-justified instead of fully-justified.
# ⁠            Note that the second line is also left-justified becase it
# contains only one word.
#
#
# Example 3:
#
#
# Input:
# words =
# ["Science","is","what","we","understand","well","enough","to","explain",
# "to","a","computer.","Art","is","everything","else","we","do"]
# maxWidth = 20
# Output:
# [
# "Science  is  what we",
# ⁠ "understand      well",
# "enough to explain to",
# "a  computer.  Art is",
# "everything  else  we",
# "do                  "
# ]
#
#
#


class Solution:

    def fullJustify(self, words, maxWidth):
        """
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        """
        def findLine(words, i, maxWidth):
            line = []
            first = True
            while i < len(words):
                w = (" " if not first else "") + words[i]
                first = False
                if maxWidth < len(w):
                    break
                maxWidth -= len(w)
                line.append(w)
                i += 1
            return i, maxWidth, line

        def printLine(words, extra, isLast=False):
            if len(words) > 1 and not isLast:
                whole = extra // (len(words)-1)
                extra = extra - whole * (len(words)-1)
                for i in range(len(words)-1):
                    words[i] += " " * (whole + (i < extra))
            return "".join(words)

        i = 0
        out = []
        while i < len(words):
            i, width, line = findLine(words, i, maxWidth)
            out.append(printLine(line, width, isLast=(i == len(words))))
        return out


test = True
if test:
    s = Solution()
    Input = [
        "Science",
        "is",
        "what",
        "we",
        "understand",
        "well",
        "enough",
        "to",
        "explain",
        "to",
        "a",
        "computer.",
        "Art",
        "is",
        "everything",
        "else",
        "we",
        "do"]
    maxWidth = 20
    # Output:
    # [
    # "Science  is  what we",
    # ⁠ "understand      well",
    # "enough to explain to",
    # "a  computer.  Art is",
    # "everything  else  we",
    # "do                  "
    # ]
    print(s.fullJustify(Input, maxWidth))
