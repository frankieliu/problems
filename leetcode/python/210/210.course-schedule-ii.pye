#
# @lc app=leetcode id=210 lang=python3
#
# [210] Course Schedule II
#
# https://leetcode.com/problems/course-schedule-ii/description/
#
# algorithms
# Medium (33.24%)
# Total Accepted:    126K
# Total Submissions: 379K
# Testcase Example:  '2\n[[1,0]]'
#
# There are a total of n courses you have to take, labeled from 0 to n-1.
#
# Some courses may have prerequisites, for example to take course 0 you have to
# first take course 1, which is expressed as a pair: [0,1]
#
# Given the total number of courses and a list of prerequisite pairs, return
# the ordering of courses you should take to finish all courses.
#
# There may be multiple correct orders, you just need to return one of them. If
# it is impossible to finish all courses, return an empty array.
#
# Example 1:
#
#
# Input: 2, [[1,0]]
# Output: [0,1]
# Explanation: There are a total of 2 courses to take. To take course 1 you
# should have finished
# course 0. So the correct course order is [0,1] .
#
# Example 2:
#
#
# Input: 4, [[1,0],[2,0],[3,1],[3,2]]
# Output: [0,1,2,3] or [0,2,1,3]
# Explanation: There are a total of 4 courses to take. To take course 3 you
# should have finished both
# ⁠            courses 1 and 2. Both courses 1 and 2 should be taken after you
# finished course 0.
# So one correct course order is [0,1,2,3]. Another correct ordering is
# [0,2,1,3] .
#
# Note:
#
#
# The input prerequisites is a graph represented by a list of edges, not
# adjacency matrices. Read more about how a graph is represented.
# You may assume that there are no duplicate edges in the input prerequisites.
#
#
#
from collections import defaultdict
from collections import deque

class Solution:
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """

        # generate graph
        g = defaultdict(list)
        for p in prerequisites:
            g[p[1]].append(p[0])
        # toposort the graph
        k = kahn(numCourses, g)
        if len(k) < numCourses:
            return []
        else:
            return k


def kahn(numCourses, g):
    out = []
    indegree = {}
    for i in range(numCourses):
        indegree[i] = 0

    for k, v in g.items():
        if k not in indegree:
            indegree[k] = 0
        for x in v:
            indegree[x] += 1

    s = deque()
    for k, v in indegree.items():
        if v == 0:
            s.append(k)

    while s:
        el = s.popleft()
        out.append(el)
        # print("popping", el)

        # decrease indegree of all neighboring nodes
        for x in g[el]:
            indegree[x] -= 1
            if indegree[x] == 0:
                s.append(x)
                # print("appending", x)
        # print(indegree)
    return out


test = True
if test:
    s = Solution()
    Input = (4,
             [[1, 0], [2, 0], [3, 1], [3, 2]])
    Input = (1, [])
    # Output: [0,1,2,3] or [0,2,1,3]
    print(s.findOrder(Input[0], Input[1]))
