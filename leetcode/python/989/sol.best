
[Java/C++/Python] Take K itself as a Carry

https://leetcode.com/problems/add-to-array-form-of-integer/discuss/234488

* Lang:    cpp
* Author:  lee215
* Votes:   15

**Explanation**
Take `K` as a carry.
Add it to the lowest digit,
Update carry `K`,
and Keep going to higher digit.


**Time Complexity**

Insert will take `O(1)` time or `O(N)` time on shifting, depending on the data stucture.
But in this problem `K` is at most 5 digit so this is restricted.
So this part doesn\'t matter.

The overall time complexity is `O(N)`.

**Java**
```
    public List<Integer> addToArrayForm(int[] A, int K) {
        List<Integer> res = new LinkedList<>();
        for (int i = A.length - 1; i >= 0; --i) {
            res.add(0, (A[i] + K) % 10);
            K = (A[i] + K) / 10;
        }
        while (K > 0) {
            res.add(0, K % 10);
            K /= 10;
        }
        return res;
    }
```

**Java**
With one loop, suggested by @LearningMind.
```
    public List<Integer> addToArrayForm(int[] A, int K) {
        List res = new ArrayList<>();
        for (int i = A.length - 1; i >= 0 || K > 0; --i) {
            res.add(0, (i >= 0 ? A[i] + K : K) % 10);
            K = (i >= 0 ? A[i] + K : K) / 10;
        }
        return res;
    }
```

**C++:**
```
    vector<int> addToArrayForm(vector<int> A, int K) {
        for (int i = A.size() - 1; i >= 0 && K > 0; --i) {
            A[i] += K;
            K = A[i] / 10;
            A[i] %= 10;
        }
        while (K > 0) {
            A.insert(A.begin(), K % 10);
            K /= 10;
        }
        return A;
    }
```

**Python:**
```
    def addToArrayForm(self, A, K):
        for i in range(len(A))[::-1]:
            A[i], K = (A[i] + K) % 10, (A[i] + K) / 10
        return [int(i) for i in str(K)] + A if K else A
```

