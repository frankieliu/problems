
[Java/Python] Brute Force Backstracking

https://leetcode.com/problems/unique-paths-iii/discuss/221946

* Lang:    cpp
* Author:  lee215
* Votes:   22

Video [here](https://www.youtube.com/watch?v=Dny7JhfvJ0o) for this problem in Java.


First find out where the start and the end is.
Also We need to know the number of empty cells.

We we try to explore a cell,
it will change 0 to -2 and do a dfs in 4 direction.

If we hit the target and pass all empty cells, increment the result.

Time complexity is as good as dp, but it take less space and easier to implement.


**Java:**
```
    int res = 0, empty = 1, sx, sy, ex, ey;
    public int uniquePathsIII(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) empty++;
                else if (grid[i][j] == 1) {
                    sx = i;
                    sy = j;
                } else if (grid[i][j] == 2) {
                    ex = i;
                    ey = j;
                }
            }
        }
        dfs(grid, sx, sy);
        return res;
    }

    public void dfs(int[][] grid, int x0, int y0) {
        if (check(grid, x0, y0) == false) return;
        if (x0 == ex && y0 == ey) {
            if (empty == 0) res++;
            return;
        }
        grid[x0][y0] = -2;
        empty--;
        dfs(grid, x0 + 1, y0);
        dfs(grid, x0 - 1, y0);
        dfs(grid, x0, y0 + 1);
        dfs(grid, x0, y0 - 1);
        grid[x0][y0] = 0;
        empty++;
    }

    public boolean check(int[][] grid, int i, int j) {
        int m = grid.length, n = grid[0].length;
        return 0 <= i && i < m && 0 <= j && j < n && grid[i][j] >= 0;
    }
```


**Python:**
```
    def uniquePathsIII(self, A):
        self.res = 0
        m, n,empty = len(A), len(A[0]),1
        for i in range(m):
            for j in range(n):
                if A[i][j] == 1: x,y = (i, j)
                elif A[i][j] == 2: end = (i, j)
                elif A[i][j] == 0: empty += 1
        def dfs(x, y, empty):
            if not (0 <= x < m and 0 <= y < n and A[x][y] >= 0): return
            if (x, y) == end:
                self.res += empty == 0
                return
            A[x][y] = -2
            dfs(x + 1, y, empty - 1)
            dfs(x - 1, y, empty - 1)
            dfs(x, y + 1, empty - 1)
            dfs(x, y - 1, empty - 1)
            A[x][y] = 0
        dfs(x,y, empty)
        return self.res
```

