#
# @lc app=leetcode id=286 lang=python3
#
# [286] Walls and Gates
#
# https://leetcode.com/problems/walls-and-gates/description/
#
# algorithms
# Medium (48.71%)
# Total Accepted:    70.1K
# Total Submissions: 144K
# Testcase Example:  '[[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]'
#
# You are given a m x n 2D grid initialized with these three possible
# values.
#
#
# -1 - A wall or an obstacle.
# 0 - A gate.
# INF - Infinity means an empty room. We use the value 2^31 - 1 = 2147483647 to
# represent INF as you may assume that the distance to a gate is less than
# 2147483647.
#
#
# Fill each empty room with the distance to its nearest gate. If it is
# impossible to reach a gate, it should be filled with INF.
#
# Example: 
#
# Given the 2D grid:
#
#
# INF  -1  0  INF
# INF INF INF  -1
# INF  -1 INF  -1
# ⁠ 0  -1 INF INF
#
#
# After running your function, the 2D grid should be:
#
#
# ⁠ 3  -1   0   1
# ⁠ 2   2   1  -1
# ⁠ 1  -1   2  -1
# ⁠ 0  -1   3   4
#
# [[3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4]]
#
from collections import deque

class Solution:
    def wallsAndGates(self, rooms):
        """
        Do not return anything, modify rooms in-place instead.
        """
        if len(rooms) < 0:
            return
        if len(rooms) == 1 and len(rooms[0]) <= 1:
            return

        INF = (1<<31) - 1
        # find the gates
        s = deque()  # stack
        for i in range(len(rooms)):
            for j in range(len(rooms[i])):
                if rooms[i][j] == 0:
                    s.append((i, j))
        marker = (-1, -1)
        s.appendleft(marker)  # A marker
        d = 1
        while s:
            i, j = s.pop()
            if i == -1:
                d += 1
                if s:
                    s.appendleft(marker)
                continue

            up = (i-1, j) if i > 0 else None
            down = (i+1, j) if i < len(rooms)-1 else None
            left = (i, j-1) if j > 0 else None
            right = (i, j+1) if j < len(rooms[0])-1 else None

            for u, v in (x for x in [up, down, left, right] if x is not None):
                el = rooms[u][v]
                if el != -1 and el > d:
                    rooms[u][v] = d
                    s.appendleft((u, v))


test = True
if test:
    s = Solution()
    case = [True, False]
    if case[0]:
        INF = (1 << 31) - 1
        Input = [
            [INF, -1, 0, INF],
            [INF, INF, INF, -1],
            [INF, -1, INF, -1],
            [0, -1, INF, INF]
        ]
        print(s.wallsAndGates(Input))
        print(Input)
    if case[1]:
        print(s.wallsAndGates())
