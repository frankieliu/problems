#
# @lc app=leetcode id=947 lang=python3
#
# [947] Most Stones Removed with Same Row or Column
#
# https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/description/
#
# algorithms
# Medium (52.87%)
# Total Accepted:    10K
# Total Submissions: 18.8K
# Testcase Example:  '[[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]'
#
# On a 2D plane, we place stones at some integer coordinate points.  Each
# coordinate point may have at most one stone.
#
# Now, a move consists of removing a stone that shares a column or row with
# another stone on the grid.
#
# What is the largest possible number of moves we can make?
#
#
#
#
# Example 1:
#
#
# Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
# Output: 5
#
#
#
# Example 2:
#
#
# Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
# Output: 3
#
#
#
# Example 3:
#
#
# Input: stones = [[0,0]]
# Output: 0
#
#
#
#
# Note:
#
#
# 1 <= stones.length <= 1000
# 0 <= stones[i][j] < 10000
#
#
#
#
#
#
from typing import List
class Solution:
    def removeStones(self, stones: List[List[int]]):
        N = 10000
        p = list(range(2*N))

        def find(p,x):
            if p[x] != x:
                p[x] = find(p,p[x])
            return p[x]

        def union(p,x,y):
            px = find(p,x)
            py = find(p,y)
            p[py] = px

        for x,y in stones:
            union(p,x,y+N)

        return len(stones) - len({find(p,x) for x,y in stones})


test = True
if test:
    sol = Solution()
    case = [False]*0 + [True] + [False]*3
    if case[0]:
        # Example 1:
        stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
        # Output: 5
        print(sol.removeStones(stones))
    if case[1]:
        # Example 2:
        stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
        # Output: 3
        print(sol.removeStones(stones))
    if case[2]:
        # Example 3:
        stones = [[0,0]]
        # Output: 0
        print(sol.removeStones(stones))
