
[C++/Java/Python] Straight Forward

https://leetcode.com/problems/word-subsets/discuss/175854

* Lang:    cpp
* Author:  lee215
* Votes:   43

**C++:**
```
    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {
        vector<int> uni(26), tmp(26);
        int i;
        for (string b : B) {
            tmp = counter(b);
            for (i = 0; i < 26; ++i)
                uni[i] = max(uni[i], tmp[i]);
        }
        vector<string> res;
        for (string a : A) {
            tmp = counter(a);
            for (i = 0; i < 26; ++i)
                if (tmp[i] < uni[i]) break;
            if (i == 26) res.push_back(a);
        }
        return res;
    }

    vector<int> counter(string& word) {
        vector<int> count(26);
        for (char c : word) count[c - \'a\']++;
        return count;
    }
```
**Java:**
```
    public List<String> wordSubsets(String[] A, String[] B) {
        int[] uni = new int[26], tmp;
        int i;
        for (String b : B) {
            tmp = counter(b);
            for (i = 0; i < 26; ++i)
                uni[i] = Math.max(uni[i], tmp[i]);
        }
        List<String> res = new ArrayList<>();
        for (String a : A) {
            tmp = counter(a);
            for (i = 0; i < 26; ++i)
                if (tmp[i] < uni[i]) break;
            if (i == 26) res.add(a);
        }
        return res;
    }

    int[] counter(String word) {
        int[] count = new int[26];
        for (char c : word.toCharArray()) count[c - \'a\']++;
        return count;
    }
```
**Python:**
Simplified with @KaiPeng21\'s suggestion.
```
    def wordSubsets(self, A, B):
        uni = collections.Counter()
        for b in B:
            uni |= collections.Counter(b)
        res = []
        for a in A:
            count = collections.Counter(a)
            if all(count[c] >= uni[c] for c in uni):
                res.append(a)
        return res
```

