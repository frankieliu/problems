
One Pass DP O(N)

https://leetcode.com/problems/new-21-game/discuss/132334

* Lang:    cpp
* Author:  lee215
* Votes:   70

**Intuition**:
The same problems as "Climbing Stairs".

**Explanation**:
In a word,
`dp[i]`: probability of get points `i`
 `dp[i] = sum(last W dp values) / W`
 
To get `Wsum = sum(last W dp values)`, we can maintain a sliding window with size at most `K`.

**Time Complexity**:
O(N)

**C++:**
```
    double new21Game(int N, int K, int W) {
        if (K == 0 || N >= K + W) return 1.0;
        vector<double> dp(N + 1);
        dp[0] = 1.0;
        double Wsum = 1.0, res = 0.0;
        for (int i = 1; i <= N; ++i) {
            dp[i] = Wsum / W;
            if (i < K) Wsum += dp[i]; else res += dp[i];
            if (i - W >= 0) Wsum -= dp[i - W];
        }
        return res;
    }
```

**Java:**
```
    public double new21Game(int N, int K, int W) {
        if (K == 0 || N >= K + W) return 1;
        double dp[] = new double[N + 1],  Wsum = 1, res = 0;
        dp[0] = 1;
        for (int i = 1; i <= N; ++i) {
            dp[i] = Wsum / W;
            if (i < K) Wsum += dp[i]; else res += dp[i];
            if (i - W >= 0) Wsum -= dp[i - W];
        }
        return res;
    }
```
**Python:**
```
    def new21Game(self, N, K, W):
        if K == 0 or N >= K + W: return 1
        dp = [1.0] + [0.0] * N
        Wsum = 1.0
        for i in range(1, N + 1):
            dp[i] = Wsum / W
            if i < K: Wsum += dp[i]
            if i - W >= 0: Wsum -= dp[i - W]
        return sum(dp[K:])
```
