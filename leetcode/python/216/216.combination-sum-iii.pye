#
# @lc app=leetcode id=216 lang=python3
#
# [216] Combination Sum III
#
# https://leetcode.com/problems/combination-sum-iii/description/
#
# algorithms
# Medium (50.11%)
# Total Accepted:    110.7K
# Total Submissions: 220.9K
# Testcase Example:  '3\n7'
#
#
# Find all possible combinations of k numbers that add up to a number n, given
# that only numbers from 1 to 9 can be used and each combination should be a
# unique set of numbers.
#
# Note:
#
#
# All numbers will be positive integers.
# The solution set must not contain duplicate combinations.
#
#
# Example 1:
#
#
# Input: k = 3, n = 7
# Output: [[1,2,4]]
#
#
# Example 2:
#
#
# Input: k = 3, n = 9
# Output: [[1,2,6], [1,3,5], [2,3,4]]
#
#
#
class Solution:
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        def help(k, n, idx):
            if k == 0 and n == 0:
                out.append(cur[:])
                # print("found:", cur, out)
                return
            # consider all the solutions in which you
            # take one of the items
            for i in range(idx, len(nums)):
                # print(k, cur, n)
                if (1 <= k <= len(nums) - idx and
                    k*(i+i+k-1) <= 2*n <= k*(10+10-k+1)):
                    cur.append(nums[i])
                    help(k-1, n-nums[i], i+1)   # solutions containing nums[i]
                    cur.pop()

        nums = list(range(1, 10))
        cur = []
        out = []
        help(k, n, 0)
        return out


test = True
if test:
    s = Solution()
    print(s.combinationSum3(3, 15))
