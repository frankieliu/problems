
C++/Java search and capture

https://leetcode.com/problems/available-captures-for-rook/discuss/242924

* Lang:    cpp
* Author:  votrubac
* Votes:   29

Search for the rock. From the rock, trace empty spaces in four directions. Return 1 if we hit a pawn, zero otherwise.

Count and return captured pawns.
```
int cap(vector<vector<char>>& b, int x, int y, int dx, int dy) {
  while (x >= 0 && x < b.size() && y >= 0 && y < b[x].size() && b[x][y] != \'B\') {
    if (b[x][y] == \'p\') return 1;
    x += dx, y += dy;
  }
  return 0;
}
int numRookCaptures(vector<vector<char>>& b) {
  for (auto i = 0; i < b.size(); ++i)
    for (auto j = 0; j < b[i].size(); ++j)
      if (b[i][j] == \'R\') return cap(b,i,j,0,1)+cap(b,i,j,0,-1)+cap(b,i,j,1,0)+cap(b,i,j,-1,0);
  return 0;
}
```
Java version:
```
int cap(char[][] b, int x, int y, int dx, int dy) {
  while (x >= 0 && x < b.length && y >= 0 && y < b[x].length && b[x][y] != \'B\') {
    if (b[x][y] == \'p\') return 1;
    x += dx; y += dy;
  }
  return 0;
}
public int numRookCaptures(char[][] b) {
  for (int i = 0; i < b.length; ++i)
    for (int j = 0; j < b[i].length; ++j)
      if (b[i][j] == \'R\') return cap(b,i,j,0,1)+cap(b,i,j,0,-1)+cap(b,i,j,1,0)+cap(b,i,j,-1,0);
  return 0;
}
```
