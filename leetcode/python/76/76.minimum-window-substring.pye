#
# @lc app=leetcode id=76 lang=python3
#
# [76] Minimum Window Substring
#
# https://leetcode.com/problems/minimum-window-substring/description/
#
# algorithms
# Hard (29.54%)
# Total Accepted:    204.6K
# Total Submissions: 692.6K
# Testcase Example:  '"ADOBECODEBANC"\n"ABC"'
#
# Given a string S and a string T, find the minimum window in S which will
# contain all the characters in T in complexity O(n).
#
# Example:
#
#
# Input: S = "ADOBECODEBANC", T = "ABC"
# Output: "BANC"
#
#
# Note:
#
#
# If there is no such window in S that covers all characters in T, return the
# empty string "".
# If there is such window, you are guaranteed that there will always be only
# one unique minimum window in S.
#
#
#
class Solution:
    def minWindow(self, ss, tt):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        mp = [0]*52

        s = [ord(x)-ord('a') for x in ss]
        t = [ord(x)-ord('a') for x in tt]

        counter = 0
        for el in t:
            mp[el] -= 1
            counter += 1

        # print(s)
        mw = len(s)+1
        out = (0, 0)

        ll = 0
        rr = 0
        while rr < len(s):
            # if there is a discrepancy
            # print(s[rr], rr, len(s))
            if mp[s[rr]] < 0:
                counter -= 1
            mp[s[rr]] += 1
            rr += 1

            while counter == 0:
                # print(ss[ll:rr])
                if rr-ll < mw:
                    mw = rr-ll
                    out = (ll, rr)
                mp[s[ll]] -= 1
                if mp[s[ll]] < 0:
                    counter += 1
                ll += 1

        return ss[out[0]:out[1]] if out[1] > out[0] else ""


test = True
if test:
    s = Solution()
    case = [False, False, True, False]
    if case[0]:
        S = "ADOBECODEBANC"
        T = "ABC"
        # Output: "BANC"
        print(s.minWindow(S, T))
    if case[1]:
        S = "a"
        T = "a"
        print(s.minWindow(S, T))
    if case[2]:
        S = "cabwefgewcwaefgcf"
        T = "cae"
        print(s.minWindow(S, T))
