#
# @lc app=leetcode id=30 lang=python3
#
# [30] Substring with Concatenation of All Words
#
# https://leetcode.com/problems/substring-with-concatenation-of-all-words/description/
#
# algorithms
# Hard (22.94%)
# Total Accepted:    119.9K
# Total Submissions: 522.5K
# Testcase Example:  '"barfoothefoobarman"\n["foo","bar"]'
#
# You are given a string, s, and a list of words, words, that are all of the
# same length. Find all starting indices of substring(s) in s that is a
# concatenation of each word in words exactly once and without any intervening
# characters.
#
# Example 1:
#
#
# Input:
# ⁠ s = "barfoothefoobarman",
# ⁠ words = ["foo","bar"]
# Output: [0,9]
# Explanation: Substrings starting at index 0 and 9 are "barfoor" and "foobar"
# respectively.
# The output order does not matter, returning [9,0] is fine too.
#
#
# Example 2:
#
#
# Input:
# ⁠ s = "wordgoodgoodgoodbestword",
# ⁠ words = ["word","good","best","word"]
# Output: []
#
#
#
from collections import Counter
class Solution:
    def findSubstring(self, s, words):
        N, nwords = len(s), len(words)
        indexes = []
        if N == 0 or nwords == 0 : return indexes
        M = len(words[0])
        if N < M * nwords: return indexes

        # Assign a number to each word
        wordc = Counter(words)                            # counter for words
        wordi = {k:i for i,k in enumerate(wordc.keys())}  # map words to numbers
        table = {wordi[k]:v for k,v in wordc.items()}     # map numbers to count

        # map each position to a possible word
        last = N-M+1
        smapping = [wordi.get(s[i:i+M], -1) for i in range(0,last)]

        # print(smapping)

        # scan window
        for i in range(0, M):      # for all possible offsets
            count = nwords
            table2 = Counter(table)   # used for counting
            left = right = i
            while (right < last):
                el = smapping[right]
                if el != -1:
                    table2.update({el: -1})
                    if table2[el] >= 0:
                        count -= 1
                right += M
                # print("right", right, table2, count)
                while count == 0:
                    if right - left == M*nwords:
                        indexes.append(left)
                    el = smapping[left]
                    if el != -1:
                        table2.update({el: +1})
                        if table2[el] > 0:
                            count += 1
                    # print("left", left, table2, count)
                    left += M

        return indexes


test = True
if test:
    sol = Solution()
    case = [False]*1 + [True] + [False]*2
    if case[0]:
        # Example 1:
        s = "barfoothefoobarman"
        words = ["foo","bar"]
        # Output: [0,9]
        print(sol.findSubstring(s,words))
    if case[1]:
        # Example 2:
        s = "wordgoodgoodgoodbestword"
        words = ["word","good","best","word"]
        # Output: []
        print(sol.findSubstring(s,words))
