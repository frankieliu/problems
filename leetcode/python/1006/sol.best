
You never think of this, amazing O(1) solution

https://leetcode.com/problems/clumsy-factorial/discuss/252279

* Lang:    cpp
* Author:  Lisanaaa
* Votes:   83


As defined in the description of problem, `Additionally, the division that we use is floor division such that 10 * 9 / 8 equals 11. `

We can easily observe below:

```
5 * 4 / 3 = 6
6 * 5 / 4 = 7
10 * 9 / 8 = 11
...
...
...

```

so we can get this formula: `i * (i-1) / (i-2) = i+1` when `i >= 5`


we can simplify our computation as below:

```
    i * (i-1) / (i-2) + (i-3) - (i-4) * (i-5) / (i-6) + (i-7) - (i-8) * .... + rest elments
=   (i+1) + "(i-3)" - "(i-4) * (i-5) / (i-6)" + "(i-7)" - "(i-8) * " .... + rest elments
=   (i+1) + "(i-3) - (i-3)" + "(i-7) - (i-7)" +  ....  + rest elments
=   (i+1) + rest elments
```

we can call each 4 numbers a `chunk`, so from `N // 4` we can know how many chunks there are, then the rest `0`, `1`, `2` and `3` elements will influence our final result.


1. when `0` element left: final result is `(i+1) + ... + 5 - (4*3/2) + 1`, which is `i+1`
2. when `1` element left: final result is `(i+1) + ... + 6 - (5*4/3) + 2 - 1 `, which is `i+2`
3. when `2` element left: final result is `(i+1) + ... + 7 - (6*5/4) + 3 - 2 * 1 `, which is `i+2`
3. when `3` element left: final result is `(i+1) + ... + 8 - (7*6/5) + 4 - 3 * 2 / 1 `, which is `i-1`

After consider the corner case, we can arrive at the solution:

```
class Solution:
    def clumsy(self, N: int) -> int:
        if N <= 2:
            return N
        if N <= 4:
            return N + 3
        
        if (N - 4) % 4 == 0:
            return N + 1
        elif (N - 4) % 4 <= 2:
            return N + 2
        else:
            return N - 1
```



