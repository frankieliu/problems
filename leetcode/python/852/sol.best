
[C++/Java/Python] Better than Binary Search

https://leetcode.com/problems/peak-index-in-a-mountain-array/discuss/139848

* Lang:    cpp
* Author:  lee215
* Votes:   37

## Approach 1, index of max, O(N)

**C++:**
```
    int peakIndexInMountainArray(vector<int> A) {
       return max_element(A.begin(), A.end()) - A.begin();
    }
```

**Python:**
```
    def peakIndexInMountainArray(self, A):
        return A.index(max(A))
```

## Approach 2, For loop to find the first `A[i] > A[i + i]`, O(N)
**Java:**
```
    public int peakIndexInMountainArray(int[] A) {
        for (int i = 1; i + 1 < A.length; ++i) if (A[i] > A[i + 1]) return i;
        // for (int i = A.length - 1; i > 0; --i) if (A[i] > A[i - 1]) return i;
        return 0;
    }
```

**C++:**
```
    int peakIndexInMountainArray2(vector<int> A) {
        for (int i = 1; i + 1 < A.size(); ++i) if (A[i] > A[i + 1]) return i;
    }
```

## Approach 3, Binary search, O(logN)

**C++:**
```
    int peakIndexInMountainArray(vector<int> A) {
        int l = 0, r = A.size() - 1, mid;
        while (l < r) {
            mid = (l + r) / 2;
            if (A[mid] < A[mid + 1]) l = mid;
            else if (A[mid - 1] > A[mid]) r = mid;
            else return mid;
        }
    }
```

**Java:**
```
    public int peakIndexInMountainArray(int[] A) {
        int l = 0, r = A.length - 1, mid;
        while (l < r) {
            mid = (l + r) / 2;
            if (A[mid] < A[mid + 1]) l = mid;
            else if (A[mid - 1] > A[mid]) r = mid;
            else return mid;
        }
        return 0;
    }
```
**Python:**
```
    def peakIndexInMountainArray(self, A):
        l, r = 0, len(A) - 1
        while l < r:
            mid = (l + r) / 2
            if A[mid] < A[mid + 1]:
                l = mid
            elif A[mid - 1] > A[mid]:
                r = mid
            else:
                return mid
```

**Follow-up:**
Can you do faster than binary search?

## Approach 4, Golden-section search

It\'s gurentee only one peak, we can apply golden-section search.

```
    def peakIndexInMountainArray(self, A):
        def gold1(l, r):
            return l + int(round((r - l) * 0.382))

        def gold2(l, r):
            return l + int(round((r - l) * 0.618))
        l, r = 0, len(A) - 1
        x1, x2 = gold1(l, r), gold2(l, r)
        while x1 < x2:
            if A[x1] < A[x2]:
                l = x1
                x1 = x2
                x2 = gold1(x1, r)
            else:
                r = x2
                x2 = x1
                x1 = gold2(l, x2)
        return x1
```
