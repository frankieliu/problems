
1 line Ruby / Python

https://leetcode.com/problems/reverse-words-in-a-string-iii/discuss/101909

* Lang:    cpp
* Author:  StefanPochmann
* Votes:   42

**Ruby:**

Once again Ruby is really nice, it's super short and you can just write the steps from left to right. Split the string into words, reverse each word, then join them back together.
```
def reverse_words(s)
  s.split.map(&:reverse).join(" ")
end
```

**Python:**

Here I first reverse the order of the words and then reverse the entire string.

    def reverseWords(self, s):
        return ' '.join(s.split()[::-1])[::-1]

That's a bit shorter than the more obvious one:

    def reverseWords(self, s):
        return ' '.join(x[::-1] for x in s.split())

**Ruby again:**

That double reversal in Ruby:
```
def reverse_words(s)
  s.split.reverse.join(" ").reverse
end
```
**Python again:**

The double reversal is not just shorter but also faster. Trying both versions as well as the optimized obvious solution (using a list comprehension instead of a generator expression), five attempts each:
```
>>> from timeit import timeit
>>> setup = 's = "Let\\'s take LeetCode contest"'
>>> statements = ("' '.join(s.split()[::-1])[::-1]",
	          "' '.join(x[::-1] for x in s.split())",
	          "' '.join([x[::-1] for x in s.split()])")
>>> for stmt in statements:
        print ' '.join('%.2f' % timeit(stmt, setup) for _ in range(5)), 'seconds for:', stmt

0.79 0.78 0.80 0.82 0.79 seconds for: ' '.join(s.split()[::-1])[::-1]
2.10 2.14 2.08 2.06 2.13 seconds for: ' '.join(x[::-1] for x in s.split())
1.27 1.26 1.28 1.28 1.26 seconds for: ' '.join([x[::-1] for x in s.split()])
```
With many more words, the double reversal's advantage gets even bigger:
```
>>> setup = 's = "Let\\'s take LeetCode contest" * 1000'
>>> for stmt in statements:
        print ' '.join('%.2f' % timeit(stmt, setup, number=1000) for _ in range(5)), 'seconds for:', stmt

0.16 0.14 0.13 0.14 0.14 seconds for: ' '.join(s.split()[::-1])[::-1]
0.69 0.71 0.69 0.70 0.70 seconds for: ' '.join(x[::-1] for x in s.split())
0.63 0.68 0.63 0.64 0.64 seconds for: ' '.join([x[::-1] for x in s.split()])
```
