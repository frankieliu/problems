#
# @lc app=leetcode id=862 lang=python3
#
# [862] Shortest Subarray with Sum at Least K
#
# https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/description/
#
# algorithms
# Hard (21.48%)
# Total Accepted:    9.1K
# Total Submissions: 42.4K
# Testcase Example:  '[1]\n1'
#
# Return the length of the shortest, non-empty, contiguous subarray of A with
# sum at least K.
#
# If there is no non-empty subarray with sum at least K, return -1.
#
#
#
#
#
#
#
# Example 1:
#
#
# Input: A = [1], K = 1
# Output: 1
#
#
#
# Example 2:
#
#
# Input: A = [1,2], K = 4
# Output: -1
#
#
#
# Example 3:
#
#
# Input: A = [2,-1,2], K = 3
# Output: 3
#
#
#
#
# Note:
#
#
# 1 <= A.length <= 50000
# -10 ^ 5 <= A[i] <= 10 ^ 5
# 1 <= K <= 10 ^ 9
#
#
#
#
#
#
from collections import deque


class Solution:
    """
    sum = 5

    say prefix sum is 2 6 2 3 4 1 4 3

    dq (2,0)

    if 6 is greater than 2, then add to end
    (2,0) (6,1)  (makes this into an increasing sequence)

    look for potential solutions
    6-2 = 4 which doesn't satisfy

    next element is (2, 2)
    since 2 <= 2 and 6, might as well remove them

    dq (2,2)

    since there are no new element keep going

    dq (2,2) (3,3) (4,4) -> none of these actually satisfy sum condition

    (1,5) will basically globber everything, why can we clobber
    everything?  Because it will lead to a smaller distance with any new
    incoming elements in the array.

    In summary,
    1. Get a new element
    2. Remove all previously larger elements, because they don't matter
    3. And begin looking for the closest element that satisfy the condition

    """
    def shortestSubarray(self, A, k):
        N = len(A)
        sum = 0
        p = [0]  # prefix sum
        for a in A:
            sum += a
            p.append(sum)
        # print(p)
        dq = deque()
        res = N + 1
        for i, pi in enumerate(p):
            # remove bigger and equal elements than you
            #print("Before", dq)
            while dq and p[dq[-1]] >= pi:
                dq.pop()
            #print("After", dq)
            # note this will create a increasing size queue
            # tiny small SMALL big BIG huge HUGE

            # look for better and better solutions
            while dq and pi - p[dq[0]] >= k:
                res = min(res, i - dq.popleft())
            #print("After 1", dq)
            dq.append(i)
            #print("After 2", dq)
        return res if res < N+1 else -1


test = True
if test:
    sol = Solution()
    case = [False]*3 + [True] + [False]*3
    if case[0]:
        # Example 1:
        A = [1]
        K = 1
        # Output: 1
        print(sol.shortestSubarray(A, K))
    if case[1]:
        # Example 2:
        A = [1,2]
        K = 4
        # Output: -1
        print(sol.shortestSubarray(A, K))
    if case[2]:
        # Example 3:
        A = [2,-1,2]
        K = 3
        # Output: 3
        print(sol.shortestSubarray(A, K))
    if case[3]:
        # Example 4:
        A = [77,19,35,10,-14]
        K = 19
        # Output: 1
        print(sol.shortestSubarray(A, K))
