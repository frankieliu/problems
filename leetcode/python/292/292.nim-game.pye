#
# @lc app=leetcode id=292 lang=python3
#
# [292] Nim Game
#
# https://leetcode.com/problems/nim-game/description/
#
# algorithms
# Easy (55.43%)
# Total Accepted:    177.2K
# Total Submissions: 319.6K
# Testcase Example:  '4'
#
# You are playing the following Nim Game with your friend: There is a heap of
# stones on the table, each time one of you take turns to remove 1 to 3 stones.
# The one who removes the last stone will be the winner. You will take the
# first turn to remove the stones.
#
# Both of you are very clever and have optimal strategies for the game. Write a
# function to determine whether you can win the game given the number of stones
# in the heap.
#
# Example:
#
#
# Input: 4
# Output: false
# Explanation: If there are 4 stones in the heap, then you will never win the
# game;
# No matter 1, 2, or 3 stones you remove, the last stone will always
# be
# removed by your friend.
#


class Solution:
    def canWinNim(self, n):
        return not(n % 4 == 0)

    def canWinNim1(self, n):
        """
        :type n: int
        :rtype: bool
        """
        p1 = True
        p2 = False

        memo = {}
        nmod = 7
        memo[(3, p1)] = True
        memo[(2, p1)] = True
        memo[(1, p1)] = True
        memo[(3, p2)] = False
        memo[(2, p2)] = False
        memo[(1, p2)] = False
        for k in range(4, n+1):
            memo[((k % nmod), p1)] = any(memo[((k-x) % nmod, p2)]
                                         for x in [1, 2, 3])
            memo[((k % nmod), p2)] = all(memo[((k-x) % nmod, p1)]
                                         for x in [1, 2, 3])
        return memo[(n % nmod, p1)]

    def canWinNim0(self, n):
        """
        :type n: int
        :rtype: bool
        """
        p1 = True
        p2 = False

        memo = {}

        def minimax(stones, pl):
            if stones <= 3:
                if pl == p1:
                    return True
                else:
                    return False
            if (stones, pl) in memo:
                return memo[(stones, pl)]
            if pl == p1:
                tmp = any(minimax(stones - x, p2)
                          for x in [1, 2, 3])
            else:
                tmp = all(minimax(stones - x, p1)
                          for x in [1, 2, 3])
            memo[(stones, pl)] = tmp
            return tmp

        return minimax(n, p1)


test = True
if test:
    s = Solution()
    # print(s.canWinNim(1348820612))
    for x in range(1, 10):
        print(s.canWinNim0(x), s.canWinNim(x))
