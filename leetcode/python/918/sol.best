
One Pass

https://leetcode.com/problems/maximum-sum-circular-subarray/discuss/178422

* Lang:    cpp
* Author:  lee215
* Votes:   198

## **Intuition**
I guess you know how to solve max subarray sum (without circular).
If not, you can have a reference here: 53. Maximum Subarray

<br>

## **Explanation**
So there are two case.
1. The first is that the subarray take only a middle part, and we know how to find the max subarray sum.
2. The second is that the subarray take a part of head array and a part of tail array.
We can transfer this case to the first one.
The maximum result equals to the total sum minus the minimum subarray sum.

<br>

Here is a diagram by @motorix:
![image](https://assets.leetcode.com/users/motorix/image_1538888300.png)

So the max subarray circular sum equals to
`max(the max subarray sum, the total sum - the min subarray sum)`

<br>

## **Corner case**
Just one to pay attention: 
If all numbers are negative, `maxSum = max(A)` and `minSum = sum(A)`. 
In this case, `max(maxSum, total - minSum) = 0`, which means the sum of an empty subarray.
According to the deacription, We need to return the `max(A)`, instead of sum of am empty subarray. 
So we return the `maxSum` to handle this corner case.
<br>

## **Complexity**
One pass, time `O(N)`
No extra space, space `O(1)`
<br>

**C++:**
```
    int maxSubarraySumCircular(vector<int>& A) {
        int total = 0, maxSum = -30000, curMax = 0, minSum = 30000, curMin = 0;
        for (int a : A) {
            curMax = max(curMax + a, a);
            maxSum = max(maxSum, curMax);
            curMin = min(curMin + a, a);
            minSum = min(minSum, curMin);
            total += a;
        }
        return maxSum > 0 ? max(maxSum, total - minSum) : maxSum;
    }
```

**Java:**
```
    public int maxSubarraySumCircular(int[] A) {
        int total = 0, maxSum = -30000, curMax = 0, minSum = 30000, curMin = 0;
        for (int a : A) {
            curMax = Math.max(curMax + a, a);
            maxSum = Math.max(maxSum, curMax);
            curMin = Math.min(curMin + a, a);
            minSum = Math.min(minSum, curMin);
            total += a;
        }
        return maxSum > 0 ? Math.max(maxSum, total - minSum) : maxSum;
    }
```

**Python:**
```
    def maxSubarraySumCircular(self, A):
        total, maxSum, curMax, minSum, curMin = 0, -float(\'inf\'), 0, float(\'inf\'), 0
        for a in A:
            curMax = max(curMax + a, a)
            maxSum = max(maxSum, curMax)
            curMin = min(curMin + a, a)
            minSum = min(minSum, curMin)
            total += a
        return max(maxSum, total - minSum) if maxSum > 0 else maxSum
```

