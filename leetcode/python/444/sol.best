
Very short solution with explanation

https://leetcode.com/problems/sequence-reconstruction/discuss/92574

* Lang:    cpp
* Author:  dettier
* Votes:   69


For `org` to be uniquely reconstructible from `seqs` we need to satisfy 2 conditions:
1. Every sequence in `seqs` should be a subsequence in `org`. This part is obvious.
2. Every 2 consecutive elements in `org` should be consecutive elements in some sequence from `seqs`. Why is that? Well, suppose condition 1 is satisfied. Then for 2 any consecutive elements `x` and `y` in `org` we have 2 options.
   * We have both `x`and `y` in some sequence from `seqs`. Then (as condition 1 is satisfied) they must be consequtive elements in this sequence.
   * There is no sequence in `seqs` that contains both `x` and `y`. In this case we cannot uniquely reconstruct `org` from `seqs` as sequence with `x` and `y` switched would also be a valid original sequence for `seqs`.

So this are 2 necessary criterions. It is pretty easy to see that this are also sufficient criterions for `org` to be uniquely reconstructible (there is only 1 way to reconstruct sequence when we know that condition 2 is satisfied).

To implement this idea I have `idxs` hash that maps item to its index in `org` sequence to check condition 1. And I have `pairs` set that holds all consequitive element pairs for sequences from `seqs` to check condition 2 (I also consider first elements to be paired with previous `undefined` elements, it is necessary to check this).

```
var sequenceReconstruction = function(org, seqs) {
    const pairs = {};
    const idxs = {};
    
    for (let i = 0; i < org.length; i++)
        idxs[org[i]] = i;

    for (let j = 0; j < seqs.length; j++) {
        const s = seqs[j];
        for (let i = 0; i < s.length; i++) {
            if (idxs[s[i]] == null)
                return false;
            if (i > 0 && idxs[s[i - 1]] >= idxs[s[i]])
                return false;
            pairs[`${s[i - 1]}_${s[i]}`] = 1;
        }
    }

    for (let i = 0; i < org.length; i++)
        if (pairs[`${org[i - 1]}_${org[i]}`] == null)
            return false;

    return true;
};
```
