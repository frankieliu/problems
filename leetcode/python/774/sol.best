
[C++/Java/Python] Binary Search 

https://leetcode.com/problems/minimize-max-distance-to-gas-station/discuss/113633

* Lang:    cpp
* Author:  lee215
* Votes:   72

**Why did I use s binary search?** 
In fact there are some similar problems on Leetcode so that is part of experience.
Secondly, I got a hint from "Answers within 10^-6 of the true value will be accepted as correct.". The first solution I tried was binary search.
Because binary search may not find exact value but it can approach the true answer.

**Explanation of solution**
Now we are using binary search to find the smallest possible value of D.
I initilze ```left = 0``` and ```right = the distance between the first and the last station```
```count``` is the number of gas station we need to make it possible.
```if count > K```, it means ```mid``` is too small to realize using only K more stations.
```if count <= K```, it means ```mid``` is possible and we can continue to find a bigger one.
When ```left + 1e-6 >= right```, it means the answer within 10^-6 of the true value and it will be accepted. 

**Time complexity**:
O(NlogM), where N is station length and M is st[N - 1] - st[0]



C++
```
double minmaxGasDist(vector<int>& st, int K) {
        int count, N = st.size();
        double left = 0, right = st[N - 1] - st[0], mid;
        while (left + 1e-6 < right) {
            mid = (left + right) / 2;
            count = 0;
            for (int i = 0; i < N - 1; ++i)
                count += ceil((st[i + 1] - st[i]) / mid) - 1;
            if (count > K) left = mid;
            else right = mid;
        }
        return right;
    }
```

Java:
```
public double minmaxGasDist(int[] st, int K) {
        int count, N = st.length;
        double left = 0, right = st[N - 1] - st[0], mid;

        while (left +1e-6 < right) {
            mid = (left + right) / 2;
            count = 0;
            for (int i = 0; i < N - 1; ++i)
                count += Math.ceil((st[i + 1] - st[i]) / mid) - 1;
            if (count > K) left = mid;
            else right = mid;
        }
        return right;
    }
```

Python:
```
def minmaxGasDist(self, st, K):
        left, right = 1e-6, st[-1] - st[0]
        while left + 1e-6 < right:
            mid = (left + right) / 2
            count = 0
            for a, b in zip(st, st[1:]):
                count += math.ceil((b - a) / mid) - 1
            if count > K:
                left = mid
            else:
                right = mid
        return right
