#
# @lc app=leetcode id=785 lang=python3
#
# [785] Is Graph Bipartite?
#
# https://leetcode.com/problems/is-graph-bipartite/description/
#
# algorithms
# Medium (41.91%)
# Total Accepted:    31.3K
# Total Submissions: 74.6K
# Testcase Example:  '[[1,3],[0,2],[1,3],[0,2]]'
#
# Given an undirected graph, return true if and only if it is bipartite.
#
# Recall that a graph is bipartite if we can split it's set of nodes into two
# independent subsets A and B such that every edge in the graph has one node in
# A and another node in B.
#
# The graph is given in the following form: graph[i] is a list of indexes j for
# which the edge between nodes i and j exists.  Each node is an integer between
# 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i]
# does not contain i, and it doesn't contain any element twice.
#
#
# Example 1:
# Input: [[1,3], [0,2], [1,3], [0,2]]
# Output: true
# Explanation:
# The graph looks like this:
# 0----1
# |    |
# |    |
# 3----2
# We can divide the vertices into two groups: {0, 2} and {1, 3}.
#
#
#
# Example 2:
# Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
# Output: false
# Explanation:
# The graph looks like this:
# 0----1
# | \  |
# |  \ |
# 3----2
# We cannot find a way to divide the set of nodes into two independent
# subsets.
#
#
#
#
# Note:
#
#
# graph will have length in range [1, 100].
# graph[i] will contain integers in range [0, graph.length - 1].
# graph[i] will not contain i or duplicate values.
# The graph is undirected: if any element j is in graph[i], then i will be in
# graph[j].
#
#
#
from collections import defaultdict

class Solution:
    def isBipartite(self, g):
        if len(g) <= 1:
            return True
        v = set()
        c = defaultdict(lambda: 0)

        def dfs(n):
            for nei in g[n]:
                if nei in v:
                    if c[nei] == c[n]:
                        return False
                    else:
                        continue
                v.add(nei)
                c[nei] = -c[n]
                res = dfs(nei)
                if res is False:
                    return False
            return True

        res = True
        for i in range(0, len(g)):
            if i != 0 and i in v:
                continue
            print("visiting", i)
            v.add(i)
            c[i] = 1
            res = dfs(i)
            if res is False:
                return False
        return res


test = True
if test:
    sol = Solution()
    case = [False]*2 + [True] + [False]*2
    if case[0]:
        # Example 1:
        Input = [[1,3], [0,2], [1,3], [0,2]]
        # Output: true
        print(sol.isBipartite(Input))
    if case[1]:
        # Example 2:
        Input = [[1,2,3], [0,2], [0,1,3], [0,2]]
        # Output: false
        print(sol.isBipartite(Input))
    if case[2]:
        testcase = [[],[2,4,6],[1,4,8,9],[7,8],[1,2,8,9],[6,9],[1,5,7,8,9],[3,6,9],[2,3,4,6,9],[2,4,5,6,7,8]]
        # answer: false
        print(sol.isBipartite(testcase))
