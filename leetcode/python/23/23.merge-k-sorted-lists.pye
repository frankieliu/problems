#
# @lc app=leetcode id=23 lang=python3
#
# [23] Merge k Sorted Lists
#
# https://leetcode.com/problems/merge-k-sorted-lists/description/
#
# algorithms
# Hard (32.40%)
# Total Accepted:    326.9K
# Total Submissions: 1M
# Testcase Example:  '[[1,4,5],[1,3,4],[2,6]]'
#
# Merge k sorted linked lists and return it as one sorted list. Analyze and
# describe its complexity.
#
# Example:
#
#
# Input:
# [
# 1->4->5,
# 1->3->4,
# 2->6
# ]
# Output: 1->1->2->3->4->4->5->6
#
#
#
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

from heapq import *


class Solution:
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        heap = []

        dummy = ListNode(None)
        top = dummy
        next = [None] * len(lists)

        # put the head of each list into the heap
        for i, alist in enumerate(lists):
            if alist:
                # push the val and the node itself
                heappush(heap, [alist.val, i, alist])
                # save next elements
                next[i] = alist.next

        while heap:
            _, i, node = heappop(heap)
            if next[i]:
                heappush(heap, [next[i].val, i, next[i]])
                next[i] = next[i].next
            top.next =  node
            top = top.next

        return dummy.next



test = True
if test:
    class ListNode:
        def __init__(self, x):
            self.val = x
            self.next = None

        def __repr__(self):
            out = str(self.val)
            if self.next:
                out += "->"
                out += self.next.__repr__()
            return out


    def toListNode(s: str) -> ListNode:
        first = True
        for x in s.split("->"):
            if first:
                out = ListNode(int(x))
                cur = out
                first = False
            else:
                cur.next = ListNode(int(x))
                cur = cur.next
        return out

    s = Solution()
    case = [True, False]
    if case[0]:
        Input = [toListNode(x) for x in [
            "1->4->5",
            "1->3->4",
            "2->6"]]
        out = s.mergeKLists(Input)
        print(out)
    if case[1]:
        print(s.mergeKLists())
