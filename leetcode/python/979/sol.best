
[Java/C++/Python] Recursive Solution

https://leetcode.com/problems/distribute-coins-in-binary-tree/discuss/221930

* Lang:    cpp
* Author:  lee215
* Votes:   48

## Solution 1

Quite similar problem as this one 968.Binary Tree Cameras.
So I put this as the first solution.
Write a dfs helper, return the number of coins given to the parent.


**Java:**
```
    int res = 0;
    public int distributeCoins(TreeNode root) {
        dfs(root);
        return res;
    }

    public int dfs(TreeNode root) {
        if (root == null) return 0;
        int left = dfs(root.left), right = dfs(root.right);
        res += Math.abs(left) + Math.abs(right);
        return root.val + left + right - 1;
    }
```

**C++:**
```
    int res = 0;
    int distributeCoins(TreeNode* root) {
        dfs(root);
        return res;
    }
    int dfs(TreeNode* root) {
        if (!root) return 0;
        int left = dfs(root->left), right = dfs(root->right);
        res += abs(left) + abs(right);
        return root->val + left + right - 1;
    }
```

**Python:**
```
    res = 0
    def distributeCoins(self, root):
        def dfs(root):
            if not root: return 0
            left = dfs(root.left)
            right = dfs(root.right)
            self.res += abs(left) + abs(right)
            return root.val + left + right - 1
        dfs(root)
        return self.res
```

## Solution 2

As somebody may not like global variable,
here is the recursive version without helper.

**Java:**
```
    public int distributeCoins(TreeNode root) {
        int res = 0;
        if (root.left != null) {
            res += distributeCoins(root.left);
            root.val += root.left.val - 1;
            res += Math.abs(root.left.val - 1);
        }
        if (root.right != null) {
            res += distributeCoins(root.right);
            root.val += root.right.val - 1;
            res += Math.abs(root.right.val - 1);
        }
        return res;
    }
```

**C++:**
```
    int distributeCoins(TreeNode* root) {
        int res = 0;
        if (root->left) {
            res += distributeCoins(root->left);
            root->val += root->left->val - 1;
            res += abs(root->left->val - 1);
        }
        if (root->right) {
            res += distributeCoins(root->right);
            root->val += root->right->val - 1;
            res += abs(root->right->val - 1);
        }
        return res;
    }
```


## Solution 3

Give the parent node so we can move the coins to the parent directly.
**C++:**
```
    int distributeCoins(TreeNode* root, TreeNode* pre = NULL) {
        if (!root) return 0;
        int res = distributeCoins(root->left, root) + distributeCoins(root->right, root);
        if (pre) pre->val += root->val - 1;
        return res + abs(root->val - 1);
    }
```

**Python:**
```
    def distributeCoins(self, root, pre=None):
        if not root: return 0
        res = self.distributeCoins(root.left, root) + self.distributeCoins(root.right, root)
        if pre: pre.val += root.val - 1
        return res + abs(root.val - 1)
```
