
[Java/C++/Python] O(N) Solution

https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/discuss/252232

* Lang:    cpp
* Author:  lee215
* Votes:   37

## **Intuition**:
Find the left part and right part,
then recursively construct the tree.
<br>

## **Solution 1**:

**Complexity**:
Time: `O(HlogN)`

**Python:**
```
    def bstFromPreorder(self, A):
        if not A: return None
        root = TreeNode(A[0])
        i = bisect.bisect(A, A[0])
        root.left = self.bstFromPreorder(A[1:i])
        root.right = self.bstFromPreorder(A[i:])
        return root
```

# **Solution 2**

Give the function a bound the maximum number it will handle.
The left recursion will take the elements smaller than `node.val`
The right recursion will take the remaining elements smaller than `bound`


**Complexity**
`bstFromPreorder` is called exactly N times.
It\'s same as a preorder traversal.
Time: `O(N)`

**Java**
```
    int i = 0;
    public TreeNode bstFromPreorder(int[] A) {
        return bstFromPreorder(A, Integer.MAX_VALUE);
    }

    public TreeNode bstFromPreorder(int[] A, int bound) {
        if (i == A.length || A[i] > bound) return null;
        TreeNode root = new TreeNode(A[i++]);
        root.left = bstFromPreorder(A, root.val);
        root.right = bstFromPreorder(A, bound);
        return root;
    }
```

**C++**
```
    int i = 0;
    TreeNode* bstFromPreorder(vector<int>& A, int bound = INT_MAX) {
        if (i == A.size() || A[i] > bound) return NULL;
        TreeNode* root = new TreeNode(A[i++]);
        root->left = bstFromPreorder(A, root->val);
        root->right = bstFromPreorder(A, bound);
        return root;
    }
```

**Python**
```
    i = 0
    def bstFromPreorder(self, A, bound=float(\'inf\')):
        if self.i == len(A) or A[self.i] > bound:
            return None
        root = TreeNode(A[self.i])
        self.i += 1
        root.left = self.bstFromPreorder(A, root.val)
        root.right = self.bstFromPreorder(A, bound)
        return root
```
