
[Java] two one pass 7 liners - space O(n) and O(1), respectively

https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/discuss/181086

* Lang:    cpp
* Author:  rock
* Votes:   16


Loop through the input array.
1. if encounter \'(\', push \'(\' into stack;
2. otherwise, \')\', check if there is a matching \'(\' on top of stack; if no, increase the counter by 1; if yes, pop it out;
3. after the loop, count in the un-matched characters remaining in the stack.


Method 1: 
Time & space: O(n).
```
    public int minAddToMakeValid(String S) {
        Deque<Character> stk = new ArrayDeque<>();
        int count = 0;
        for (char c : S.toCharArray()) {
            if (c == \'(\') { stk.push(c); }
            else if (stk.isEmpty()) { ++count; }
            else { stk.pop(); }
        }
        return count + stk.size();
    }
```
or, make the above the code shorter:

```
    public int minAddToMakeValid(String S) {
        Deque<Character> stk = new ArrayDeque<>();
        for (char c : S.toCharArray()) {
            if (c == \')\' && !stk.isEmpty() && stk.peek() == \'(\') { stk.pop(); } // pop out matched pairs.
            else { stk.push(c); } // push in unmatched chars.
        }
        return stk.size();
    }
```
Method 2: 
Since there is only one kind of char, \'(\', in stack,only a counter will also work.
Time: O(n),  space: O(1).

```
    public int minAddToMakeValid(String S) {
        int count = 0, stk = 0;
        for (int i = 0; i < S.length(); ++i) {
            if (S.charAt(i) == \'(\') { ++stk; }
            else if (stk <= 0) { ++count; }
            else { --stk; }
        }
        return count + stk;
    }
```

