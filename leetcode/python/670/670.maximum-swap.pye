#
# @lc app=leetcode id=670 lang=python3
#
# [670] Maximum Swap
#
# https://leetcode.com/problems/maximum-swap/description/
#
# algorithms
# Medium (39.17%)
# Total Accepted:    32K
# Total Submissions: 81.8K
# Testcase Example:  '2736'
#
#
# Given a non-negative integer, you could swap two digits at most once to get
# the maximum valued number. Return the maximum valued number you could get.
#
#
# Example 1:
#
# Input: 2736
# Output: 7236
# Explanation: Swap the number 2 and the number 7.
#
#
#
# Example 2:
#
# Input: 9973
# Output: 9973
# Explanation: No swap.
#
#
#
#
# Note:
#
# The given number is in the range [0, 10^8]
#
#
#

from collections import Counter


class Solution:
    def maximumSwap(self, num):
        num_save = num
        n = []
        while num > 0:
            n.append(num % 10)
            num = num // 10
        n = list(reversed(n))
        # find a number on the left that is larger than you
        for i, el in enumerate(n):
            jmax, nmax = 0, 0
            for j in range(i+1, len(n)):
                if n[j] > n[i]:
                    if n[j] >= nmax:
                        nmax = n[j]
                        jmax = j
            if jmax != 0:
                n[i], n[jmax] = n[jmax], n[i]
                res = 0
                for el in n:
                    res = res * 10 + el
                return res
        return num_save


test = True
if test:
    sol = Solution()
    case = [False] * 0 + [True] + [False] * 2
    if case[0]:
        # Example 1:
        Input = 2736
        # Output: 7236
        print(sol.maximumSwap(Input))
    if case[1]:
        # Example 2:
        Input = 9973
        # Output: 9973
        print(sol.maximumSwap(Input))
