#
# @lc app=leetcode id=895 lang=python3
#
# [895] Maximum Frequency Stack
#
# https://leetcode.com/problems/maximum-frequency-stack/description/
#
# algorithms
# Hard (50.77%)
# Total Accepted:    6.4K
# Total Submissions: 12.7K
# Testcase Example:  '["FreqStack","push","push","push","push","push","push","pop","pop","pop","pop"]\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]'
#
# Implement FreqStack, a class which simulates the operation of a stack-like
# data structure.
#
# FreqStack has two functions:
#
#
# push(int x), which pushes an integer x onto the stack.
# pop(), which removes and returns the most frequent element in the
# stack.
#
# If there is a tie for most frequent element, the element closest to the top
# of the stack is removed and returned.
#
#
#
#
#
#
# Example 1:
#
#
# Input:
#
# ["FreqStack","push","push","push","push","push","push","pop","pop","pop","pop"],
# [[],[5],[7],[5],[7],[4],[5],[],[],[],[]]
# Output: [null,null,null,null,null,null,null,5,7,5,4]
# Explanation:
# After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to
# top.  Then:
#
# pop() -> returns 5, as 5 is the most frequent.
# The stack becomes [5,7,5,7,4].
#
# pop() -> returns 7, as 5 and 7 is the most frequent, but 7 is closest to the
# top.
# The stack becomes [5,7,5,4].
#
# pop() -> returns 5.
# The stack becomes [5,7,4].
#
# pop() -> returns 4.
# The stack becomes [5,7].
#
#
#
#
# Note:
#
#
# Calls to FreqStack.push(int x) will be such that 0 <= x <= 10^9.
# It is guaranteed that FreqStack.pop() won't be called if the stack has zero
# elements.
# The total number of FreqStack.push calls will not exceed 10000 in a single
# test case.
# The total number of FreqStack.pop calls will not exceed 10000 in a single
# test case.
# The total number of FreqStack.push and FreqStack.pop calls will not exceed
# 150000 across all test cases.
#
#
#
#
#
#
#
class FreqStack:

    def __init__(self):
        self.freq = collections.Counter()
        self.m = collections.defaultdict(list)
        self.maxf = 0

    def push(self, x):
        """
        When you push, you just increment the counter for that item in <freq>
        keep a track of the max frequency (used for poping)
        add the element to the map for that frequency

        - don't you need to remove the element from
          m[freq[x]-1]???

        - no because the same item inserted at freq[x]-1 should still be there
          when you pop, this is different from the LFU implementation
        """
        freq, m = self.freq, self.m
        freq[x] += 1
        self.maxf = max(self.maxf, freq[x])
        m[freq[x]].append(x)

    def pop(self):
        """
        When you pop, you take the element from the m[maxf] most recently added first
        and if it becomes empty we just point to the next m[maxf-1] dictionary element

        - we are guaranteed to have an element in m[maxf-1] since there was at least
          one item that belonged in the m[maxf] that came from m[maxf-1]
        """
        freq, m, maxf = self.freq, self.m, self.maxf
        x = m[maxf].pop()
        if not m[maxf]: self.maxf = maxf - 1
        freq[x] -= 1
        return x



# Your FreqStack object will be instantiated and called as such:
# obj = FreqStack()
# obj.push(x)
# param_2 = obj.pop()
