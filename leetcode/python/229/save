#
# @lc app=leetcode id=229 lang=python3
#
# [229] Majority Element II
#
# https://leetcode.com/problems/majority-element-ii/description/
#
# algorithms
# Medium (31.07%)
# Total Accepted:    90.5K
# Total Submissions: 291.4K
# Testcase Example:  '[3,2,3]'
#
# Given an integer array of size n, find all elements that appear more than ⌊
# n/3 ⌋ times.
#
# Note: The algorithm should run in linear time and in O(1) space.
#
# Example 1:
#
#
# Input: [3,2,3]
# Output: [3]
#
# Example 2:
#
#
# Input: [1,1,1,3,3,2,2,2]
# Output: [1,2]
#
#

from collections import defaultdict


class Solution:
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        if len(nums) <= 2:
            return list(set(nums))

        h = defaultdict(lambda: 0)
        h0 = defaultdict(lambda: 0)
        count = 0
        for el in nums:
            if len(h.keys()) == 3:
                h0 = h.copy()
                for k in h:
                    if h[k] == 1:
                        del h0[k]
                    else:
                        h0[k] -= 1
                h = h0.copy()
                count += 1
            h[el] += 1
        return [x for x in h if nums.count(x) > len(nums)//3]


test = True
if test:
    s = Solution()
    Input = [1,1,1,3,3,2,2,2]
    # Input = [3,2,3]
    Input = [1,2,3,4]
    print(list(s.majorityElement(Input)))
