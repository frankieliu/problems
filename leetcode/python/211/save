#
# @lc app=leetcode id=211 lang=python3
#
# [211] Add and Search Word - Data structure design
#
# https://leetcode.com/problems/add-and-search-word-data-structure-design/description/
#
# algorithms
# Medium (28.72%)
# Total Accepted:    101.4K
# Total Submissions: 353K
# Testcase Example:  '["WordDictionary","addWord","addWord","addWord","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]'
#
# Design a data structure that supports the following two operations:
#
#
# void addWord(word)
# bool search(word)
#
#
# search(word) can search a literal word or a regular expression string
# containing only letters a-z or .. A . means it can represent any one letter.
#
# Example:
#
#
# addWord("bad")
# addWord("dad")
# addWord("mad")
# search("pad") -> false
# search("bad") -> true
# search(".ad") -> true
# search("b..") -> true
#
#
# Note:
# You may assume that all words are consist of lowercase letters a-z.
#
# trie is a dictionary which has default elements which are trie's
# nice and recursive definition

from collections import defaultdict


def trie():
    return defaultdict(trie)


class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.t = trie()

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        tt = self.t
        for c in word:
            tt = tt[c]   # descend into the trie
        tt['$']  # defaultdict auto fills this

    def search(self, word):
        """Returns if the word is in the data structure. A word could
        contain the dot character '.' to represent any one letter.

        :type word: str
        :rtype: bool
        """
        return self.search_(self.t, word)

    def search_(self, t, w):
        if not w:
            return '$' in t
        return any(
            [self.search_(t[x], w[1:]) for x in t.keys()] if w[0] == '.' else
            [self.search_(t[w[0]], w[1:])])


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)

test = True
if test:
    s = WordDictionary()
    s.addWord("bad")
    s.addWord("dad")
    s.addWord("mad")
    print(s.search("pad"))
    print(s.search("bad"))
    print(s.search(".ad"))
    print(s.search("b.."))
