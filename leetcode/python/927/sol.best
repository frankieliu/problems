
[C++] O(n) time, O(1) space, 12 ms with explanation & comments

https://leetcode.com/problems/three-equal-parts/discuss/183922

* Lang:    cpp
* Author:  primeNumber
* Votes:   21

Algorithm:
	1) Count no. of 1\'s in the given array, say ```countNumberOfOnes```.
	2) If no 1 is found ie. ```countNumberOfOnes == 0```, just return ```{0,size-1}```
	3) If ``` countNumberOfOnes % 3 != 0``` , then we cannot partition the given array for sure. This is because, there is no way to put equal no. of 1\'s in any partition and hence, we will get different binary representations.
	4) Let\'s try to find if there is a valid partition possible now. We find the first 1 in the given array and represent it\'s position by ```start```.
	5) Also, we know that each partition must have ``` countNumberOfOnes/3 ``` (for same reason as given in step 3). Therefore, after finding the first 1, leave  ```k = countNumberOfOnes/3 ``` 1\'s for the first partition.
	6) Assign this position as ```mid``` that denotes the beginning of a possible second partition.
	7) Further leave ```k = countNumberOfOnes/3 ``` 1\'s for this partition and assign the beginning of last partition as ```end```
	8) Now, all we need to do is verify whether all the partitions have same values in them. This can be done by iterating through to the end of the array.
	9) If ```end``` doesn\'t reach the end of the array, we find a mismatch and hence, we need to return ```{-1, -1}```
	10) Otherwise, we have found our partition, return ```{start-1,mid}```

Time Complexity: ```O(n)```
Space Complexity: ```O(1)```

```
static int x=[](){ios::sync_with_stdio(false); cin.tie(NULL); return 0;}();

class Solution {
public:
    vector<int> threeEqualParts(vector<int>& A) {
	    // Count no of 1\'s in the given array
        int countNumberOfOnes = 0;
        for(int c: A)
            if(c == 1)                  
                countNumberOfOnes++;
								
	    // If no 1 is found, that means we can return ans as {0, size-1}
        if(countNumberOfOnes == 0)      
            return {0, A.size()-1};
						
        // If no of 1\'s is not a multiple of 3, then we can never find a possible partition since
        // there will be atkeast one partition that will have different no of 1\'s and hence
        // different binary representation
        // For example,
        // Given :
        // 0000110  110  110 
        //       |  |    |
        //       i       j
        // Total no of ones = 6
        // 0000110         110      110
        //     |           |        |
        //     start       mid      end
        // Match starting from first 1, and putting 2 more pointers by skipping k 1\'s
        
        if(countNumberOfOnes % 3 != 0)            
            return {-1, -1};
						
        // find size of each partition
        int k = countNumberOfOnes/3;
        int i;
        
        // find the first 1 in the array
        for(i=0;i<A.size(); i++)
            if(A[i] == 1)
                break;
        int start = i;
        
        // find (k+1)th 1 in the array
        int count1 = 0;
        for(i=0;i<A.size(); i++)
        {
            if(A[i] == 1)
                count1++;
            if(count1 == k + 1)
                break;
        }
        int mid = i;
        
        //find (2*k +1)th 1 in the array
        count1= 0;
        for(i=0;i<A.size(); i++)
        {
            if(A[i] == 1)
                count1++;
            if(count1 == 2*k + 1)
                break;
        }
        int end = i;
        
        // Match all values till the end of the array
        while(end< A.size() && A[start] == A[mid] && A[mid] == A[end])
        {
            start++; mid++; end++;
        }
        
        // Return appropriate values if all the values have matched till the end
        if(end == A.size()) 
            return {start-1, mid};
        
        // otherwise, no such indices found
        return {-1, -1};
    }
};

```
Code written during contest, may be optimized further. :-)
