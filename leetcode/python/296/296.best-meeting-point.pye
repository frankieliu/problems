#
# @lc app=leetcode id=296 lang=python3
#
# [296] Best Meeting Point
#
# https://leetcode.com/problems/best-meeting-point/description/
#
# algorithms
# Hard (54.29%)
# Total Accepted:    23K
# Total Submissions: 42.3K
# Testcase Example:  '[[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]'
#
# A group of two or more people wants to meet and minimize the total travel
# distance. You are given a 2D grid of values 0 or 1, where each 1 marks the
# home of someone in the group. The distance is calculated using Manhattan
# Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.
#
# Example:
#
#
# Input:
#
# 1 - 0 - 0 - 0 - 1
# |   |   |   |   |
# 0 - 0 - 0 - 0 - 0
# |   |   |   |   |
# 0 - 0 - 1 - 0 - 0
#
# Output: 6
#
# Explanation: Given three people living at (0,0), (0,4), and
# (2,2):
# The point (0,2) is an ideal meeting point, as the total travel
# distance
# of 2+2+2=6 is minimal. So return 6.
#
#
from typing import List


class Solution:
    def minTotalDistance(self, g: List[List[int]]) -> int:
        rows = [ir
                for ir, r in enumerate(g)
                for c in r
                if c == 1]
        cols = [ic
                for ic in range(0, len(g[0]))
                for ir in range(0, len(g))
                if g[ir][ic] == 1]
        row = rows[len(rows)//2]
        col = cols[len(cols)//2]
        return (sum(abs(x-row) for x in rows) +
                sum(abs(x-col) for x in cols))


test = True
if test:
    sol = Solution()
    case = [False]*0 + [True] + [False]*1
    if case[0]:
        # Example:
        g = [[1, 0, 0, 0, 1],
             [0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0]]
        # Output: 6
        print(sol.minTotalDistance(g))
