
[C++/Java/Python] DP solution

https://leetcode.com/problems/binary-trees-with-factors/discuss/125794

* Lang:    cpp
* Author:  lee215
* Votes:   30

Sort the list `A` at first.
DP equation:

`dp[i] = sum(dp[j] * dp[i / j])`
`res  = sum(dp[i])`
with `i, j, i / j` in the list `L`


C++
```
    int numFactoredBinarydps(vector<int>& A) {
        long res = 0, mod = pow(10, 9) + 7;
        sort(A.begin(), A.end());
        unordered_map<int, long> dp;
        for (int i = 0; i < A.size(); ++i) {
            dp[A[i]] = 1;
            for (int j = 0; j < i; ++j)
                if (A[i] % A[j] == 0 && dp.count(A[i] / A[j]) == 1)
                    dp[A[i]] = (dp[A[i]] + dp[A[j]] * dp[A[i] / A[j]]) % mod;
        }
        for (auto &it : dp) res = (res + it.second) % mod;
        return res;
    }
```
Java
```
    public int numFactoredBinarydps(int[] A) {
        long res = 0L, mod = (long) Math.pow(10, 9) + 7;
        Arrays.sort(A);
        HashMap<Integer, Long> dp = new HashMap<>();
        for (int i = 0; i < A.length; ++i) {
            dp.put(A[i], 1L);
            for (int j = 0; j < i; ++j)
                if (A[i] % A[j] == 0 && dp.containsKey(A[i] / A[j]))
                    dp.put(A[i], (dp.get(A[i]) + dp.get(A[j]) * dp.get(A[i] / A[j])) % mod);
        }
        for (long v : dp.values()) res = (res + v) % mod;
        return (int) res;
    }
```
Python
```
    def numBinarydps(self, A):
        A.sort()
        dp = {}
        for i in range(len(A)):
            dp[A[i]] = 1
            for j in range(i):
                if A[i] % A[j] == 0 and A[i] / A[j] in dp:
                    dp[A[i]] += dp[A[j]] * dp[A[i] / A[j]]
        return sum(dp.values()) % (10**9 + 7)
```

