#
# @lc app=leetcode id=42 lang=python3
#
# [42] Trapping Rain Water
#
# https://leetcode.com/problems/trapping-rain-water/description/
#
# algorithms
# Hard (41.33%)
# Total Accepted:    245.5K
# Total Submissions: 594.1K
# Testcase Example:  '[0,1,0,2,1,0,1,3,2,1,2,1]'
#
# Given n non-negative integers representing an elevation map where the width
# of each bar is 1, compute how much water it is able to trap after raining.
#
#
# The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In
# this case, 6 units of rain water (blue section) are being trapped. Thanks
# Marcos for contributing this image!
#
# Example:
#
#
# Input: [0,1,0,2,1,0,1,3,2,1,2,1]
# Output: 6
#
#


class Solution:
    def trap(self, h):
        return self.trap4(h)

    def trap4(self, h):
        """
        Similar to trap2, but just satisfy left and right and move on
        Keep track of leftmost and rightmost high ones
        1. For the smaller side keep moving in and adding water
        2. if you encounter something larger then
           starting filling from the other side
        """
        w = 0
        left = 0
        right = len(h)-1
        while left < right:
            if h[left] < h[right]:
                i = left + 1
                while h[i] < h[left] and i < right:
                    w += h[left]-h[i]
                    i += 1
                left = i
            else:
                i = right - 1
                while h[i] < h[right] and i > left:
                    w += h[right]-h[i]
                    i -= 1
                right = i
        return w

    def trap3(self, h):
        """
        Use a stack and if smaller than you then keep appending,
        otherwise if bigger than you start filling

        1. append the index

        2. fill horizontally along a level that can be filled

        3. height 3 ----------- height 4

           can fill height 3 stuff all the way to 4

        4. if you have other stuff in between they will be filled
           level by level
        """
        w = 0  # water to add

        s = []  # stack
        s.append(0)
        i = 1
        while s and i < len(h):
            while s and h[s[-1]] <= h[i]:  # squeeze out smaller than you
                if len(s) > 1:             # if there is a left bound
                    w += (i - s[-2] - 1) * (min(h[i],h[s[-2]])-h[s[-1]])
                s.pop()
            s.append(i)
            i += 1

        return w

    def trap2(self, h):
        """
        :type height: List[int]
        :rtype: int
        """
        lmax = [0]*len(h)
        cmax = 0
        for i in range(len(h)):
            if cmax < h[i]:
                cmax = h[i]
            lmax[i] = cmax
        rmax = [0]*len(h)
        cmax = 0
        for i in range(len(h)-1, -1, -1):
            if cmax < h[i]:
                cmax = h[i]
            rmax[i] = cmax

        t = 0
        for i in range(len(h)):
            t += min(lmax[i], rmax[i])-h[i]

        return t


test = True
if test:
    s = Solution()
    case = [True] * 1
    if case[0]:
        # Example:
        Input = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
        # Output: 6
        print(s.trap(Input))
