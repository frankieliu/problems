
[C++/Java/Python] One Pass, Real O(N)

https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/discuss/161268

* Lang:    cpp
* Author:  lee215
* Votes:   107

I see a lot of solution saying `O(N)`, but actually not.
If it takes already `O(N)` time to find left part and right right, it could not be `O(N)`.
If it is recursive solution, it should use a hashmap to reduce complexity, otherwise in most cases it has at least average `O(NlogN)`.

Here I share my iterative solution.
We will **preorder** generate TreeNodes, push them to `stack` and **postorder** pop them out.
1. Loop on `pre` array and construct node one by one.
2. `stack` save the current path of tree.
3. `node = new TreeNode(pre[i])`, if not left child, add node to the left. otherwise add it to the right.
4. If we meet a same value in the pre and post, it means we complete the construction for current subtree. We pop it from `stack`.

**Complexity**:
O(N) Time O(N) Space

**C++:**
```
    TreeNode* constructFromPrePost(vector<int> pre, vector<int> post) {
        vector<TreeNode*> s;
        s.push_back(new TreeNode(pre[0]));
        for (int i = 1, j = 0; i < pre.size(); ++i) {
            TreeNode* node = new TreeNode(pre[i]);
            while (s.back()->val == post[j])
                s.pop_back(), j++;
            if (s.back()->left == NULL) s.back()->left = node;
            else s.back()->right = node;
            s.push_back(node);
        }
        return s[0];
    }
```

**Java:**
```
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        Deque<TreeNode> s = new ArrayDeque<>();
        s.offer(new TreeNode(pre[0]));
        for (int i = 1, j = 0; i < pre.length; ++i) {
            TreeNode node = new TreeNode(pre[i]);
            while (s.getLast().val == post[j]) {
                s.pollLast(); j++;
            }
            if (s.getLast().left == null) s.getLast().left = node;
            else s.getLast().right = node;
            s.offer(node);
        }
        return s.getFirst();
    }
```
**Python:**
```
    def constructFromPrePost(self, pre, post):
        stack = [TreeNode(pre[0])]
        j = 0
        for v in pre[1:]:
            node = TreeNode(v)
            while stack[-1].val == post[j]:
                stack.pop()
                j += 1
            if not stack[-1].left:
                stack[-1].left = node
            else:
                stack[-1].right = node
            stack.append(node)
        return stack[0]
```

