#
# @lc app=leetcode id=440 lang=python3
#
# [440] K-th Smallest in Lexicographical Order
#
# https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/description/
#
# algorithms
# Hard (26.08%)
# Total Accepted:    7.5K
# Total Submissions: 28.7K
# Testcase Example:  '13\n2'
#
# Given integers n and k, find the lexicographically k-th smallest integer in
# the range from 1 to n.
#
# Note: 1 ≤ k ≤ n ≤ 10^9.
#
# Example:
#
# Input:
# n: 13   k: 2
#
# Output:
# 10
#
# Explanation:
# The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so
# the second smallest number is 10.
#
#
#
#
class Solution:
    def findKthNumber(self, n, k):
        """
        consider a trie like structure
        root
        1, 2, 3, 4, 5, 6 ....     depth = 1
        10 11 12 13 14 15 ....    depth = 2
        100, 102, 103, 104 ....   depth = 3

        say number is 340
        1 2
        j-i = 1
        10 20
        j-i = 10
        100 200
        j-i = 100
        1000

        2 3 = 1
        20 30 = 10
        200 300 = 100
        2000

        3 4 = 1
        30 40 = 10
        300 400 = 41!

        """

        def nsteps(nmax, i, j):
            steps = 0
            while i <= nmax:
                steps += min(nmax + 1, j) - i
                i*=10
                j*=10
            return steps

        node = 1   # at depth 1
        k -= 1
        while k > 0:
            steps = nsteps(n, node, node+1)
            if steps <= k:
                node += 1
                k -= steps
            else:
                node *= 10
                k -= 1
        return node


test = True
if test:
    sol = Solution()
    case = [False]*0 + [True] + [False]*1
    if case[0]:
        # Example:
        n = 13
        k = 2
        # Output: 10
        print(sol.findKthNumber(13,2))
