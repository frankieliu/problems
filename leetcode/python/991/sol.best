
[Java/C++/Python] Change Y to X in 1 Line

https://leetcode.com/problems/broken-calculator/discuss/234484

* Lang:    cpp
* Author:  lee215
* Votes:   63

## **Intuition**:

Considering how to change `Y` to `X`
Opertation 1: `Y = Y / 2` if `Y` is even
Opertation 2: `Y = Y + 1`
<br>

## **Explanation**:

Obviously,
If `Y <= X`, we won\'t do `Y / 2` anymore.
We will increase `Y` until it equals to `X`

So before that, while `Y > X`, we\'ll keep reducing `Y`, until it\'s smaller than `X`.
If `Y` is odd, we can do only `Y = Y + 1`
If `Y` is even, if we plus 1 to `Y`, then `Y` is odd, we need to plus another 1.
And because `(Y + 1 + 1) / 2 = (Y / 2) + 1`, 3 operations are more than 2.
We always choose `Y / 2` if `Y` is even. 
<br>

## **Why it\'s right**
Actually, what we do is:
If `Y` is even, `Y = Y / 2`
If `Y` is odd, `Y = (Y + 1) / 2`

We reduce `Y` with least possible operations, until it\'s smaller than `X`.

And we know that, we won\'t do `Y + 1` twice in a row.
Becasue we will always end with an operation `Y / 2`.

2N times `Y + 1` and once `Y / 2` needs 2N + 1 operations.
Once `Y / 2` first and N times `Y + 1` will end up with same result, but needs only N + 1 operations.
<br>

## **Time complexity**
We do `Y/2` all the way until it\'s smaller than `X`,
time complexity is `O(log(Y/X))`.
<br>

**Java/C++**
```
        int res = 0;
        while (Y > X) {
            Y = Y % 2 > 0 ? Y + 1 : Y / 2;
            res++;
        }
        return res + X - Y;
```

**Python:**
```
    def brokenCalc(self, X, Y):
        res = 0
        while X < Y:
            res += Y % 2 + 1
            Y = (Y + 1) / 2
        return res + X - Y
```

<br>

## **1 line Recursive Solution**
**Java/C++**
```
        return X >= Y ? X - Y : 1 + Y % 2 + brokenCalc(X, (Y + 1) / 2);
```

**Python:**
```
        return X - Y if X >= Y else 1 + Y % 2 + self.brokenCalc(X, (Y + 1) / 2)
```

<br>

## **FAQ, Updated on 2019-02-11**

**Q: Can we try to change X to Y?**
**A:** Yes we can.

**Java**
```
    public int brokenCalc(int X, int Y) {
        int multiple = 1, res = 0;
        while (X * multiple < Y) {
            multiple <<= 1;
            res++;
        }
        int diff = X * multiple - Y;
        while (diff > 0) {  
            res += diff / multiple;
            diff -= diff / multiple * multiple;
            multiple >>= 1;
        }
        return res;
    }
```
**C++**
```
    int brokenCalc(int X, int Y) {
        int multiple = 1, res = 0;
        while (X * multiple < Y)
            multiple <<= 1, res++;
        int diff = X * multiple - Y;
        while (diff > 0) {  
            res += diff / multiple;
            diff -= diff / multiple * multiple;
            multiple >>= 1;
        }
        return res;
    }
```

**Python:**
```
    def brokenCalc(self, X, Y):
        multiple = 1
        res = 0
        while X * multiple < Y:
            multiple *= 2
            res += 1
        diff = X * multiple - Y
        while diff:
            res += diff / multiple
            diff -= diff / multiple * multiple
            multiple /= 2
        return res
```
