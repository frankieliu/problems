#
# @lc app=leetcode id=991 lang=python3
#
# [991] Broken Calculator
#
# https://leetcode.com/problems/broken-calculator/description/
#
# algorithms
# Medium (38.65%)
# Total Accepted:    4.6K
# Total Submissions: 11.9K
# Testcase Example:  '2\n3'
#
# On a broken calculator that has a number showing on its display, we can
# perform two operations:
#
#
# Double: Multiply the number on the display by 2, or;
# Decrement: Subtract 1 from the number on the display.
#
#
# Initially, the calculator is displaying the number X.
#
# Return the minimum number of operations needed to display the number Y.
#
#
#
# Example 1:
#
#
# Input: X = 2, Y = 3
# Output: 2
# Explanation: Use double operation and then decrement operation {2 -> 4 ->
# 3}.
#
#
# Example 2:
#
#
# Input: X = 5, Y = 8
# Output: 2
# Explanation: Use decrement and then double {5 -> 4 -> 8}.
#
#
# Example 3:
#
#
# Input: X = 3, Y = 10
# Output: 3
# Explanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.
#
#
# Example 4:
#
#
# Input: X = 1024, Y = 1
# Output: 1023
# Explanation: Use decrement operations 1023 times.
#
#
#
#
# Note:
#
#
# 1 <= X <= 10^9
# 1 <= Y <= 10^9
#
#
class Solution:
    def brokenCalc(self, X: int, Y: int) -> int:
        """
        Consider
        x and 2x-1
        better to multiply
        """
        if X > Y:
            return X - Y
        # find the number of required multiplications
        x = X
        times = 0
        while x < Y:
            #print(x)
            x = 2 * x
            times += 1
        # for each of these times, decide whether or not to subtract a 1
        rest = x - Y
        # greatest number of 1s
        print(times, (1<<(times+1))-1, rest)
        gno = (1<<(times+1))-1
        if gno < rest:
            pow = 2**times
            while pow > 0:
                quo = rest // pow
                times += quo
                rest = rest - pow * quo
                pow >>= 1
            # times += X-(Y+odd)//2+odd
        else:
            while rest > 0:
                if rest & 1:
                    times += 1
                rest >>= 1
        return times


test = True
if test:
    sol = Solution()
    case = [False] * 5 + [True] + [False] * 4
    if case[0]:
        # Example 1:
        X = 2
        Y = 3
        # Output: 2
        print(sol.brokenCalc(X, Y))
    if case[1]:
        # Example 2:
        X = 5
        Y = 8
        # Output: 2
        print(sol.brokenCalc(X, Y))
    if case[2]:
        # Example 3:
        X = 3
        Y = 100
        # Output: 3
        print(sol.brokenCalc(X, Y))
    if case[3]:
        # Example 4:
        X = 1024
        Y = 1
        # Output: 1023
        print(sol.brokenCalc(X, Y))
    if case[4]:
        X = 68
        Y = 71
        print(sol.brokenCalc(X, Y))
    if case[5]:
        X = 363
        Y = 811
        print(sol.brokenCalc(X, Y))
