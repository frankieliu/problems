#
# @lc app=leetcode id=4 lang=python3
#
# [4] Median of Two Sorted Arrays
#
# https://leetcode.com/problems/median-of-two-sorted-arrays/description/
#
# algorithms
# Hard (25.24%)
# Total Accepted:    370.4K
# Total Submissions: 1.5M
# Testcase Example:  '[1,3]\n[2]'
#
# There are two sorted arrays nums1 and nums2 of size m and n respectively.
#
# Find the median of the two sorted arrays. The overall run time complexity
# should be O(log (m+n)).
#
# You may assume nums1 and nums2Â cannot be both empty.
#
# Example 1:
# Input: nums1 = [1, 3], nums2 = [2]
# Output: 2.0
#
#
# Example 2:
# Input: nums1 = [1, 2], nums2 = [3, 4]
# Output: (2 + 3)/2 = 2.5
#
#
#


class Solution:
    def findMedianSortedArrays(self, a, b):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """

        """
        Notes:
        1. put the smaller -> a and bigger -> b

        2. consider a "cut" in a, cut == 0
           means all a[0] a[1] on the right

        3. *** given a cut in a, also defines a cut in b ***
           since the mid point is at (len(a) + len(b)) // 2

           if you use mid == (len(a) + len(b) + 1)//2 this
           will put the mid element on left hand side for odd
           total

        4. the other hard part is the edge conditions
           i : cut in a
           j : cut in b

           a[i-1] | a[i]
           b[j-1] | b[j]

           do a quick check if a[i-1] < b[j] can a[i] < b[j-1]? No!

           so it is a simple a[i-1] < b[j] and b[j-1] < a[i], just take
           care of edge conditions:

           need a[i-1] < b[j]  (good for i > 0) (if fail then go left)
                b[j-1] < a[i]  (goot for i < m) (if fail then go right)

        5. finding the median in the odd case and even case

           then need to find the bigger of a[i-1] and b[j-1]

           max(a[i-1], b[j-1]) if j==0, then a[i-1], if i==0, then b[j-1]

           min(a[i],b[j])      if j==lb, then a[i], if i==la, then b[j]

           (left_max + right_min) / 2


        """
        la, lb = len(a), len(b)
        if la > lb:
            a, la, b, lb = b, lb, a, la

        # puts the middle element on the left if
        # la + lb is odd
        mid = (la + lb + 1) // 2

        # choose a cut in a call it i
        # len(a_left) = i
        # len(a_right) = la - i
        #
        # since you have to have total of mid elements in total_left
        # this defines a cut j in b
        # j = mid - i

        # search for a solution
        imin, imax = 0, la

        # conditions:
        # a_left a[i-1],   a[i] a_right
        # b_left b[j-1],   b[j] b_right
        # check:
        # a0 a1
        # b0 b1
        #
        #         mid = 2
        # i = 0         -> no a elements on the left
        # j = mid-i = 2 -> this is the correct j cut  (two b elements on the left)
        #
        # i = 2         -> two a elements on the left
        # j = 0         -> this is the correct j cut  (no b elements on the left)
        #
        # a[i-2] a[i-1] | a[i] a[i+1]
        # b[j-2] b[j-1] | b[j] b[j+1]
        #
        # You must have a[i-1] < b[j] and b[j-1] < a[i]

        while imin <= imax:
            i = (imin + imax) // 2
            j = mid - i
            # conditions
            if i < la and b[j-1] > a[i]:   # search right
                imin = i+1
            elif i > 0 and b[j] < a[i-1]: # search left
                imax = i-1
            else:
                if i == 0: # no a_left
                    maxleft = b[j-1]
                elif j == 0: # no b_left
                    maxleft = a[i-1]  # does this ever happen?
                else:
                    maxleft = max(a[i-1], b[j-1])
                if (la+lb) % 2 == 1:
                    return maxleft

                if i == la:  # a on left only
                    minright = b[j]
                elif j == lb: # b on left
                    minright = a[i]   # does this ever happen?
                else:
                    minright = min(b[j], a[i])

                return (maxleft + minright)/2.


test = True
if test:
    s = Solution()
    case = [True] * 2
    if case[0]:
        # Example 1:
        nums1 = [1, 3]
        nums2 = [2]
        # Output: 2.0
        print(s.findMedianSortedArrays(nums1, nums2))
    if case[1]:
        # Example 2:
        nums1 = [1, 2]
        nums2 = [3, 4]
        # Output: (2 + 3)/2 = 2.5
        print(s.findMedianSortedArrays(nums1, nums2))
