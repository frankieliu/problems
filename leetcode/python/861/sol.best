
[C++/Java/Python] Easy and Concise

https://leetcode.com/problems/score-after-flipping-matrix/discuss/143722

* Lang:    cpp
* Author:  lee215
* Votes:   74

Assume `A` is `M * N`.
1. `A[i][0]` is worth `1 << (N - 1)` points, more than the sum of (`A[i][1] + .. + A[i][N-1]`).
We need to toggle all `A[i][0]` to `1`, here I toggle all lines for `A[i][0] = 0`.
2. `A[i][j]` is worth `1 << (N - 1 - j)`
For every col, I count the current number of `1`s.
After step 1, `A[i][j]` becomes `1` if `A[i][j] == A[i][0]`.
if `M - cur > cur`, we can toggle this column to get more `1`s.
`max(M, M - cur)` will be the maximum number of `1`s that we can get.

**Time Complexity**:
O(MN)

**C++:**
```
    int matrixScore(vector<vector<int>> A) {
        int M = A.size(), N = A[0].size(), res = (1 << (N - 1)) * M;
        for (int j = 1; j < N; j++) {
            int cur = 0;
            for (int i = 0; i < M; i++) cur += A[i][j] == A[i][0];
            res += max(cur, M - cur) * (1 << (N - j - 1));
        }
        return res;
    }
```

**Java:**
```
class Solution {
    public int matrixScore(int[][] A) {
        int M = A.length, N = A[0].length, res = (1 << (N - 1)) * M;
        for (int j = 1; j < N; j++) {
            int cur = 0;
            for (int i = 0; i < M; i++) cur += A[i][j] == A[i][0] ? 1 : 0;
            res += Math.max(cur, M - cur) * (1 << (N - j - 1));
        }
        return res;
    }
}
```
**Python:**
```
    def matrixScore(self, A):
        M, N = len(A), len(A[0])
        res = (1 << N - 1) * M
        for j in range(1, N):
            cur = sum(A[i][j] == A[i][0] for i in range(M))
            res += max(cur, M - cur) * (1 << N - 1 - j)
        return res
```
