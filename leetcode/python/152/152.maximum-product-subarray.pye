#
# @lc app=leetcode id=152 lang=python3
#
# [152] Maximum Product Subarray
#
# https://leetcode.com/problems/maximum-product-subarray/description/
#
# algorithms
# Medium (28.35%)
# Total Accepted:    184.5K
# Total Submissions: 650.8K
# Testcase Example:  '[2,3,-2,4]'
#
# Given an integer array nums, find the contiguous subarray within an array
# (containing at least one number) which has the largest product.
#
# Example 1:
#
#
# Input: [2,3,-2,4]
# Output: 6
# Explanation: [2,3] has the largest product 6.
#
#
# Example 2:
#
#
# Input: [-2,0,-1]
# Output: 0
# Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
#
#
class Solution:
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0:
            return 0
        if len(nums) == 1:
            return nums[0]

        # scan both left and right
        curProd = nums[0]
        maxProd = nums[0]
        for i in range(1, len(nums)):
            el = nums[i]
            if curProd == 0:
                curProd = el
            else:
                curProd *= el
            if curProd > maxProd:
                maxProd = curProd
            print(el, curProd, maxProd)

        curProd = nums[-1]
        if curProd > maxProd:
            maxProd = curProd
        for i in range(len(nums)-2, -1, -1):
            el = nums[i]
            if curProd == 0:
                curProd = el
            else:
                curProd *= el
            if curProd > maxProd:
                maxProd = curProd

        return maxProd

test = False
if test:
    s = Solution()
    if False:
        print(s.maxProduct([2,3,-2,4]))
        # Output: 6
        print(s.maxProduct([-2,0,-1]))
        # Output: 0
    print(s.maxProduct([-3,0,1,-2]))
    # Output: 1
