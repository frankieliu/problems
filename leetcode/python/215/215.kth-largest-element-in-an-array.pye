#
# @lc app=leetcode id=215 lang=python3
#
# [215] Kth Largest Element in an Array
#
# https://leetcode.com/problems/kth-largest-element-in-an-array/description/
#
# algorithms
# Medium (45.32%)
# Total Accepted:    310.5K
# Total Submissions: 685.2K
# Testcase Example:  '[3,2,1,5,6,4]\n2'
#
# Find the kth largest element in an unsorted array. Note that it is the kth
# largest element in the sorted order, not the kth distinct element.
#
# Example 1:
#
#
# Input: [3,2,1,5,6,4] and k = 2
# Output: 5
#
#
# Example 2:
#
#
# Input: [3,2,3,1,2,4,5,5,6] and k = 4
# Output: 4
#
# Note:
# You may assume k is always valid, 1 ≤ k ≤ array's length.
#
#
class Solution:
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        if len(nums) == 1:
            return nums[0]

        i = 0
        j = len(nums)-1
        c = partition(nums, i, j, i)

        while True:
            # print(c, nums)
            if c == len(nums) - k:
                return nums[c]
            elif c < len(nums) - k:
                i = c+1
                c = partition(nums, i, j, i)
            else:
                j = c-1
                c = partition(nums, i, j, i)


def partition(n, i, j, k):
    # put pivot in the last element
    # print("partition", n, ((i, j), k), (n[k], n[j]))
    n[j], n[k] = n[k], n[j]
    k = j
    j = k-1
    while True:
        if i > j:
            n[i], n[k] = n[k], n[i]
            break
            # n[i], n[k] = n[k], n[i]
        if n[i] <= n[k]:
            i += 1
        else:
            n[j], n[i] = n[i], n[j]
            j -= 1
    # print("partition", n, i)
    return i


test = True
if test:
    s = Solution()
    Input = ([3,2,1,5,6,4], 2)
    # print(s.findKthLargest(Input[0], Input[1]))
    # Output: 5

    Input = ([3,2,3,1,2,4,5,5,6], 4)
    # print(s.findKthLargest(Input[0], Input[1]))
    # Output: 4

    Input = ([2,1], 2)
    print(s.findKthLargest(Input[0], Input[1]))
    # Output: 1
