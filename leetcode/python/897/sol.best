
[C++/Java/Python] Self-Explained, 5-line, O(N)

https://leetcode.com/problems/increasing-order-search-tree/discuss/165885

* Lang:    cpp
* Author:  lee215
* Votes:   90

I didn\'t use this condition of BST, and just inorder output the whole tree.

Straigh forward idea:
`res = inorder(root.left) + root + inorder(root.right)`

Several tips here:

1. I pass a tail part to the function, so it can link it to the last node.
This operation takes `O(1)`, instead of `O(N)`.
Otherwise the whole time complexity will be `O(N^2)`.

2. Also, remember to set `root.left = null`.
Otherwise it will be TLE for Leetcode to traverse your tree.

3. Should arrange the old tree, not create a new tree.
The judgement won\'t take it as wrong answer, but it is.


**C++:**
```
    TreeNode* increasingBST(TreeNode* root, TreeNode* tail = NULL) {
        if (!root) return tail;
        TreeNode* res = increasingBST(root->left, root);
        root->left = NULL;
        root->right = increasingBST(root->right, tail);
        return res;
    }
```

**Java:**
```
    public TreeNode increasingBST(TreeNode root) {
        return increasingBST(root, null);
    }

    public TreeNode increasingBST(TreeNode root, TreeNode tail) {
        if (root == null) return tail;
        TreeNode res = increasingBST(root.left, root);
        root.left = null;
        root.right = increasingBST(root.right, tail);
        return res;
    }
```
**Python:**
```
    def increasingBST(self, root, tail = None):
        if not root: return tail
        res = self.increasingBST(root.left, root)
        root.left = None
        root.right = self.increasingBST(root.right, tail)
        return res
```

