#
# @lc app=leetcode id=353 lang=python3
#
# [353] Design Snake Game
#
# https://leetcode.com/problems/design-snake-game/description/
#
# algorithms
# Medium (29.94%)
# Total Accepted:    19K
# Total Submissions: 63.3K
# Testcase Example:  '["SnakeGame","move","move","move","move","move","move"]\n[[3,2,[[1,2],[0,1]]],["R"],["D"],["R"],["U"],["L"],["U"]]'
#
# Design a Snake game that is played on a device with screen size = width x
# height. Play the game online if you are not familiar with the game.
#
# The snake is initially positioned at the top left corner (0,0) with length =
# 1 unit.
#
# You are given a list of food's positions in row-column order. When a snake
# eats the food, its length and the game's score both increase by 1.
#
# Each food appears one by one on the screen. For example, the second food will
# not appear until the first food was eaten by the snake.
#
# When a food does appear on the screen, it is guaranteed that it will not
# appear on a block occupied by the snake.
#
# Example:
#
#
# Given width = 3, height = 2, and food = [[1,2],[0,1]].
#
# Snake snake = new Snake(width, height, food);
#
# Initially the snake appears at position (0,0) and the food at (1,2).
#
# |S| | |
# | | |F|
#
# snake.move("R"); -> Returns 0
#
# | |S| |
# | | |F|
#
# snake.move("D"); -> Returns 0
#
# | | | |
# | |S|F|
#
# snake.move("R"); -> Returns 1 (Snake eats the first food and right after
# that, the second food appears at (0,1) )
#
# | |F| |
# | |S|S|
#
# snake.move("U"); -> Returns 1
#
# | |F|S|
# | | |S|
#
# snake.move("L"); -> Returns 2 (Snake eats the second food)
#
# | |S|S|
# | | |S|
#
# snake.move("U"); -> Returns -1 (Game over because snake collides with border)
#
#
from collections import deque
class SnakeGame:

    def __init__(self, width: int, height: int, food: List[List[int]]):
        """
        Initialize your data structure here.
        @param width - screen width
        @param height - screen height
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
        """
        self.dq = deque()  # keeps track of the snake
        self.h = set()    # constant time lookup
        self.maxr = height
        self.maxc = width
        self.p = (0,0)
        self.dq.append(self.p)
        self.h.add(self.p)
        self.food = [(r,c) for r,c in food]
        self.foodi = 0

    def move(self, direction: str) -> int:
        """
        Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down
        @return The game's score after the move. Return -1 if game over.
        Game over when snake crosses the screen boundary or bites its body.
        """
        r,c = self.p
        if direction == 'U':
            r -= 1
            if r < 0:
                return -1
        if direction == 'L':
            c -= 1
            if c < 0:
                return -1
        if direction == 'R':
            c += 1
            if c >= self.maxc:
                return -1
        if direction == 'D':
            r += 1
            if r >= self.maxr:
                return -1
        new_pos = (r,c)
        # res = 0
        if self.foodi < len(self.food) and new_pos == self.food[self.foodi]:
            self.foodi += 1
            # res = self.foodi
        else:
            self.h.discard(self.dq.popleft())
        if new_pos in self.h:
            return -1
        self.h.add(new_pos)
        self.dq.append(new_pos)
        # print("self.p:{} direction:{} new_pos:{} self.h:{} self.dq:{} self.food[self.foodi]:{}".format(self.p,direction,new_pos,self.h,self.dq,self.food[self.foodi]))
        self.p = new_pos
        #return res
        return self.foodi


test = True
if test:
    case = [False]*1 + [True] + [False]*10
    if case[0]:
        # Your SnakeGame object will be instantiated and called as such:
        width = 38
        height = 7
        food = [[1,5], [3,5]]
        obj = SnakeGame(width, height, food)
        moves = [["R"],["D"],["L"],["R"],["R"],["L"],["L"],["D"],["R"],["R"],["D"],["R"],["D"],["R"],["R"],["U"],["L"],["R"],["D"],["D"],["R"],["L"],["R"],["L"],["U"],["D"],["R"],["L"],["L"],["L"],["U"],["U"],["U"],["U"],["L"],["L"],["U"],["D"],["U"],["R"],["R"],["D"],["D"],["U"],["U"],["D"],["R"],["U"],["D"],["D"],["U"],["R"],["R"],["U"],["R"],["R"]]
        for i,m in enumerate(moves):
            print(i, obj.move(m[0]), obj.p, obj.dq)
    if case[1]:
        width = 3
        height = 2
        food = [[1,2],[0,1]]
        moves = "RDRULU"
        obj = SnakeGame(width,height,food)
        for i,m in enumerate(moves):
            print(i, obj.move(m), obj.p, obj.dq)
    if case[2]:
        width = 3
        height = 2
        food = [[1,2],[0,1]]
        moves = "RDRULU"

