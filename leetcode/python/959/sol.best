
C++ with picture, DFS on upscaled grid

https://leetcode.com/problems/regions-cut-by-slashes/discuss/205674

* Lang:    cpp
* Author:  votrubac
* Votes:   96

We can upscale the input grid to [n * 3][n * 3] grid and draw "lines" there. Then, we can paint empty regions using DFS and count them. Picture below says it all. Note that [n * 2][n * 2]  grid does not work as "lines" are too thick to identify empty areas correctly.
![image](https://assets.leetcode.com/users/votrubac/image_1544935075.png)
```
void dfs(vector<vector<int>>& g, int i, int j) {
  if (i >= 0 && j >= 0 && i < g.size() && j < g.size() && g[i][j] == 0) {
    g[i][j] = 1;
    dfs(g, i - 1, j), dfs(g, i + 1, j), dfs(g, i, j - 1), dfs(g, i, j + 1);
  }
}
int regionsBySlashes(vector<string>& grid, int regions = 0) {
  vector<vector<int>> g(grid.size() * 3, vector<int>(grid.size() * 3, 0));
  for (auto i = 0; i < grid.size(); ++i)
    for (auto j = 0; j < grid.size(); ++j) {
      if (grid[i][j] == \'/\') g[i * 3][j * 3 + 2] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3] = 1;
      if (grid[i][j] == \'\\\\\') g[i * 3][j * 3] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3 + 2] = 1;
    }
  for (auto i = 0; i < g.size(); ++i)
    for (auto j = 0; j < g.size(); ++j) if (g[i][j] == 0) dfs(g, i, j), ++regions;
  return regions;
}
```
