#
# @lc app=leetcode id=407 lang=python3
#
# [407] Trapping Rain Water II
#
# https://leetcode.com/problems/trapping-rain-water-ii/description/
#
# algorithms
# Hard (38.73%)
# Total Accepted:    23.9K
# Total Submissions: 61.8K
# Testcase Example:  '[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]'
#
# Given an m x n matrix of positive integers representing the height of each
# unit cell in a 2D elevation map, compute the volume of water it is able to
# trap after raining.
#
#
#
# Note:
#
# Both m and n are less than 110. The height of each unit cell is greater than
# 0 and is less than 20,000.
#
#
#
# Example:
#
#
# Given the following 3x6 height map:
# [
# ⁠ [1,4,3,1,3,2],
# ⁠ [3,2,1,3,2,4],
# ⁠ [2,3,3,2,3,1]
# ]
#
# Return 4.
#
#
#
#
# The above image represents the elevation map
# [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.
#
#
#
#
#
# After the rain, water is trapped between the blocks. The total volume of
# water trapped is 4.
#
#
import heapq


class Solution:
    def trapRainWater(self, m):
        """
        Basically you can trap rainwater if you are surrounded on four sides by higher things
        for example.

                 | <- border
        |x       |    x: water is trapped
        |-       |    Can it be higher than x?
        |-       |    No, it will overflow

        If there is a negative height difference between the
        neighbor of a wall and the wall, water will be trapped.
        """
        if len(m) == 0 or len(m[0]) == 0:
            return 0

        hq = []
        nrow = len(m)
        ncol = len(m[0])
        visited = set()
        for row in range(nrow):
            for col in range(ncol):
                if row == 0 or row == nrow-1 or col == 0 or col == ncol-1:
                    heapq.heappush(hq, (m[row][col], row, col))
                    visited.add((row, col))
        res = 0
        while hq:
            h, row, col = heapq.heappop(hq)   # min heap
            for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                rr, cc = row + dr, col + dc
                if (rr, cc) not in visited:
                    if 0 <= rr < nrow and 0 <= cc < ncol:
                        res += max(0, h-m[rr][cc])
                        heapq.heappush(hq, (max(m[rr][cc], h), rr, cc))
                        visited.add((rr, cc))
        return res


test = True
if test:
    sol = Solution()
    case = [False]*0 + [True] + [False]*1
    if case[0]:
        # Example:
        Input = [[1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1]]
        # After the rain, water is trapped between the blocks. The total volume of
        # water trapped is 4.
        print(sol.trapRainWater(Input))
