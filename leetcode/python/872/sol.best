
[C++/Java/Python] O(logN) Space

https://leetcode.com/problems/leaf-similar-trees/discuss/152329

* Lang:    cpp
* Author:  lee215
* Votes:   88

**General methode is that traverse DFS whole tree to a list and compare two lists.**
Here I share an idea of comparing node by node using `O(logN)` space.

Use a `stack<TreeNode>` to keep dfs path.
`dfs(stack)` will return next leaf.
Check leaves one by one, until the end or difference.
Only `O(logN)` space for stack, no extra space for comparation.
`O(1)` is also possible if we can modify the tree.

**C++:**
```
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        stack<TreeNode*> s1 , s2;
        s1.push(root1); s2.push(root2);
        while (!s1.empty() && !s2.empty())
            if (dfs(s1) != dfs(s2)) return false;
        return s1.empty() && s2.empty();
    }

    int dfs(stack<TreeNode*>& s) {
        while (true) {
            TreeNode* node = s.top(); s.pop();
            if (node->right) s.push(node->right);
            if (node->left) s.push(node->left);
            if (!node->left && !node->right) return node->val;
        }
    }
```

**Java:**
```
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        Stack<TreeNode> s1 = new Stack<>(), s2 = new Stack<>();
        s1.push(root1); s2.push(root2);
        while (!s1.empty() && !s2.empty())
            if (dfs(s1) != dfs(s2)) return false;
        return s1.empty() && s2.empty();
    }

    public int dfs(Stack<TreeNode> s) {
        while (true) {
            TreeNode node = s.pop();
            if (node.right != null) s.push(node.right);
            if (node.left != null) s.push(node.left);
            if (node.left == null && node.right == null) return node.val;
        }
    }
```

**Python:**
```
    def leafSimilar(self, root1, root2):
        def dfs(node):
            if not node: return
            if not node.left and not node.right: yield node.val
            for i in dfs(node.left): yield i
            for i in dfs(node.right): yield i
        return all(a == b for a, b in itertools.izip_longest(dfs(root1), dfs(root2)))
```
