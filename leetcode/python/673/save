#
# @lc app=leetcode id=673 lang=python3
#
# [673] Number of Longest Increasing Subsequence
#
# https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/
#
# algorithms
# Medium (33.00%)
# Total Accepted:    26K
# Total Submissions: 78.8K
# Testcase Example:  '[1,3,5,4,7]'
#
#
# Given an unsorted array of integers, find the number of longest increasing
# subsequence.
#
#
# Example 1:
#
# Input: [1,3,5,4,7]
# Output: 2
# Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1,
# 3, 5, 7].
#
#
#
# Example 2:
#
# Input: [2,2,2,2,2]
# Output: 5
# Explanation: The length of longest continuous increasing subsequence is 1,
# and there are 5 subsequences' length is 1, so output 5.
#
#
#
# Note:
# Length of the given array will be not exceed 2000 and the answer is
# guaranteed to be fit in 32-bit signed int.
#
#


def bisect_left(a, x, lo=0, hi=None):
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo + hi)//2
        if a[mid][-1] < x: lo = mid+1
        else: hi = mid
    return lo

def bisect_right(a, x, lo=0, hi=None):
    # print([a[x][-1] for x in range(lo,hi)])
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo + hi)//2
        if x < a[mid][-1]: hi = mid
        else: lo = mid+1
    return lo

class Solution:
    def findNumberOfLIS(self, nums):
        if len(nums) < 1:
            return 1

        s = [None]*len(nums)
        for i in range(len(nums)):
            s[i] = []
        p = {}
        maxj = 1
        for i, el in enumerate(nums):
            if i == 0:
                s[0].append(el)
                p[el] = None
                continue
            j = bisect_left(s, el, 0, maxj)
            if j == 0:
                p[el] = None
            else:
                p[el] = s[j-1][-1]
            s[j].append(el)
            if j == maxj:
                maxj = j+1
        print(s[0:maxj])
        # print([s[x][-1] for x in range(0,maxj)])
        prod = 1
        for i in range(0,maxj):
            prod *= len(s[i])
        return prod

test = True
if test:
    sol = Solution()
    case = [False]*3 + [True] + [False]*2
    if case[0]:
        # Example 1:
        Input = [1,3,5,4,7]
        # Output: 2
        print(sol.findNumberOfLIS(Input))
    if case[1]:
        # Example 2:
        Input = [2,2,2,2,2]
        # Output: 5
        print(sol.findNumberOfLIS(Input))
    if case[2]:
        # Example 2:
        Input = []
        # Output: 5
        print(sol.findNumberOfLIS(Input))
    if case[3]:
        # Example 2:
        Input = [1,2,4,3,5,4,7,2]
        # Output: 5
        print(sol.findNumberOfLIS(Input))
