#
# @lc app=leetcode id=221 lang=python3
#
# [221] Maximal Square
#
# https://leetcode.com/problems/maximal-square/description/
#
# algorithms
# Medium (32.02%)
# Total Accepted:    115.4K
# Total Submissions: 360.4K
# Testcase Example:  '[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]'
#
# Given a 2D binary matrix filled with 0's and 1's, find the largest square
# containing only 1's and return its area.
#
# Example:
#
#
# Input:
#
# 1 0 1 0 0
# 1 0 1 1 1
# 1 1 1 1 1
# 1 0 0 1 0
#
# Output: 4
#
#
class Solution:
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """

        m = [[int(x) for x in y] for y in matrix]
        row = len(m)
        if row == 0:
            return 0

        col = len(m[0])
        msq = 0
        for i in range(row):
            for j in range(col):
                if m[i][j] == 1:
                    if i > 0 and j > 0:
                        m[i][j] = min(
                            m[i-1][j-1] if i > 0 and j > 0 else 0,
                            m[i-1][j] if i > 0 else 0,
                            m[i][j-1] if j > 0 else 0
                        ) + 1
                    if m[i][j] > msq:
                        msq = m[i][j]
        return msq**2

test = True
if test:

    # Testcase Example:  '[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]'

    a = [[1, 0, 1, 0, 0],
         [1, 0, 1, 1, 1],
         [1, 1, 1, 1, 1],
         [1, 0, 0, 1, 0]]

    a = [["1", "0", "1", "0", "0"],
         ["1", "0", "1", "1", "1"],
         ["1", "1", "1", "1", "1"],
         ["1", "0", "0", "1", "0"]]

    s = Solution()
    print(s.maximalSquare(a))
