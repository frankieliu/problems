Working with Threads
====================

The ``threading`` module provides functionality to work with threads.

The ``currentThread`` function gives the current running thread object.

.. code-block:: python

    >>> import threading
    >>> threading.currentThread().getName()
    'MainThread'

A new thread is created by calling the ``Thread`` class constructor.

.. code-block:: python

    import threading

    def f():
        print threading.currentThread().getName()

    t = threading.Thread(target=f)
    t.start()
    
The same thing can be achieved by extending the ``Thread`` class and implementing the ``run`` method.

.. code-block:: python

    import threading

    class MyThread(threading.Thread):
        def run(self):
            print self.getName()
            
    t = MyThread()
    t.start()

Notice that we didn't call ``threading.currentThread()`` function. That is because we already know that the current thread object is ``self``.

Lets try adding couple of prints to see how the execution is happening.

.. code-block:: python

    import threading

    class MyThread(threading.Thread):
        def run(self):
            for i in range(5):
                print self.getName(), i
            
    t = MyThread()
    print "before starting the thread"
    t.start()
    print "after starting the thread"

This program has two threads. The main thread and the new thread that we've 
created. The order of exection of these threads is not defined, it can happen 
in any order. When we run this program, the output can be:

either this:

.. code-block:: text

    before starting the thread
    Thread-1 0
     after starting the thread
    Thread-1 1
    Thread-1 2
    Thread-1 3
    Thread-1 4

or this:

.. code-block:: text

    before starting the thread
    Thread-1 after starting the thread
    0
    Thread-1 1
    Thread-1 2
    Thread-1 3
    Thread-1 4

or this:

.. code-block:: text

    before starting the thread
    Thread-1 0
     after starting the threadThread-1 1

    Thread-1 2
    Thread-1 3
    Thread-1 4

or something completely different.

The `join` method on thread waits until the thread execution is complete.

.. code-block:: python

    import threading

    class MyThread(threading.Thread):
        def run(self):
            for i in range(5):
                print self.getName()
            
    t = MyThread()
    print "before starting the thread"
    t.start()
    t.join()
    print "after finishing the thread"

This program output will always be consistent, as the last print statement is after ``join``, which will make sure the thread is complete.

Here is the output:

.. code-block:: text

    before starting the thread
    Thread-1 0
    Thread-1 1
    Thread-1 2
    Thread-1 3
    Thread-1 4
    after finishing the thread

Race Conditions
---------------

Lets look at a program in which multiple threads are updating a single global variable.

.. code-block:: python

    import threading

    x = 0
    
    def increment():
        global x
        x = x + 1
    
    def f():
        for i in range(10000):
            increment()

    def main():
        n = 5

        # start n threads
        threads = []
        for i in range(n):
            t = threading.Thread(target=f)
            threads.append(t)
            t.start()

        # let them run and wait for them to finish
        for t in threads:
            t.join()
            
        # print the value of x
        print x

    if __name__ == "__main__":
        main()

What do you think will be printed? There are 5 threads running and each thread is incrementing x by 10000, so the exepected value is 50000. 

Lets see what we get when run it.

.. code-block:: text

    $ python race0.py 
    33372
    $ python race0.py 
    21990
    $ python race0.py 
    23808

Yes, the output is unpredictable!

Lets look at the following innocent line of code.

.. code-block:: python

    x = x + 1

We already that the right hand side is evaluated first and assiged to right 
hand side. This process can be divided in to independent 3 parts.

.. code-block:: text

    A: read x
    B: compute x + 1
    C: store the computed value as x

Assume there are 2 threads in execution and they can execute these three steps in any order. Assume the value of x is 0 at the beginning. 

.. code-block:: text

    T1       T2
    |        |
    A        A
    B        |
    |        B
    C        |
    |        C

The following execution order will result in value 1 for x as both T1 and T2 see value as x as 0 to start with.

This kind of situation is called a `race condition <https://en.wikipedia.org/wiki/Race_condition>`_.

This can be fixed if can make sure the code that is creating the trouble is executed by one thread at a time. This is achived by using locks.

.. code-block:: python

    lock = threading.Lock()
    
    def increment():
        lock.acquire()
        x = x + 1
        lock.release()

A lock can be acquired by only one thread at a time. If the lock is already 
acquired by a thread, all other threads trying to acquire the same lock will be 
blocked until the lock is released.

This program will not guarantee that the output is consistent.

It is usually good practice to keep the lock acquire/release in a try-finally 
block, so that the lock is release even if an exception is raised in the piece 
of code between acquire and release.

.. code-block:: python

    lock.acquire()
    try:
        do_something()
    finally:
        lock.release()

.. problem:: The following program has 2 threads executing a function that prints some of lines of text. The prints sometimes gets mixed. Can you improve this program so that the prints are not mixed up. It is completely alright to have unpredicted order as long as prints are not mixed up.

.. code-block:: python

    import threading

    def f():
        name = threading.currentThread().getName()

        print name, "begin"
        for i in range(10):
            print name, i
        print name, "end"

    def main():
        n = 2
        for i in range(n):
            t = threading.Thread(target=f)
            t.start()

    if __name__ == "__main__":
        main()

.. problem:: Can you rewrite the program by extendind the Thread class?

